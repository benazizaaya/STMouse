
accleromteref4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f1c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080080a4  080080a4  000180a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080f4  080080f4  00020190  2**0
                  CONTENTS
  4 .ARM          00000008  080080f4  080080f4  000180f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080fc  080080fc  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080fc  080080fc  000180fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008100  08008100  00018100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  08008104  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020190  2**0
                  CONTENTS
 10 .bss          00000ff8  20000190  20000190  00020190  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001188  20001188  00020190  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00010f62  00000000  00000000  00020203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003391  00000000  00000000  00031165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e88  00000000  00000000  000344f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000acc  00000000  00000000  00035380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000239c2  00000000  00000000  00035e4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000125b0  00000000  00000000  0005980e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c87a0  00000000  00000000  0006bdbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000039e4  00000000  00000000  00134560  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  00137f44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000190 	.word	0x20000190
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800808c 	.word	0x0800808c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000194 	.word	0x20000194
 80001c4:	0800808c 	.word	0x0800808c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <LIS302DL_Init>:
  * @brief  Set LIS302DL Initialization.
  * @param  InitStruct: contains mask of different init parameters
  * @retval None
  */
void LIS302DL_Init(uint16_t InitStruct)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80004ce:	2300      	movs	r3, #0
 80004d0:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  ACCELERO_IO_Init();
 80004d2:	f000 fe85 	bl	80011e0 <ACCELERO_IO_Init>

  ctrl = (uint8_t) InitStruct;
 80004d6:	88fb      	ldrh	r3, [r7, #6]
 80004d8:	b2db      	uxtb	r3, r3
 80004da:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG1_ADDR, 1);
 80004dc:	f107 030f 	add.w	r3, r7, #15
 80004e0:	2201      	movs	r2, #1
 80004e2:	2120      	movs	r1, #32
 80004e4:	4618      	mov	r0, r3
 80004e6:	f000 fed9 	bl	800129c <ACCELERO_IO_Write>
}
 80004ea:	bf00      	nop
 80004ec:	3710      	adds	r7, #16
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}

080004f2 <LIS302DL_DeInit>:
  * @brief  LIS302DL De-Initialization.
  * @param  None
  * @retval None.
  */
void LIS302DL_DeInit(void)
{
 80004f2:	b480      	push	{r7}
 80004f4:	af00      	add	r7, sp, #0
  
}
 80004f6:	bf00      	nop
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr

08000500 <LIS302DL_ReadID>:
  * @brief  Read LIS302DL device ID.
  * @param  None
  * @retval The Device ID (two bytes).
  */
uint8_t LIS302DL_ReadID(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
  uint8_t tmp = 0;
 8000506:	2300      	movs	r3, #0
 8000508:	71fb      	strb	r3, [r7, #7]

  /* Configure the low level interface */
  ACCELERO_IO_Init();
 800050a:	f000 fe69 	bl	80011e0 <ACCELERO_IO_Init>

  /* Read WHO_AM_I register */
  ACCELERO_IO_Read(&tmp, LIS302DL_WHO_AM_I_ADDR, 1);
 800050e:	1dfb      	adds	r3, r7, #7
 8000510:	2201      	movs	r2, #1
 8000512:	210f      	movs	r1, #15
 8000514:	4618      	mov	r0, r3
 8000516:	f000 fef3 	bl	8001300 <ACCELERO_IO_Read>
  
  /* Return the ID */
  return (uint16_t)tmp;
 800051a:	79fb      	ldrb	r3, [r7, #7]
}
 800051c:	4618      	mov	r0, r3
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}

08000524 <LIS302DL_FilterConfig>:
  * @brief  Set LIS302DL Internal High Pass Filter configuration.
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LIS302DL_FilterConfig(uint8_t FilterStruct)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0
 800052a:	4603      	mov	r3, r0
 800052c:	71fb      	strb	r3, [r7, #7]
  uint8_t ctrl = 0x00;
 800052e:	2300      	movs	r3, #0
 8000530:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  ACCELERO_IO_Read(&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 8000532:	f107 030f 	add.w	r3, r7, #15
 8000536:	2201      	movs	r2, #1
 8000538:	2121      	movs	r1, #33	; 0x21
 800053a:	4618      	mov	r0, r3
 800053c:	f000 fee0 	bl	8001300 <ACCELERO_IO_Read>

  /* Clear high pass filter cut-off level, interrupt and data selection bits */
  ctrl &= (uint8_t)~(LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER | \
 8000540:	7bfb      	ldrb	r3, [r7, #15]
 8000542:	f023 032f 	bic.w	r3, r3, #47	; 0x2f
 8000546:	b2db      	uxtb	r3, r3
 8000548:	73fb      	strb	r3, [r7, #15]
                     LIS302DL_HIGHPASSFILTER_LEVEL_3 | \
                     LIS302DL_HIGHPASSFILTERINTERRUPT_1_2);

  ctrl |= FilterStruct;
 800054a:	7bfa      	ldrb	r2, [r7, #15]
 800054c:	79fb      	ldrb	r3, [r7, #7]
 800054e:	4313      	orrs	r3, r2
 8000550:	b2db      	uxtb	r3, r3
 8000552:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 8000554:	f107 030f 	add.w	r3, r7, #15
 8000558:	2201      	movs	r2, #1
 800055a:	2121      	movs	r1, #33	; 0x21
 800055c:	4618      	mov	r0, r3
 800055e:	f000 fe9d 	bl	800129c <ACCELERO_IO_Write>
}
 8000562:	bf00      	nop
 8000564:	3710      	adds	r7, #16
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}

0800056a <LIS302DL_InterruptConfig>:
  * @param  LIS302DL_InterruptConfig_TypeDef: pointer to a LIS302DL_InterruptConfig_TypeDef 
  *         structure that contains the configuration setting for the LIS302DL Interrupt.
  * @retval None
  */
void LIS302DL_InterruptConfig(LIS302DL_InterruptConfigTypeDef *LIS302DL_IntConfigStruct)
{
 800056a:	b580      	push	{r7, lr}
 800056c:	b084      	sub	sp, #16
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
  uint8_t ctrl = 0x00;
 8000572:	2300      	movs	r3, #0
 8000574:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFG register */
  ACCELERO_IO_Read(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 8000576:	f107 030f 	add.w	r3, r7, #15
 800057a:	2201      	movs	r2, #1
 800057c:	2138      	movs	r1, #56	; 0x38
 800057e:	4618      	mov	r0, r3
 8000580:	f000 febe 	bl	8001300 <ACCELERO_IO_Read>
  
  /* Configure latch Interrupt request, click interrupts and double click interrupts */                   
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	781a      	ldrb	r2, [r3, #0]
                   LIS302DL_IntConfigStruct->SingleClick_Axes | \
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	785b      	ldrb	r3, [r3, #1]
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 800058c:	4313      	orrs	r3, r2
 800058e:	b2da      	uxtb	r2, r3
                   LIS302DL_IntConfigStruct->DoubleClick_Axes);
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	789b      	ldrb	r3, [r3, #2]
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 8000594:	4313      	orrs	r3, r2
 8000596:	b2db      	uxtb	r3, r3
 8000598:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK_CFG register */
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 800059a:	f107 030f 	add.w	r3, r7, #15
 800059e:	2201      	movs	r2, #1
 80005a0:	2138      	movs	r1, #56	; 0x38
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 fe7a 	bl	800129c <ACCELERO_IO_Write>
}
 80005a8:	bf00      	nop
 80005aa:	3710      	adds	r7, #16
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <LIS302DL_Click_IntConfig>:
  * @brief  Set LIS302DL Interrupt configuration
  * @param  None
  * @retval None
  */
void LIS302DL_Click_IntConfig(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80005b6:	2300      	movs	r3, #0
 80005b8:	71fb      	strb	r3, [r7, #7]
  LIS302DL_InterruptConfigTypeDef   LIS302DL_InterruptStruct;
  
  ACCELERO_IO_ITConfig();
 80005ba:	f000 fe3f 	bl	800123c <ACCELERO_IO_ITConfig>
  
  /* Set configuration of Internal High Pass Filter of LIS302DL */
  LIS302DL_InterruptStruct.Latch_Request = LIS302DL_INTERRUPTREQUEST_LATCHED;
 80005be:	2340      	movs	r3, #64	; 0x40
 80005c0:	713b      	strb	r3, [r7, #4]
  LIS302DL_InterruptStruct.SingleClick_Axes = LIS302DL_CLICKINTERRUPT_Z_ENABLE;
 80005c2:	2310      	movs	r3, #16
 80005c4:	717b      	strb	r3, [r7, #5]
  LIS302DL_InterruptStruct.DoubleClick_Axes = LIS302DL_DOUBLECLICKINTERRUPT_Z_ENABLE;
 80005c6:	2320      	movs	r3, #32
 80005c8:	71bb      	strb	r3, [r7, #6]
  LIS302DL_InterruptConfig(&LIS302DL_InterruptStruct);
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	4618      	mov	r0, r3
 80005ce:	f7ff ffcc 	bl	800056a <LIS302DL_InterruptConfig>
  
  /* Configure Interrupt control register: enable Click interrupt on INT1 and
  INT2 on Z axis high event */
  ctrl = 0x3F;
 80005d2:	233f      	movs	r3, #63	; 0x3f
 80005d4:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG3_ADDR, 1);
 80005d6:	1dfb      	adds	r3, r7, #7
 80005d8:	2201      	movs	r2, #1
 80005da:	2122      	movs	r1, #34	; 0x22
 80005dc:	4618      	mov	r0, r3
 80005de:	f000 fe5d 	bl	800129c <ACCELERO_IO_Write>
  
  /* Enable Interrupt generation on click on Z axis */
  ctrl = 0x50;
 80005e2:	2350      	movs	r3, #80	; 0x50
 80005e4:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 80005e6:	1dfb      	adds	r3, r7, #7
 80005e8:	2201      	movs	r2, #1
 80005ea:	2138      	movs	r1, #56	; 0x38
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 fe55 	bl	800129c <ACCELERO_IO_Write>
  
  /* Configure Click Threshold on X/Y axis (10 x 0.5g) */
  ctrl = 0xAA;
 80005f2:	23aa      	movs	r3, #170	; 0xaa
 80005f4:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_THSY_X_REG_ADDR, 1);
 80005f6:	1dfb      	adds	r3, r7, #7
 80005f8:	2201      	movs	r2, #1
 80005fa:	213b      	movs	r1, #59	; 0x3b
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 fe4d 	bl	800129c <ACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis (10 x 0.5g) */
  ctrl = 0x0A;
 8000602:	230a      	movs	r3, #10
 8000604:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_THSZ_REG_ADDR, 1);
 8000606:	1dfb      	adds	r3, r7, #7
 8000608:	2201      	movs	r2, #1
 800060a:	213c      	movs	r1, #60	; 0x3c
 800060c:	4618      	mov	r0, r3
 800060e:	f000 fe45 	bl	800129c <ACCELERO_IO_Write>
  
  /* Enable interrupt on Y axis high event */
  ctrl = 0x4C;
 8000612:	234c      	movs	r3, #76	; 0x4c
 8000614:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_FF_WU_CFG1_REG_ADDR, 1);
 8000616:	1dfb      	adds	r3, r7, #7
 8000618:	2201      	movs	r2, #1
 800061a:	2130      	movs	r1, #48	; 0x30
 800061c:	4618      	mov	r0, r3
 800061e:	f000 fe3d 	bl	800129c <ACCELERO_IO_Write>
  
  /* Configure Time Limit */
  ctrl = 0x03;
 8000622:	2303      	movs	r3, #3
 8000624:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_TIMELIMIT_REG_ADDR, 1);
 8000626:	1dfb      	adds	r3, r7, #7
 8000628:	2201      	movs	r2, #1
 800062a:	213d      	movs	r1, #61	; 0x3d
 800062c:	4618      	mov	r0, r3
 800062e:	f000 fe35 	bl	800129c <ACCELERO_IO_Write>
  
  /* Configure Latency */
  ctrl = 0x7F;
 8000632:	237f      	movs	r3, #127	; 0x7f
 8000634:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_LATENCY_REG_ADDR, 1);
 8000636:	1dfb      	adds	r3, r7, #7
 8000638:	2201      	movs	r2, #1
 800063a:	213e      	movs	r1, #62	; 0x3e
 800063c:	4618      	mov	r0, r3
 800063e:	f000 fe2d 	bl	800129c <ACCELERO_IO_Write>
  
  /* Configure Click Window */
  ctrl = 0x7F;
 8000642:	237f      	movs	r3, #127	; 0x7f
 8000644:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_WINDOW_REG_ADDR, 1);
 8000646:	1dfb      	adds	r3, r7, #7
 8000648:	2201      	movs	r2, #1
 800064a:	213f      	movs	r1, #63	; 0x3f
 800064c:	4618      	mov	r0, r3
 800064e:	f000 fe25 	bl	800129c <ACCELERO_IO_Write>
}
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}

0800065a <LIS302DL_Click_IntClear>:
  * @brief  Clear LIS302DL click Interrupt 
  * @param  None
  * @retval None
  */
void LIS302DL_Click_IntClear(void)
{
 800065a:	b580      	push	{r7, lr}
 800065c:	b084      	sub	sp, #16
 800065e:	af00      	add	r7, sp, #0
  uint8_t buffer[6], clickreg = 0;
 8000660:	2300      	movs	r3, #0
 8000662:	71fb      	strb	r3, [r7, #7]

  /* Read click and status registers if the available MEMS Accelerometer is LIS302DL */
  ACCELERO_IO_Read(&clickreg, LIS302DL_CLICK_SRC_REG_ADDR, 1); 
 8000664:	1dfb      	adds	r3, r7, #7
 8000666:	2201      	movs	r2, #1
 8000668:	2139      	movs	r1, #57	; 0x39
 800066a:	4618      	mov	r0, r3
 800066c:	f000 fe48 	bl	8001300 <ACCELERO_IO_Read>
  ACCELERO_IO_Read(buffer, LIS302DL_STATUS_REG_ADDR, 6);
 8000670:	f107 0308 	add.w	r3, r7, #8
 8000674:	2206      	movs	r2, #6
 8000676:	2127      	movs	r1, #39	; 0x27
 8000678:	4618      	mov	r0, r3
 800067a:	f000 fe41 	bl	8001300 <ACCELERO_IO_Read>
}
 800067e:	bf00      	nop
 8000680:	3710      	adds	r7, #16
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}

08000686 <LIS302DL_RebootCmd>:
  * @brief  Reboot memory content of LIS302DL.
  * @param  None
  * @retval None
  */
void LIS302DL_RebootCmd(void)
{
 8000686:	b580      	push	{r7, lr}
 8000688:	b082      	sub	sp, #8
 800068a:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  /* Read CTRL_REG2 register */
  ACCELERO_IO_Read(&tmpreg, LIS302DL_CTRL_REG2_ADDR, 1);
 800068c:	1dfb      	adds	r3, r7, #7
 800068e:	2201      	movs	r2, #1
 8000690:	2121      	movs	r1, #33	; 0x21
 8000692:	4618      	mov	r0, r3
 8000694:	f000 fe34 	bl	8001300 <ACCELERO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LIS302DL_BOOT_REBOOTMEMORY;
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG2 register */
  ACCELERO_IO_Write(&tmpreg, LIS302DL_CTRL_REG2_ADDR, 1);
 80006a2:	1dfb      	adds	r3, r7, #7
 80006a4:	2201      	movs	r2, #1
 80006a6:	2121      	movs	r1, #33	; 0x21
 80006a8:	4618      	mov	r0, r3
 80006aa:	f000 fdf7 	bl	800129c <ACCELERO_IO_Write>
}
 80006ae:	bf00      	nop
 80006b0:	3708      	adds	r7, #8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}

080006b6 <LIS302DL_ReadACC>:
  *         ACC[mg]=SENSITIVITY* (out_h*256+out_l)/16 (12 bit rappresentation)
  * @param  pfData: Data out pointer
  * @retval None
  */
void LIS302DL_ReadACC(int16_t *pData)
{
 80006b6:	b580      	push	{r7, lr}
 80006b8:	b088      	sub	sp, #32
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	6078      	str	r0, [r7, #4]
  int8_t buffer[6];
  int16_t pnRawData[3];
  uint8_t sensitivity = LIS302DL_SENSITIVITY_2_3G;
 80006be:	2312      	movs	r3, #18
 80006c0:	77fb      	strb	r3, [r7, #31]
  uint8_t crtl, i = 0x00;
 80006c2:	2300      	movs	r3, #0
 80006c4:	77bb      	strb	r3, [r7, #30]
  
  ACCELERO_IO_Read(&crtl, LIS302DL_CTRL_REG1_ADDR, 1);
 80006c6:	f107 030f 	add.w	r3, r7, #15
 80006ca:	2201      	movs	r2, #1
 80006cc:	2120      	movs	r1, #32
 80006ce:	4618      	mov	r0, r3
 80006d0:	f000 fe16 	bl	8001300 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)buffer, LIS302DL_OUT_X_ADDR, 6);
 80006d4:	f107 0318 	add.w	r3, r7, #24
 80006d8:	2206      	movs	r2, #6
 80006da:	2129      	movs	r1, #41	; 0x29
 80006dc:	4618      	mov	r0, r3
 80006de:	f000 fe0f 	bl	8001300 <ACCELERO_IO_Read>
  
  for(i=0; i<3; i++)
 80006e2:	2300      	movs	r3, #0
 80006e4:	77bb      	strb	r3, [r7, #30]
 80006e6:	e00f      	b.n	8000708 <LIS302DL_ReadACC+0x52>
  {
    pnRawData[i] = buffer[2*i];
 80006e8:	7fbb      	ldrb	r3, [r7, #30]
 80006ea:	005b      	lsls	r3, r3, #1
 80006ec:	3320      	adds	r3, #32
 80006ee:	443b      	add	r3, r7
 80006f0:	f913 2c08 	ldrsb.w	r2, [r3, #-8]
 80006f4:	7fbb      	ldrb	r3, [r7, #30]
 80006f6:	b212      	sxth	r2, r2
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	3320      	adds	r3, #32
 80006fc:	443b      	add	r3, r7
 80006fe:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8000702:	7fbb      	ldrb	r3, [r7, #30]
 8000704:	3301      	adds	r3, #1
 8000706:	77bb      	strb	r3, [r7, #30]
 8000708:	7fbb      	ldrb	r3, [r7, #30]
 800070a:	2b02      	cmp	r3, #2
 800070c:	d9ec      	bls.n	80006e8 <LIS302DL_ReadACC+0x32>
  }
  
  switch(crtl & LIS302DL_FULLSCALE_9_2) 
 800070e:	7bfb      	ldrb	r3, [r7, #15]
 8000710:	f003 0320 	and.w	r3, r3, #32
 8000714:	2b00      	cmp	r3, #0
 8000716:	d002      	beq.n	800071e <LIS302DL_ReadACC+0x68>
 8000718:	2b20      	cmp	r3, #32
 800071a:	d003      	beq.n	8000724 <LIS302DL_ReadACC+0x6e>
  case LIS302DL_FULLSCALE_9_2:
    sensitivity = LIS302DL_SENSITIVITY_9_2G;
    break;
    
  default:
    break;
 800071c:	e005      	b.n	800072a <LIS302DL_ReadACC+0x74>
    sensitivity = LIS302DL_SENSITIVITY_2_3G;
 800071e:	2312      	movs	r3, #18
 8000720:	77fb      	strb	r3, [r7, #31]
    break;
 8000722:	e002      	b.n	800072a <LIS302DL_ReadACC+0x74>
    sensitivity = LIS302DL_SENSITIVITY_9_2G;
 8000724:	2348      	movs	r3, #72	; 0x48
 8000726:	77fb      	strb	r3, [r7, #31]
    break;
 8000728:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 800072a:	2300      	movs	r3, #0
 800072c:	77bb      	strb	r3, [r7, #30]
 800072e:	e014      	b.n	800075a <LIS302DL_ReadACC+0xa4>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8000730:	7fbb      	ldrb	r3, [r7, #30]
 8000732:	005b      	lsls	r3, r3, #1
 8000734:	3320      	adds	r3, #32
 8000736:	443b      	add	r3, r7
 8000738:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800073c:	b29a      	uxth	r2, r3
 800073e:	7ffb      	ldrb	r3, [r7, #31]
 8000740:	b29b      	uxth	r3, r3
 8000742:	fb12 f303 	smulbb	r3, r2, r3
 8000746:	b299      	uxth	r1, r3
 8000748:	7fbb      	ldrb	r3, [r7, #30]
 800074a:	005b      	lsls	r3, r3, #1
 800074c:	687a      	ldr	r2, [r7, #4]
 800074e:	4413      	add	r3, r2
 8000750:	b20a      	sxth	r2, r1
 8000752:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8000754:	7fbb      	ldrb	r3, [r7, #30]
 8000756:	3301      	adds	r3, #1
 8000758:	77bb      	strb	r3, [r7, #30]
 800075a:	7fbb      	ldrb	r3, [r7, #30]
 800075c:	2b02      	cmp	r3, #2
 800075e:	d9e7      	bls.n	8000730 <LIS302DL_ReadACC+0x7a>
  }
}
 8000760:	bf00      	nop
 8000762:	bf00      	nop
 8000764:	3720      	adds	r7, #32
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <LIS3DSH_Init>:
  * @brief  Set LIS3DSH Initialization.
  * @param  InitStruct: contains mask of different init parameters
  * @retval None
  */
void LIS3DSH_Init(uint16_t InitStruct)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	b084      	sub	sp, #16
 800076e:	af00      	add	r7, sp, #0
 8000770:	4603      	mov	r3, r0
 8000772:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000774:	2300      	movs	r3, #0
 8000776:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  ACCELERO_IO_Init();
 8000778:	f000 fd32 	bl	80011e0 <ACCELERO_IO_Init>

  /* Configure MEMS: power mode(ODR) and axes enable */
  ctrl = (uint8_t) (InitStruct);
 800077c:	88fb      	ldrh	r3, [r7, #6]
 800077e:	b2db      	uxtb	r3, r3
 8000780:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG4 register */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG4_ADDR, 1);
 8000782:	f107 030f 	add.w	r3, r7, #15
 8000786:	2201      	movs	r2, #1
 8000788:	2120      	movs	r1, #32
 800078a:	4618      	mov	r0, r3
 800078c:	f000 fd86 	bl	800129c <ACCELERO_IO_Write>
  
  /* Configure MEMS: full scale and self test */
  ctrl = (uint8_t) (InitStruct >> 8);
 8000790:	88fb      	ldrh	r3, [r7, #6]
 8000792:	0a1b      	lsrs	r3, r3, #8
 8000794:	b29b      	uxth	r3, r3
 8000796:	b2db      	uxtb	r3, r3
 8000798:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG5_ADDR, 1);
 800079a:	f107 030f 	add.w	r3, r7, #15
 800079e:	2201      	movs	r2, #1
 80007a0:	2124      	movs	r1, #36	; 0x24
 80007a2:	4618      	mov	r0, r3
 80007a4:	f000 fd7a 	bl	800129c <ACCELERO_IO_Write>
}
 80007a8:	bf00      	nop
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <LIS3DSH_DeInit>:
  * @brief  LIS3DSH De-Initialization.
  * @param  None
  * @retval None.
  */
void LIS3DSH_DeInit(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr

080007be <LIS3DSH_ReadID>:
  * @brief  Read LIS3DSH device ID.
  * @param  None
  * @retval The Device ID (two bytes).
  */
uint8_t LIS3DSH_ReadID(void)
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	b082      	sub	sp, #8
 80007c2:	af00      	add	r7, sp, #0
  uint8_t tmp = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	71fb      	strb	r3, [r7, #7]

  /* Configure the low level interface */
  ACCELERO_IO_Init();
 80007c8:	f000 fd0a 	bl	80011e0 <ACCELERO_IO_Init>

  /* Read WHO_AM_I register */
  ACCELERO_IO_Read(&tmp, LIS3DSH_WHO_AM_I_ADDR, 1);
 80007cc:	1dfb      	adds	r3, r7, #7
 80007ce:	2201      	movs	r2, #1
 80007d0:	210f      	movs	r1, #15
 80007d2:	4618      	mov	r0, r3
 80007d4:	f000 fd94 	bl	8001300 <ACCELERO_IO_Read>
  
  /* Return the ID */
  return (uint16_t)tmp;
 80007d8:	79fb      	ldrb	r3, [r7, #7]
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <LIS3DSH_InterruptConfig>:
  * @param  LIS3DSH_InterruptConfig_TypeDef: pointer to a LIS3DSH_InterruptConfig_TypeDef 
  *         structure that contains the configuration setting for the LIS3DSH Interrupt.
  * @retval None
  */
void LIS3DSH_InterruptConfig(LIS3DSH_InterruptConfigTypeDef *LIS3DSH_IntConfigStruct)
{
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b084      	sub	sp, #16
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	6078      	str	r0, [r7, #4]
  uint8_t ctrl = 0x00;
 80007ea:	2300      	movs	r3, #0
 80007ec:	73fb      	strb	r3, [r7, #15]
  
  /* Configure Interrupt Selection , Request and Signal */                   
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->Interrupt_Selection_Enable | \
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	785a      	ldrb	r2, [r3, #1]
                   LIS3DSH_IntConfigStruct->Interrupt_Request | \
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	781b      	ldrb	r3, [r3, #0]
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->Interrupt_Selection_Enable | \
 80007f6:	4313      	orrs	r3, r2
 80007f8:	b2da      	uxtb	r2, r3
                   LIS3DSH_IntConfigStruct->Interrupt_Signal);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	789b      	ldrb	r3, [r3, #2]
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->Interrupt_Selection_Enable | \
 80007fe:	4313      	orrs	r3, r2
 8000800:	b2db      	uxtb	r3, r3
 8000802:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG3_ADDR, 1);
 8000804:	f107 030f 	add.w	r3, r7, #15
 8000808:	2201      	movs	r2, #1
 800080a:	2123      	movs	r1, #35	; 0x23
 800080c:	4618      	mov	r0, r3
 800080e:	f000 fd45 	bl	800129c <ACCELERO_IO_Write>
  
  /* Configure State Machine 1 */                   
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine1_Enable | \
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	78da      	ldrb	r2, [r3, #3]
                   LIS3DSH_IntConfigStruct->State_Machine1_Interrupt);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	791b      	ldrb	r3, [r3, #4]
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine1_Enable | \
 800081a:	4313      	orrs	r3, r2
 800081c:	b2db      	uxtb	r3, r3
 800081e:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG1 register */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG1_ADDR, 1);
 8000820:	f107 030f 	add.w	r3, r7, #15
 8000824:	2201      	movs	r2, #1
 8000826:	2121      	movs	r1, #33	; 0x21
 8000828:	4618      	mov	r0, r3
 800082a:	f000 fd37 	bl	800129c <ACCELERO_IO_Write>
  
  /* Configure State Machine 2 */                   
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine2_Enable | \
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	795a      	ldrb	r2, [r3, #5]
                   LIS3DSH_IntConfigStruct->State_Machine2_Interrupt);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	799b      	ldrb	r3, [r3, #6]
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine2_Enable | \
 8000836:	4313      	orrs	r3, r2
 8000838:	b2db      	uxtb	r3, r3
 800083a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG2_ADDR, 1);
 800083c:	f107 030f 	add.w	r3, r7, #15
 8000840:	2201      	movs	r2, #1
 8000842:	2122      	movs	r1, #34	; 0x22
 8000844:	4618      	mov	r0, r3
 8000846:	f000 fd29 	bl	800129c <ACCELERO_IO_Write>
}
 800084a:	bf00      	nop
 800084c:	3710      	adds	r7, #16
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <LIS3DSH_Click_IntConfig>:
  * @brief  Set LIS3DSH for click detection
  * @param  None
  * @retval None
  */
void LIS3DSH_Click_IntConfig(void)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	b082      	sub	sp, #8
 8000856:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8000858:	2300      	movs	r3, #0
 800085a:	71fb      	strb	r3, [r7, #7]
  LIS3DSH_InterruptConfigTypeDef   LIS3DSH_InterruptStruct; 

  ACCELERO_IO_ITConfig();
 800085c:	f000 fcee 	bl	800123c <ACCELERO_IO_ITConfig>

  /* Set LIS3DSH Interrupt configuration */
  LIS3DSH_InterruptStruct.Interrupt_Selection_Enable = LIS3DSH_INTERRUPT_2_ENABLE;
 8000860:	2300      	movs	r3, #0
 8000862:	707b      	strb	r3, [r7, #1]
  LIS3DSH_InterruptStruct.Interrupt_Request = LIS3DSH_INTERRUPT_REQUEST_LATCHED;
 8000864:	2300      	movs	r3, #0
 8000866:	703b      	strb	r3, [r7, #0]
  LIS3DSH_InterruptStruct.Interrupt_Signal = LIS3DSH_INTERRUPT_SIGNAL_HIGH;
 8000868:	2340      	movs	r3, #64	; 0x40
 800086a:	70bb      	strb	r3, [r7, #2]
  LIS3DSH_InterruptStruct.State_Machine1_Enable = LIS3DSH_SM_DISABLE;
 800086c:	2300      	movs	r3, #0
 800086e:	70fb      	strb	r3, [r7, #3]
  LIS3DSH_InterruptStruct.State_Machine2_Enable = LIS3DSH_SM_ENABLE;
 8000870:	2301      	movs	r3, #1
 8000872:	717b      	strb	r3, [r7, #5]
  LIS3DSH_InterruptStruct.State_Machine2_Interrupt = LIS3DSH_SM_INT1;
 8000874:	2300      	movs	r3, #0
 8000876:	71bb      	strb	r3, [r7, #6]
  LIS3DSH_InterruptConfig(&LIS3DSH_InterruptStruct);
 8000878:	463b      	mov	r3, r7
 800087a:	4618      	mov	r0, r3
 800087c:	f7ff ffb1 	bl	80007e2 <LIS3DSH_InterruptConfig>
    
  /* Set LIS3DSH State Machines configuration */
  ctrl=0x03; 
 8000880:	2303      	movs	r3, #3
 8000882:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_TIM2_1_L_ADDR,1);
 8000884:	1dfb      	adds	r3, r7, #7
 8000886:	2201      	movs	r2, #1
 8000888:	2152      	movs	r1, #82	; 0x52
 800088a:	4618      	mov	r0, r3
 800088c:	f000 fd06 	bl	800129c <ACCELERO_IO_Write>
  ctrl=0xC8; 
 8000890:	23c8      	movs	r3, #200	; 0xc8
 8000892:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_TIM1_1_L_ADDR,1);
 8000894:	1dfb      	adds	r3, r7, #7
 8000896:	2201      	movs	r2, #1
 8000898:	2154      	movs	r1, #84	; 0x54
 800089a:	4618      	mov	r0, r3
 800089c:	f000 fcfe 	bl	800129c <ACCELERO_IO_Write>
  ctrl=0x45; 
 80008a0:	2345      	movs	r3, #69	; 0x45
 80008a2:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_THRS2_1_ADDR,1);
 80008a4:	1dfb      	adds	r3, r7, #7
 80008a6:	2201      	movs	r2, #1
 80008a8:	2156      	movs	r1, #86	; 0x56
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 fcf6 	bl	800129c <ACCELERO_IO_Write>
  ctrl=0xFC; 
 80008b0:	23fc      	movs	r3, #252	; 0xfc
 80008b2:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_MASK1_A_ADDR,1);
 80008b4:	1dfb      	adds	r3, r7, #7
 80008b6:	2201      	movs	r2, #1
 80008b8:	215a      	movs	r1, #90	; 0x5a
 80008ba:	4618      	mov	r0, r3
 80008bc:	f000 fcee 	bl	800129c <ACCELERO_IO_Write>
  ctrl=0xA1; 
 80008c0:	23a1      	movs	r3, #161	; 0xa1
 80008c2:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_SETT1_ADDR,1);
 80008c4:	1dfb      	adds	r3, r7, #7
 80008c6:	2201      	movs	r2, #1
 80008c8:	215b      	movs	r1, #91	; 0x5b
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 fce6 	bl	800129c <ACCELERO_IO_Write>
  ctrl=0x01; 
 80008d0:	2301      	movs	r3, #1
 80008d2:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_PR1_ADDR,1);
 80008d4:	1dfb      	adds	r3, r7, #7
 80008d6:	2201      	movs	r2, #1
 80008d8:	215c      	movs	r1, #92	; 0x5c
 80008da:	4618      	mov	r0, r3
 80008dc:	f000 fcde 	bl	800129c <ACCELERO_IO_Write>

  ACCELERO_IO_Write(&ctrl, LIS3DSH_SETT2_ADDR,1);
 80008e0:	1dfb      	adds	r3, r7, #7
 80008e2:	2201      	movs	r2, #1
 80008e4:	217b      	movs	r1, #123	; 0x7b
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 fcd8 	bl	800129c <ACCELERO_IO_Write>
  
  /* Configure State Machine 2 to detect single click */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_1_ADDR,1);
 80008ec:	1dfb      	adds	r3, r7, #7
 80008ee:	2201      	movs	r2, #1
 80008f0:	2160      	movs	r1, #96	; 0x60
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 fcd2 	bl	800129c <ACCELERO_IO_Write>
  ctrl=0x06; 
 80008f8:	2306      	movs	r3, #6
 80008fa:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_2_ADDR,1);
 80008fc:	1dfb      	adds	r3, r7, #7
 80008fe:	2201      	movs	r2, #1
 8000900:	2161      	movs	r1, #97	; 0x61
 8000902:	4618      	mov	r0, r3
 8000904:	f000 fcca 	bl	800129c <ACCELERO_IO_Write>
  ctrl=0x28; 
 8000908:	2328      	movs	r3, #40	; 0x28
 800090a:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_3_ADDR,1);
 800090c:	1dfb      	adds	r3, r7, #7
 800090e:	2201      	movs	r2, #1
 8000910:	2162      	movs	r1, #98	; 0x62
 8000912:	4618      	mov	r0, r3
 8000914:	f000 fcc2 	bl	800129c <ACCELERO_IO_Write>
  ctrl=0x11; 
 8000918:	2311      	movs	r3, #17
 800091a:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_4_ADDR,1);
 800091c:	1dfb      	adds	r3, r7, #7
 800091e:	2201      	movs	r2, #1
 8000920:	2163      	movs	r1, #99	; 0x63
 8000922:	4618      	mov	r0, r3
 8000924:	f000 fcba 	bl	800129c <ACCELERO_IO_Write>
}
 8000928:	bf00      	nop
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <LIS3DSH_RebootCmd>:
  * @brief  Reboot memory content of LIS3DSH.
  * @param  None
  * @retval None
  */
void LIS3DSH_RebootCmd(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  /* Read CTRL_REG6 register */
  ACCELERO_IO_Read(&tmpreg, LIS3DSH_CTRL_REG6_ADDR, 1);
 8000936:	1dfb      	adds	r3, r7, #7
 8000938:	2201      	movs	r2, #1
 800093a:	2125      	movs	r1, #37	; 0x25
 800093c:	4618      	mov	r0, r3
 800093e:	f000 fcdf 	bl	8001300 <ACCELERO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LIS3DSH_BOOT_FORCED;
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000948:	b2db      	uxtb	r3, r3
 800094a:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG6 register */
  ACCELERO_IO_Write(&tmpreg, LIS3DSH_CTRL_REG6_ADDR, 1);
 800094c:	1dfb      	adds	r3, r7, #7
 800094e:	2201      	movs	r2, #1
 8000950:	2125      	movs	r1, #37	; 0x25
 8000952:	4618      	mov	r0, r3
 8000954:	f000 fca2 	bl	800129c <ACCELERO_IO_Write>
}
 8000958:	bf00      	nop
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}

08000960 <LIS3DSH_ReadACC>:
  *         ACC[mg]=SENSITIVITY* (out_h*256+out_l)/16 (12 bit representation).
  * @param  pointer on floating buffer.
  * @retval None
  */
void LIS3DSH_ReadACC(int16_t *pData)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b088      	sub	sp, #32
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  int8_t buffer[6];
  uint8_t crtl, i = 0x00;
 8000968:	2300      	movs	r3, #0
 800096a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 800096c:	4b64      	ldr	r3, [pc, #400]	; (8000b00 <LIS3DSH_ReadACC+0x1a0>)
 800096e:	61bb      	str	r3, [r7, #24]
  float valueinfloat = 0;
 8000970:	f04f 0300 	mov.w	r3, #0
 8000974:	617b      	str	r3, [r7, #20]
  
  ACCELERO_IO_Read(&crtl, LIS3DSH_CTRL_REG5_ADDR, 1);  
 8000976:	f107 030b 	add.w	r3, r7, #11
 800097a:	2201      	movs	r2, #1
 800097c:	2124      	movs	r1, #36	; 0x24
 800097e:	4618      	mov	r0, r3
 8000980:	f000 fcbe 	bl	8001300 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[0], LIS3DSH_OUT_X_L_ADDR, 1);
 8000984:	f107 030c 	add.w	r3, r7, #12
 8000988:	2201      	movs	r2, #1
 800098a:	2128      	movs	r1, #40	; 0x28
 800098c:	4618      	mov	r0, r3
 800098e:	f000 fcb7 	bl	8001300 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[1], LIS3DSH_OUT_X_H_ADDR, 1);
 8000992:	f107 030c 	add.w	r3, r7, #12
 8000996:	3301      	adds	r3, #1
 8000998:	2201      	movs	r2, #1
 800099a:	2129      	movs	r1, #41	; 0x29
 800099c:	4618      	mov	r0, r3
 800099e:	f000 fcaf 	bl	8001300 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[2], LIS3DSH_OUT_Y_L_ADDR, 1);
 80009a2:	f107 030c 	add.w	r3, r7, #12
 80009a6:	3302      	adds	r3, #2
 80009a8:	2201      	movs	r2, #1
 80009aa:	212a      	movs	r1, #42	; 0x2a
 80009ac:	4618      	mov	r0, r3
 80009ae:	f000 fca7 	bl	8001300 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[3], LIS3DSH_OUT_Y_H_ADDR, 1);
 80009b2:	f107 030c 	add.w	r3, r7, #12
 80009b6:	3303      	adds	r3, #3
 80009b8:	2201      	movs	r2, #1
 80009ba:	212b      	movs	r1, #43	; 0x2b
 80009bc:	4618      	mov	r0, r3
 80009be:	f000 fc9f 	bl	8001300 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[4], LIS3DSH_OUT_Z_L_ADDR, 1);
 80009c2:	f107 030c 	add.w	r3, r7, #12
 80009c6:	3304      	adds	r3, #4
 80009c8:	2201      	movs	r2, #1
 80009ca:	212c      	movs	r1, #44	; 0x2c
 80009cc:	4618      	mov	r0, r3
 80009ce:	f000 fc97 	bl	8001300 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[5], LIS3DSH_OUT_Z_H_ADDR, 1);
 80009d2:	f107 030c 	add.w	r3, r7, #12
 80009d6:	3305      	adds	r3, #5
 80009d8:	2201      	movs	r2, #1
 80009da:	212d      	movs	r1, #45	; 0x2d
 80009dc:	4618      	mov	r0, r3
 80009de:	f000 fc8f 	bl	8001300 <ACCELERO_IO_Read>
  
  switch(crtl & LIS3DSH__FULLSCALE_SELECTION) 
 80009e2:	7afb      	ldrb	r3, [r7, #11]
 80009e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80009e8:	2b20      	cmp	r3, #32
 80009ea:	d854      	bhi.n	8000a96 <LIS3DSH_ReadACC+0x136>
 80009ec:	a201      	add	r2, pc, #4	; (adr r2, 80009f4 <LIS3DSH_ReadACC+0x94>)
 80009ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009f2:	bf00      	nop
 80009f4:	08000a79 	.word	0x08000a79
 80009f8:	08000a97 	.word	0x08000a97
 80009fc:	08000a97 	.word	0x08000a97
 8000a00:	08000a97 	.word	0x08000a97
 8000a04:	08000a97 	.word	0x08000a97
 8000a08:	08000a97 	.word	0x08000a97
 8000a0c:	08000a97 	.word	0x08000a97
 8000a10:	08000a97 	.word	0x08000a97
 8000a14:	08000a7f 	.word	0x08000a7f
 8000a18:	08000a97 	.word	0x08000a97
 8000a1c:	08000a97 	.word	0x08000a97
 8000a20:	08000a97 	.word	0x08000a97
 8000a24:	08000a97 	.word	0x08000a97
 8000a28:	08000a97 	.word	0x08000a97
 8000a2c:	08000a97 	.word	0x08000a97
 8000a30:	08000a97 	.word	0x08000a97
 8000a34:	08000a85 	.word	0x08000a85
 8000a38:	08000a97 	.word	0x08000a97
 8000a3c:	08000a97 	.word	0x08000a97
 8000a40:	08000a97 	.word	0x08000a97
 8000a44:	08000a97 	.word	0x08000a97
 8000a48:	08000a97 	.word	0x08000a97
 8000a4c:	08000a97 	.word	0x08000a97
 8000a50:	08000a97 	.word	0x08000a97
 8000a54:	08000a8b 	.word	0x08000a8b
 8000a58:	08000a97 	.word	0x08000a97
 8000a5c:	08000a97 	.word	0x08000a97
 8000a60:	08000a97 	.word	0x08000a97
 8000a64:	08000a97 	.word	0x08000a97
 8000a68:	08000a97 	.word	0x08000a97
 8000a6c:	08000a97 	.word	0x08000a97
 8000a70:	08000a97 	.word	0x08000a97
 8000a74:	08000a91 	.word	0x08000a91
  {
    /* FS bit = 000 ==> Sensitivity typical value = 0.06milligals/digit */ 
  case LIS3DSH_FULLSCALE_2:
    sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 8000a78:	4b21      	ldr	r3, [pc, #132]	; (8000b00 <LIS3DSH_ReadACC+0x1a0>)
 8000a7a:	61bb      	str	r3, [r7, #24]
    break;
 8000a7c:	e00c      	b.n	8000a98 <LIS3DSH_ReadACC+0x138>
    
    /* FS bit = 001 ==> Sensitivity typical value = 0.12milligals/digit */ 
  case LIS3DSH_FULLSCALE_4:
    sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 8000a7e:	4b21      	ldr	r3, [pc, #132]	; (8000b04 <LIS3DSH_ReadACC+0x1a4>)
 8000a80:	61bb      	str	r3, [r7, #24]
    break;
 8000a82:	e009      	b.n	8000a98 <LIS3DSH_ReadACC+0x138>
    
    /* FS bit = 010 ==> Sensitivity typical value = 0.18milligals/digit */ 
  case LIS3DSH_FULLSCALE_6:
    sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 8000a84:	4b20      	ldr	r3, [pc, #128]	; (8000b08 <LIS3DSH_ReadACC+0x1a8>)
 8000a86:	61bb      	str	r3, [r7, #24]
    break;
 8000a88:	e006      	b.n	8000a98 <LIS3DSH_ReadACC+0x138>
    
    /* FS bit = 011 ==> Sensitivity typical value = 0.24milligals/digit */ 
  case LIS3DSH_FULLSCALE_8:
    sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 8000a8a:	4b20      	ldr	r3, [pc, #128]	; (8000b0c <LIS3DSH_ReadACC+0x1ac>)
 8000a8c:	61bb      	str	r3, [r7, #24]
    break;
 8000a8e:	e003      	b.n	8000a98 <LIS3DSH_ReadACC+0x138>
    
    /* FS bit = 100 ==> Sensitivity typical value = 0.73milligals/digit */ 
  case LIS3DSH_FULLSCALE_16:
    sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 8000a90:	4b1f      	ldr	r3, [pc, #124]	; (8000b10 <LIS3DSH_ReadACC+0x1b0>)
 8000a92:	61bb      	str	r3, [r7, #24]
    break;
 8000a94:	e000      	b.n	8000a98 <LIS3DSH_ReadACC+0x138>
    
  default:
    break;
 8000a96:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8000a98:	2300      	movs	r3, #0
 8000a9a:	77fb      	strb	r3, [r7, #31]
 8000a9c:	e027      	b.n	8000aee <LIS3DSH_ReadACC+0x18e>
  {
    valueinfloat = ((buffer[2*i+1] << 8) + buffer[2*i]) * sensitivity;
 8000a9e:	7ffb      	ldrb	r3, [r7, #31]
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	3320      	adds	r3, #32
 8000aa6:	443b      	add	r3, r7
 8000aa8:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000aac:	021b      	lsls	r3, r3, #8
 8000aae:	7ffa      	ldrb	r2, [r7, #31]
 8000ab0:	0052      	lsls	r2, r2, #1
 8000ab2:	3220      	adds	r2, #32
 8000ab4:	443a      	add	r2, r7
 8000ab6:	f912 2c14 	ldrsb.w	r2, [r2, #-20]
 8000aba:	4413      	add	r3, r2
 8000abc:	ee07 3a90 	vmov	s15, r3
 8000ac0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ac4:	ed97 7a06 	vldr	s14, [r7, #24]
 8000ac8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000acc:	edc7 7a05 	vstr	s15, [r7, #20]
    pData[i] = (int16_t)valueinfloat;
 8000ad0:	7ffb      	ldrb	r3, [r7, #31]
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	687a      	ldr	r2, [r7, #4]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	edd7 7a05 	vldr	s15, [r7, #20]
 8000adc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ae0:	ee17 2a90 	vmov	r2, s15
 8000ae4:	b212      	sxth	r2, r2
 8000ae6:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8000ae8:	7ffb      	ldrb	r3, [r7, #31]
 8000aea:	3301      	adds	r3, #1
 8000aec:	77fb      	strb	r3, [r7, #31]
 8000aee:	7ffb      	ldrb	r3, [r7, #31]
 8000af0:	2b02      	cmp	r3, #2
 8000af2:	d9d4      	bls.n	8000a9e <LIS3DSH_ReadACC+0x13e>
  }
}
 8000af4:	bf00      	nop
 8000af6:	bf00      	nop
 8000af8:	3720      	adds	r7, #32
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	3d75c28f 	.word	0x3d75c28f
 8000b04:	3df5c28f 	.word	0x3df5c28f
 8000b08:	3e3851ec 	.word	0x3e3851ec
 8000b0c:	3e75c28f 	.word	0x3e75c28f
 8000b10:	3f3ae148 	.word	0x3f3ae148

08000b14 <ACCELRO_Calibrate>:
PCD_HandleTypeDef hpcd_USB_OTG_HS;

/* USER CODE BEGIN PV */
int16_t pDataXYZ[3];
void ACCELRO_Calibrate (void)
{ HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b20:	482d      	ldr	r0, [pc, #180]	; (8000bd8 <ACCELRO_Calibrate+0xc4>)
 8000b22:	f001 fa4b 	bl	8001fbc <HAL_GPIO_WritePin>
	for (int i=0; i<50; i++)
 8000b26:	2300      	movs	r3, #0
 8000b28:	607b      	str	r3, [r7, #4]
 8000b2a:	e047      	b.n	8000bbc <ACCELRO_Calibrate+0xa8>
	{
		BSP_ACCELERO_GetXYZ(pDataXYZ);
 8000b2c:	482b      	ldr	r0, [pc, #172]	; (8000bdc <ACCELRO_Calibrate+0xc8>)
 8000b2e:	f000 fcad 	bl	800148c <BSP_ACCELERO_GetXYZ>
		x =pDataXYZ[0] ;
 8000b32:	4b2a      	ldr	r3, [pc, #168]	; (8000bdc <ACCELRO_Calibrate+0xc8>)
 8000b34:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000b38:	4b29      	ldr	r3, [pc, #164]	; (8000be0 <ACCELRO_Calibrate+0xcc>)
 8000b3a:	801a      	strh	r2, [r3, #0]
		y = pDataXYZ[1];
 8000b3c:	4b27      	ldr	r3, [pc, #156]	; (8000bdc <ACCELRO_Calibrate+0xc8>)
 8000b3e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000b42:	4b28      	ldr	r3, [pc, #160]	; (8000be4 <ACCELRO_Calibrate+0xd0>)
 8000b44:	801a      	strh	r2, [r3, #0]
		z = pDataXYZ[2];
 8000b46:	4b25      	ldr	r3, [pc, #148]	; (8000bdc <ACCELRO_Calibrate+0xc8>)
 8000b48:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000b4c:	4b26      	ldr	r3, [pc, #152]	; (8000be8 <ACCELRO_Calibrate+0xd4>)
 8000b4e:	801a      	strh	r2, [r3, #0]
		min_xval = MIN(min_xval, x);
 8000b50:	4b23      	ldr	r3, [pc, #140]	; (8000be0 <ACCELRO_Calibrate+0xcc>)
 8000b52:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000b56:	4b25      	ldr	r3, [pc, #148]	; (8000bec <ACCELRO_Calibrate+0xd8>)
 8000b58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	bfa8      	it	ge
 8000b60:	4613      	movge	r3, r2
 8000b62:	b21a      	sxth	r2, r3
 8000b64:	4b21      	ldr	r3, [pc, #132]	; (8000bec <ACCELRO_Calibrate+0xd8>)
 8000b66:	801a      	strh	r2, [r3, #0]
		max_xval = MAX(max_xval, x);
 8000b68:	4b1d      	ldr	r3, [pc, #116]	; (8000be0 <ACCELRO_Calibrate+0xcc>)
 8000b6a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000b6e:	4b20      	ldr	r3, [pc, #128]	; (8000bf0 <ACCELRO_Calibrate+0xdc>)
 8000b70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b74:	4293      	cmp	r3, r2
 8000b76:	bfb8      	it	lt
 8000b78:	4613      	movlt	r3, r2
 8000b7a:	b21a      	sxth	r2, r3
 8000b7c:	4b1c      	ldr	r3, [pc, #112]	; (8000bf0 <ACCELRO_Calibrate+0xdc>)
 8000b7e:	801a      	strh	r2, [r3, #0]
		min_yval = MIN(min_yval, y);
 8000b80:	4b18      	ldr	r3, [pc, #96]	; (8000be4 <ACCELRO_Calibrate+0xd0>)
 8000b82:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000b86:	4b1b      	ldr	r3, [pc, #108]	; (8000bf4 <ACCELRO_Calibrate+0xe0>)
 8000b88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	bfa8      	it	ge
 8000b90:	4613      	movge	r3, r2
 8000b92:	b21a      	sxth	r2, r3
 8000b94:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <ACCELRO_Calibrate+0xe0>)
 8000b96:	801a      	strh	r2, [r3, #0]
		max_yval = MAX(max_yval, y);
 8000b98:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <ACCELRO_Calibrate+0xd0>)
 8000b9a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000b9e:	4b16      	ldr	r3, [pc, #88]	; (8000bf8 <ACCELRO_Calibrate+0xe4>)
 8000ba0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	bfb8      	it	lt
 8000ba8:	4613      	movlt	r3, r2
 8000baa:	b21a      	sxth	r2, r3
 8000bac:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <ACCELRO_Calibrate+0xe4>)
 8000bae:	801a      	strh	r2, [r3, #0]
		HAL_Delay (100);
 8000bb0:	2064      	movs	r0, #100	; 0x64
 8000bb2:	f000 fe35 	bl	8001820 <HAL_Delay>
	for (int i=0; i<50; i++)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2b31      	cmp	r3, #49	; 0x31
 8000bc0:	ddb4      	ble.n	8000b2c <ACCELRO_Calibrate+0x18>
	}

	/* Turn On the LED to show the completion of calibration */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bc8:	4803      	ldr	r0, [pc, #12]	; (8000bd8 <ACCELRO_Calibrate+0xc4>)
 8000bca:	f001 f9f7 	bl	8001fbc <HAL_GPIO_WritePin>
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40020c00 	.word	0x40020c00
 8000bdc:	20000720 	.word	0x20000720
 8000be0:	200001b0 	.word	0x200001b0
 8000be4:	200001b2 	.word	0x200001b2
 8000be8:	200001b4 	.word	0x200001b4
 8000bec:	20000068 	.word	0x20000068
 8000bf0:	2000006a 	.word	0x2000006a
 8000bf4:	2000006c 	.word	0x2000006c
 8000bf8:	2000006e 	.word	0x2000006e

08000bfc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0)
 8000c06:	88fb      	ldrh	r3, [r7, #6]
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d102      	bne.n	8000c12 <HAL_GPIO_EXTI_Callback+0x16>
	{
		button_flag = 1;
 8000c0c:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <HAL_GPIO_EXTI_Callback+0x24>)
 8000c0e:	2201      	movs	r2, #1
 8000c10:	701a      	strb	r2, [r3, #0]
	}
}
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	200001ba 	.word	0x200001ba

08000c24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c28:	f000 fd88 	bl	800173c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c2c:	f000 f8ea 	bl	8000e04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c30:	f000 f9ba 	bl	8000fa8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000c34:	f000 f950 	bl	8000ed8 <MX_SPI1_Init>
  MX_USB_OTG_HS_PCD_Init();
 8000c38:	f000 f984 	bl	8000f44 <MX_USB_OTG_HS_PCD_Init>
  MX_USB_DEVICE_Init();
 8000c3c:	f006 fd70 	bl	8007720 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  BSP_ACCELERO_Init();
 8000c40:	f000 fb98 	bl	8001374 <BSP_ACCELERO_Init>
  ACCELRO_Calibrate ();
 8000c44:	f7ff ff66 	bl	8000b14 <ACCELRO_Calibrate>
  while (1)
   {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BSP_ACCELERO_GetXYZ(pDataXYZ);
 8000c48:	4860      	ldr	r0, [pc, #384]	; (8000dcc <main+0x1a8>)
 8000c4a:	f000 fc1f 	bl	800148c <BSP_ACCELERO_GetXYZ>
	  		x =pDataXYZ[0] ;
 8000c4e:	4b5f      	ldr	r3, [pc, #380]	; (8000dcc <main+0x1a8>)
 8000c50:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000c54:	4b5e      	ldr	r3, [pc, #376]	; (8000dd0 <main+0x1ac>)
 8000c56:	801a      	strh	r2, [r3, #0]
	  		y = pDataXYZ[1];
 8000c58:	4b5c      	ldr	r3, [pc, #368]	; (8000dcc <main+0x1a8>)
 8000c5a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000c5e:	4b5d      	ldr	r3, [pc, #372]	; (8000dd4 <main+0x1b0>)
 8000c60:	801a      	strh	r2, [r3, #0]
	  		z = pDataXYZ[2];
 8000c62:	4b5a      	ldr	r3, [pc, #360]	; (8000dcc <main+0x1a8>)
 8000c64:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000c68:	4b5b      	ldr	r3, [pc, #364]	; (8000dd8 <main+0x1b4>)
 8000c6a:	801a      	strh	r2, [r3, #0]

	  	  if (x < min_xval) newxval = x - min_xval;
 8000c6c:	4b58      	ldr	r3, [pc, #352]	; (8000dd0 <main+0x1ac>)
 8000c6e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000c72:	4b5a      	ldr	r3, [pc, #360]	; (8000ddc <main+0x1b8>)
 8000c74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	da0c      	bge.n	8000c96 <main+0x72>
 8000c7c:	4b54      	ldr	r3, [pc, #336]	; (8000dd0 <main+0x1ac>)
 8000c7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c82:	b29a      	uxth	r2, r3
 8000c84:	4b55      	ldr	r3, [pc, #340]	; (8000ddc <main+0x1b8>)
 8000c86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	b21a      	sxth	r2, r3
 8000c92:	4b53      	ldr	r3, [pc, #332]	; (8000de0 <main+0x1bc>)
 8000c94:	801a      	strh	r2, [r3, #0]
	  	  if (x > max_xval) newxval = x - max_xval;
 8000c96:	4b4e      	ldr	r3, [pc, #312]	; (8000dd0 <main+0x1ac>)
 8000c98:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000c9c:	4b51      	ldr	r3, [pc, #324]	; (8000de4 <main+0x1c0>)
 8000c9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	dd0c      	ble.n	8000cc0 <main+0x9c>
 8000ca6:	4b4a      	ldr	r3, [pc, #296]	; (8000dd0 <main+0x1ac>)
 8000ca8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cac:	b29a      	uxth	r2, r3
 8000cae:	4b4d      	ldr	r3, [pc, #308]	; (8000de4 <main+0x1c0>)
 8000cb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	1ad3      	subs	r3, r2, r3
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	b21a      	sxth	r2, r3
 8000cbc:	4b48      	ldr	r3, [pc, #288]	; (8000de0 <main+0x1bc>)
 8000cbe:	801a      	strh	r2, [r3, #0]
	  	  if (y < min_yval) newyval = y - min_yval;
 8000cc0:	4b44      	ldr	r3, [pc, #272]	; (8000dd4 <main+0x1b0>)
 8000cc2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000cc6:	4b48      	ldr	r3, [pc, #288]	; (8000de8 <main+0x1c4>)
 8000cc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	da0c      	bge.n	8000cea <main+0xc6>
 8000cd0:	4b40      	ldr	r3, [pc, #256]	; (8000dd4 <main+0x1b0>)
 8000cd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cd6:	b29a      	uxth	r2, r3
 8000cd8:	4b43      	ldr	r3, [pc, #268]	; (8000de8 <main+0x1c4>)
 8000cda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	b21a      	sxth	r2, r3
 8000ce6:	4b41      	ldr	r3, [pc, #260]	; (8000dec <main+0x1c8>)
 8000ce8:	801a      	strh	r2, [r3, #0]
	  	  if (y > max_yval) newyval = y - max_yval;
 8000cea:	4b3a      	ldr	r3, [pc, #232]	; (8000dd4 <main+0x1b0>)
 8000cec:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000cf0:	4b3f      	ldr	r3, [pc, #252]	; (8000df0 <main+0x1cc>)
 8000cf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	dd0c      	ble.n	8000d14 <main+0xf0>
 8000cfa:	4b36      	ldr	r3, [pc, #216]	; (8000dd4 <main+0x1b0>)
 8000cfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d00:	b29a      	uxth	r2, r3
 8000d02:	4b3b      	ldr	r3, [pc, #236]	; (8000df0 <main+0x1cc>)
 8000d04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d08:	b29b      	uxth	r3, r3
 8000d0a:	1ad3      	subs	r3, r2, r3
 8000d0c:	b29b      	uxth	r3, r3
 8000d0e:	b21a      	sxth	r2, r3
 8000d10:	4b36      	ldr	r3, [pc, #216]	; (8000dec <main+0x1c8>)
 8000d12:	801a      	strh	r2, [r3, #0]

	  	  if ((newxval > 20) || (newxval < -20))
 8000d14:	4b32      	ldr	r3, [pc, #200]	; (8000de0 <main+0x1bc>)
 8000d16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d1a:	2b14      	cmp	r3, #20
 8000d1c:	dc05      	bgt.n	8000d2a <main+0x106>
 8000d1e:	4b30      	ldr	r3, [pc, #192]	; (8000de0 <main+0x1bc>)
 8000d20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d24:	f113 0f14 	cmn.w	r3, #20
 8000d28:	da0d      	bge.n	8000d46 <main+0x122>
	  	  {
	  		  mousehid.mouse_y = newxval/12;
 8000d2a:	4b2d      	ldr	r3, [pc, #180]	; (8000de0 <main+0x1bc>)
 8000d2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d30:	4a30      	ldr	r2, [pc, #192]	; (8000df4 <main+0x1d0>)
 8000d32:	fb82 1203 	smull	r1, r2, r2, r3
 8000d36:	1052      	asrs	r2, r2, #1
 8000d38:	17db      	asrs	r3, r3, #31
 8000d3a:	1ad3      	subs	r3, r2, r3
 8000d3c:	b21b      	sxth	r3, r3
 8000d3e:	b25a      	sxtb	r2, r3
 8000d40:	4b2d      	ldr	r3, [pc, #180]	; (8000df8 <main+0x1d4>)
 8000d42:	709a      	strb	r2, [r3, #2]
 8000d44:	e002      	b.n	8000d4c <main+0x128>
	  	  }

	  	  else mousehid.mouse_y = 0;
 8000d46:	4b2c      	ldr	r3, [pc, #176]	; (8000df8 <main+0x1d4>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	709a      	strb	r2, [r3, #2]

	  	  if ((newyval > 20) || (newyval < -20))
 8000d4c:	4b27      	ldr	r3, [pc, #156]	; (8000dec <main+0x1c8>)
 8000d4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d52:	2b14      	cmp	r3, #20
 8000d54:	dc05      	bgt.n	8000d62 <main+0x13e>
 8000d56:	4b25      	ldr	r3, [pc, #148]	; (8000dec <main+0x1c8>)
 8000d58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d5c:	f113 0f14 	cmn.w	r3, #20
 8000d60:	da0d      	bge.n	8000d7e <main+0x15a>
	  	  {
	  		  mousehid.mouse_x = newyval/12;
 8000d62:	4b22      	ldr	r3, [pc, #136]	; (8000dec <main+0x1c8>)
 8000d64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d68:	4a22      	ldr	r2, [pc, #136]	; (8000df4 <main+0x1d0>)
 8000d6a:	fb82 1203 	smull	r1, r2, r2, r3
 8000d6e:	1052      	asrs	r2, r2, #1
 8000d70:	17db      	asrs	r3, r3, #31
 8000d72:	1ad3      	subs	r3, r2, r3
 8000d74:	b21b      	sxth	r3, r3
 8000d76:	b25a      	sxtb	r2, r3
 8000d78:	4b1f      	ldr	r3, [pc, #124]	; (8000df8 <main+0x1d4>)
 8000d7a:	705a      	strb	r2, [r3, #1]
 8000d7c:	e002      	b.n	8000d84 <main+0x160>
	  	  }

	  	  else mousehid.mouse_x = 0;
 8000d7e:	4b1e      	ldr	r3, [pc, #120]	; (8000df8 <main+0x1d4>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	705a      	strb	r2, [r3, #1]


 	  if (button_flag == 1)
 8000d84:	4b1d      	ldr	r3, [pc, #116]	; (8000dfc <main+0x1d8>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d115      	bne.n	8000db8 <main+0x194>
 	  {
 		  mousehid.button = 1;  // left click =1, right click =2
 8000d8c:	4b1a      	ldr	r3, [pc, #104]	; (8000df8 <main+0x1d4>)
 8000d8e:	2201      	movs	r2, #1
 8000d90:	701a      	strb	r2, [r3, #0]
 		  USBD_HID_SendReport(&hUsbDeviceFS, &mousehid, sizeof (mousehid));
 8000d92:	2204      	movs	r2, #4
 8000d94:	4918      	ldr	r1, [pc, #96]	; (8000df8 <main+0x1d4>)
 8000d96:	481a      	ldr	r0, [pc, #104]	; (8000e00 <main+0x1dc>)
 8000d98:	f005 f948 	bl	800602c <USBD_HID_SendReport>
 		  HAL_Delay(50);
 8000d9c:	2032      	movs	r0, #50	; 0x32
 8000d9e:	f000 fd3f 	bl	8001820 <HAL_Delay>
 		  mousehid.button = 0;  // left click =1, right click =2
 8000da2:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <main+0x1d4>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	701a      	strb	r2, [r3, #0]
 		  USBD_HID_SendReport(&hUsbDeviceFS, &mousehid, sizeof (mousehid));
 8000da8:	2204      	movs	r2, #4
 8000daa:	4913      	ldr	r1, [pc, #76]	; (8000df8 <main+0x1d4>)
 8000dac:	4814      	ldr	r0, [pc, #80]	; (8000e00 <main+0x1dc>)
 8000dae:	f005 f93d 	bl	800602c <USBD_HID_SendReport>
 		  button_flag = 0;
 8000db2:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <main+0x1d8>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	701a      	strb	r2, [r3, #0]
 	  }

 	  USBD_HID_SendReport(&hUsbDeviceFS, &mousehid, sizeof (mousehid));
 8000db8:	2204      	movs	r2, #4
 8000dba:	490f      	ldr	r1, [pc, #60]	; (8000df8 <main+0x1d4>)
 8000dbc:	4810      	ldr	r0, [pc, #64]	; (8000e00 <main+0x1dc>)
 8000dbe:	f005 f935 	bl	800602c <USBD_HID_SendReport>

 	  HAL_Delay(70);
 8000dc2:	2046      	movs	r0, #70	; 0x46
 8000dc4:	f000 fd2c 	bl	8001820 <HAL_Delay>
	  BSP_ACCELERO_GetXYZ(pDataXYZ);
 8000dc8:	e73e      	b.n	8000c48 <main+0x24>
 8000dca:	bf00      	nop
 8000dcc:	20000720 	.word	0x20000720
 8000dd0:	200001b0 	.word	0x200001b0
 8000dd4:	200001b2 	.word	0x200001b2
 8000dd8:	200001b4 	.word	0x200001b4
 8000ddc:	20000068 	.word	0x20000068
 8000de0:	200001b6 	.word	0x200001b6
 8000de4:	2000006a 	.word	0x2000006a
 8000de8:	2000006c 	.word	0x2000006c
 8000dec:	200001b8 	.word	0x200001b8
 8000df0:	2000006e 	.word	0x2000006e
 8000df4:	2aaaaaab 	.word	0x2aaaaaab
 8000df8:	200001ac 	.word	0x200001ac
 8000dfc:	200001ba 	.word	0x200001ba
 8000e00:	2000078c 	.word	0x2000078c

08000e04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b094      	sub	sp, #80	; 0x50
 8000e08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e0a:	f107 0320 	add.w	r3, r7, #32
 8000e0e:	2230      	movs	r2, #48	; 0x30
 8000e10:	2100      	movs	r1, #0
 8000e12:	4618      	mov	r0, r3
 8000e14:	f007 f90e 	bl	8008034 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e18:	f107 030c 	add.w	r3, r7, #12
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e28:	2300      	movs	r3, #0
 8000e2a:	60bb      	str	r3, [r7, #8]
 8000e2c:	4b28      	ldr	r3, [pc, #160]	; (8000ed0 <SystemClock_Config+0xcc>)
 8000e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e30:	4a27      	ldr	r2, [pc, #156]	; (8000ed0 <SystemClock_Config+0xcc>)
 8000e32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e36:	6413      	str	r3, [r2, #64]	; 0x40
 8000e38:	4b25      	ldr	r3, [pc, #148]	; (8000ed0 <SystemClock_Config+0xcc>)
 8000e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e40:	60bb      	str	r3, [r7, #8]
 8000e42:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e44:	2300      	movs	r3, #0
 8000e46:	607b      	str	r3, [r7, #4]
 8000e48:	4b22      	ldr	r3, [pc, #136]	; (8000ed4 <SystemClock_Config+0xd0>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a21      	ldr	r2, [pc, #132]	; (8000ed4 <SystemClock_Config+0xd0>)
 8000e4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e52:	6013      	str	r3, [r2, #0]
 8000e54:	4b1f      	ldr	r3, [pc, #124]	; (8000ed4 <SystemClock_Config+0xd0>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e5c:	607b      	str	r3, [r7, #4]
 8000e5e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e60:	2301      	movs	r3, #1
 8000e62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e68:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e6e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e72:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e74:	2304      	movs	r3, #4
 8000e76:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000e78:	2348      	movs	r3, #72	; 0x48
 8000e7a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000e80:	2303      	movs	r3, #3
 8000e82:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e84:	f107 0320 	add.w	r3, r7, #32
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f002 fb2f 	bl	80034ec <HAL_RCC_OscConfig>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e94:	f000 f900 	bl	8001098 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e98:	230f      	movs	r3, #15
 8000e9a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ea4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000eaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000eb0:	f107 030c 	add.w	r3, r7, #12
 8000eb4:	2102      	movs	r1, #2
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f002 fd90 	bl	80039dc <HAL_RCC_ClockConfig>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ec2:	f000 f8e9 	bl	8001098 <Error_Handler>
  }
}
 8000ec6:	bf00      	nop
 8000ec8:	3750      	adds	r7, #80	; 0x50
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40007000 	.word	0x40007000

08000ed8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000edc:	4b17      	ldr	r3, [pc, #92]	; (8000f3c <MX_SPI1_Init+0x64>)
 8000ede:	4a18      	ldr	r2, [pc, #96]	; (8000f40 <MX_SPI1_Init+0x68>)
 8000ee0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ee2:	4b16      	ldr	r3, [pc, #88]	; (8000f3c <MX_SPI1_Init+0x64>)
 8000ee4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ee8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000eea:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <MX_SPI1_Init+0x64>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ef0:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <MX_SPI1_Init+0x64>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ef6:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <MX_SPI1_Init+0x64>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000efc:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <MX_SPI1_Init+0x64>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f02:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <MX_SPI1_Init+0x64>)
 8000f04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f08:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f0a:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <MX_SPI1_Init+0x64>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f10:	4b0a      	ldr	r3, [pc, #40]	; (8000f3c <MX_SPI1_Init+0x64>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f16:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <MX_SPI1_Init+0x64>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f1c:	4b07      	ldr	r3, [pc, #28]	; (8000f3c <MX_SPI1_Init+0x64>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f22:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <MX_SPI1_Init+0x64>)
 8000f24:	220a      	movs	r2, #10
 8000f26:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f28:	4804      	ldr	r0, [pc, #16]	; (8000f3c <MX_SPI1_Init+0x64>)
 8000f2a:	f002 ff4f 	bl	8003dcc <HAL_SPI_Init>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f34:	f000 f8b0 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	200001bc 	.word	0x200001bc
 8000f40:	40013000 	.word	0x40013000

08000f44 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8000f48:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f4a:	4a16      	ldr	r2, [pc, #88]	; (8000fa4 <MX_USB_OTG_HS_PCD_Init+0x60>)
 8000f4c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 8000f4e:	4b14      	ldr	r3, [pc, #80]	; (8000fa0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f50:	2206      	movs	r2, #6
 8000f52:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8000f54:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f56:	2202      	movs	r2, #2
 8000f58:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8000f5a:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8000f60:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f62:	2202      	movs	r2, #2
 8000f64:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8000f66:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8000f72:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 8000f78:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8000f7e:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8000f8a:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f8c:	f001 f848 	bl	8002020 <HAL_PCD_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 8000f96:	f000 f87f 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000214 	.word	0x20000214
 8000fa4:	40040000 	.word	0x40040000

08000fa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08a      	sub	sp, #40	; 0x28
 8000fac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fae:	f107 0314 	add.w	r3, r7, #20
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
 8000fba:	60da      	str	r2, [r3, #12]
 8000fbc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
 8000fc2:	4b32      	ldr	r3, [pc, #200]	; (800108c <MX_GPIO_Init+0xe4>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a31      	ldr	r2, [pc, #196]	; (800108c <MX_GPIO_Init+0xe4>)
 8000fc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b2f      	ldr	r3, [pc, #188]	; (800108c <MX_GPIO_Init+0xe4>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	4b2b      	ldr	r3, [pc, #172]	; (800108c <MX_GPIO_Init+0xe4>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a2a      	ldr	r2, [pc, #168]	; (800108c <MX_GPIO_Init+0xe4>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b28      	ldr	r3, [pc, #160]	; (800108c <MX_GPIO_Init+0xe4>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60bb      	str	r3, [r7, #8]
 8000ffa:	4b24      	ldr	r3, [pc, #144]	; (800108c <MX_GPIO_Init+0xe4>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a23      	ldr	r2, [pc, #140]	; (800108c <MX_GPIO_Init+0xe4>)
 8001000:	f043 0302 	orr.w	r3, r3, #2
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
 8001006:	4b21      	ldr	r3, [pc, #132]	; (800108c <MX_GPIO_Init+0xe4>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	60bb      	str	r3, [r7, #8]
 8001010:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	607b      	str	r3, [r7, #4]
 8001016:	4b1d      	ldr	r3, [pc, #116]	; (800108c <MX_GPIO_Init+0xe4>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4a1c      	ldr	r2, [pc, #112]	; (800108c <MX_GPIO_Init+0xe4>)
 800101c:	f043 0308 	orr.w	r3, r3, #8
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
 8001022:	4b1a      	ldr	r3, [pc, #104]	; (800108c <MX_GPIO_Init+0xe4>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f003 0308 	and.w	r3, r3, #8
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800102e:	2200      	movs	r2, #0
 8001030:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001034:	4816      	ldr	r0, [pc, #88]	; (8001090 <MX_GPIO_Init+0xe8>)
 8001036:	f000 ffc1 	bl	8001fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800103a:	2301      	movs	r3, #1
 800103c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800103e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001042:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001044:	2302      	movs	r3, #2
 8001046:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	4619      	mov	r1, r3
 800104e:	4811      	ldr	r0, [pc, #68]	; (8001094 <MX_GPIO_Init+0xec>)
 8001050:	f000 fd1c 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001054:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001058:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105a:	2301      	movs	r3, #1
 800105c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001062:	2300      	movs	r3, #0
 8001064:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001066:	f107 0314 	add.w	r3, r7, #20
 800106a:	4619      	mov	r1, r3
 800106c:	4808      	ldr	r0, [pc, #32]	; (8001090 <MX_GPIO_Init+0xe8>)
 800106e:	f000 fd0d 	bl	8001a8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	2100      	movs	r1, #0
 8001076:	2006      	movs	r0, #6
 8001078:	f000 fcd1 	bl	8001a1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800107c:	2006      	movs	r0, #6
 800107e:	f000 fcea 	bl	8001a56 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001082:	bf00      	nop
 8001084:	3728      	adds	r7, #40	; 0x28
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40023800 	.word	0x40023800
 8001090:	40020c00 	.word	0x40020c00
 8001094:	40020000 	.word	0x40020000

08001098 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800109c:	b672      	cpsid	i
}
 800109e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010a0:	e7fe      	b.n	80010a0 <Error_Handler+0x8>
	...

080010a4 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80010a8:	4819      	ldr	r0, [pc, #100]	; (8001110 <SPIx_Init+0x6c>)
 80010aa:	f003 f8e2 	bl	8004272 <HAL_SPI_GetState>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d12a      	bne.n	800110a <SPIx_Init+0x66>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80010b4:	4b16      	ldr	r3, [pc, #88]	; (8001110 <SPIx_Init+0x6c>)
 80010b6:	4a17      	ldr	r2, [pc, #92]	; (8001114 <SPIx_Init+0x70>)
 80010b8:	601a      	str	r2, [r3, #0]
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80010ba:	4b15      	ldr	r3, [pc, #84]	; (8001110 <SPIx_Init+0x6c>)
 80010bc:	2218      	movs	r2, #24
 80010be:	61da      	str	r2, [r3, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
 80010c0:	4b13      	ldr	r3, [pc, #76]	; (8001110 <SPIx_Init+0x6c>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010c6:	4b12      	ldr	r3, [pc, #72]	; (8001110 <SPIx_Init+0x6c>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010cc:	4b10      	ldr	r3, [pc, #64]	; (8001110 <SPIx_Init+0x6c>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80010d2:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <SPIx_Init+0x6c>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial = 7;
 80010d8:	4b0d      	ldr	r3, [pc, #52]	; (8001110 <SPIx_Init+0x6c>)
 80010da:	2207      	movs	r2, #7
 80010dc:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 80010de:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <SPIx_Init+0x6c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010e4:	4b0a      	ldr	r3, [pc, #40]	; (8001110 <SPIx_Init+0x6c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 80010ea:	4b09      	ldr	r3, [pc, #36]	; (8001110 <SPIx_Init+0x6c>)
 80010ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010f0:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
 80010f2:	4b07      	ldr	r3, [pc, #28]	; (8001110 <SPIx_Init+0x6c>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 80010f8:	4b05      	ldr	r3, [pc, #20]	; (8001110 <SPIx_Init+0x6c>)
 80010fa:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010fe:	605a      	str	r2, [r3, #4]

    SPIx_MspInit();
 8001100:	f000 f836 	bl	8001170 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001104:	4802      	ldr	r0, [pc, #8]	; (8001110 <SPIx_Init+0x6c>)
 8001106:	f002 fe61 	bl	8003dcc <HAL_SPI_Init>
  }
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000728 	.word	0x20000728
 8001114:	40013000 	.word	0x40013000

08001118 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af02      	add	r7, sp, #8
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8001126:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <SPIx_WriteRead+0x38>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f107 020f 	add.w	r2, r7, #15
 800112e:	1df9      	adds	r1, r7, #7
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	2301      	movs	r3, #1
 8001134:	4807      	ldr	r0, [pc, #28]	; (8001154 <SPIx_WriteRead+0x3c>)
 8001136:	f002 fefa 	bl	8003f2e <HAL_SPI_TransmitReceive>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8001140:	f000 f80a 	bl	8001158 <SPIx_Error>
  }
  
  return receivedbyte;
 8001144:	7bfb      	ldrb	r3, [r7, #15]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000070 	.word	0x20000070
 8001154:	20000728 	.word	0x20000728

08001158 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication bus */
  HAL_SPI_DeInit(&SpiHandle);
 800115c:	4803      	ldr	r0, [pc, #12]	; (800116c <SPIx_Error+0x14>)
 800115e:	f002 febe 	bl	8003ede <HAL_SPI_DeInit>
  
  /* Re-Initialize the SPI communication bus */
  SPIx_Init();
 8001162:	f7ff ff9f 	bl	80010a4 <SPIx_Init>
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000728 	.word	0x20000728

08001170 <SPIx_MspInit>:

/**
  * @brief  SPI MSP Init.
  */
static void SPIx_MspInit(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b088      	sub	sp, #32
 8001174:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable the SPI peripheral */
  DISCOVERY_SPIx_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	4b17      	ldr	r3, [pc, #92]	; (80011d8 <SPIx_MspInit+0x68>)
 800117c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117e:	4a16      	ldr	r2, [pc, #88]	; (80011d8 <SPIx_MspInit+0x68>)
 8001180:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001184:	6453      	str	r3, [r2, #68]	; 0x44
 8001186:	4b14      	ldr	r3, [pc, #80]	; (80011d8 <SPIx_MspInit+0x68>)
 8001188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	68bb      	ldr	r3, [r7, #8]
  
  /* Enable SCK, MOSI and MISO GPIO clocks */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	607b      	str	r3, [r7, #4]
 8001196:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <SPIx_MspInit+0x68>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a0f      	ldr	r2, [pc, #60]	; (80011d8 <SPIx_MspInit+0x68>)
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <SPIx_MspInit+0x68>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]
  
  /* SPI SCK, MOSI, MISO pin configuration */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MISO_PIN | DISCOVERY_SPIx_MOSI_PIN);
 80011ae:	23e0      	movs	r3, #224	; 0xe0
 80011b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80011b2:	2302      	movs	r3, #2
 80011b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_PULLDOWN;
 80011b6:	2302      	movs	r3, #2
 80011b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 80011ba:	2301      	movs	r3, #1
 80011bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80011be:	2305      	movs	r3, #5
 80011c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 80011c2:	f107 030c 	add.w	r3, r7, #12
 80011c6:	4619      	mov	r1, r3
 80011c8:	4804      	ldr	r0, [pc, #16]	; (80011dc <SPIx_MspInit+0x6c>)
 80011ca:	f000 fc5f 	bl	8001a8c <HAL_GPIO_Init>
}
 80011ce:	bf00      	nop
 80011d0:	3720      	adds	r7, #32
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40020000 	.word	0x40020000

080011e0 <ACCELERO_IO_Init>:

/**
  * @brief  Configures the Accelerometer SPI interface.
  */
void ACCELERO_IO_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Accelerometer Control pins --------------------------------*/
  /* Enable CS GPIO clock and configure GPIO pin for Accelerometer Chip select */  
  ACCELERO_CS_GPIO_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	603b      	str	r3, [r7, #0]
 80011ea:	4b12      	ldr	r3, [pc, #72]	; (8001234 <ACCELERO_IO_Init+0x54>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a11      	ldr	r2, [pc, #68]	; (8001234 <ACCELERO_IO_Init+0x54>)
 80011f0:	f043 0310 	orr.w	r3, r3, #16
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <ACCELERO_IO_Init+0x54>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0310 	and.w	r3, r3, #16
 80011fe:	603b      	str	r3, [r7, #0]
 8001200:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PIN for LIS Chip select */
  GPIO_InitStructure.Pin = ACCELERO_CS_PIN;
 8001202:	2308      	movs	r3, #8
 8001204:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001206:	2301      	movs	r3, #1
 8001208:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 800120e:	2301      	movs	r3, #1
 8001210:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ACCELERO_CS_GPIO_PORT, &GPIO_InitStructure);
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	4619      	mov	r1, r3
 8001216:	4808      	ldr	r0, [pc, #32]	; (8001238 <ACCELERO_IO_Init+0x58>)
 8001218:	f000 fc38 	bl	8001a8c <HAL_GPIO_Init>
  
  /* Deselect: Chip Select high */
  ACCELERO_CS_HIGH();
 800121c:	2201      	movs	r2, #1
 800121e:	2108      	movs	r1, #8
 8001220:	4805      	ldr	r0, [pc, #20]	; (8001238 <ACCELERO_IO_Init+0x58>)
 8001222:	f000 fecb 	bl	8001fbc <HAL_GPIO_WritePin>
  
  SPIx_Init();
 8001226:	f7ff ff3d 	bl	80010a4 <SPIx_Init>
}
 800122a:	bf00      	nop
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40023800 	.word	0x40023800
 8001238:	40021000 	.word	0x40021000

0800123c <ACCELERO_IO_ITConfig>:
/**
  * @brief  Configures the Accelerometer INT2.
  *         EXTI0 is already used by user button so INT1 is not configured here.
  */
void ACCELERO_IO_ITConfig(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT2 GPIO clock and configure GPIO PINs to detect Interrupts */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	603b      	str	r3, [r7, #0]
 8001246:	4b13      	ldr	r3, [pc, #76]	; (8001294 <ACCELERO_IO_ITConfig+0x58>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a12      	ldr	r2, [pc, #72]	; (8001294 <ACCELERO_IO_ITConfig+0x58>)
 800124c:	f043 0310 	orr.w	r3, r3, #16
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b10      	ldr	r3, [pc, #64]	; (8001294 <ACCELERO_IO_ITConfig+0x58>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0310 	and.w	r3, r3, #16
 800125a:	603b      	str	r3, [r7, #0]
 800125c:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT2_PIN;
 800125e:	2302      	movs	r3, #2
 8001260:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8001262:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001266:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001268:	2302      	movs	r3, #2
 800126a:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	4619      	mov	r1, r3
 8001274:	4808      	ldr	r0, [pc, #32]	; (8001298 <ACCELERO_IO_ITConfig+0x5c>)
 8001276:	f000 fc09 	bl	8001a8c <HAL_GPIO_Init>
  
  /* Enable and set Accelerometer INT2 to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type)ACCELERO_INT2_EXTI_IRQn, 0x0F, 0);
 800127a:	2200      	movs	r2, #0
 800127c:	210f      	movs	r1, #15
 800127e:	2007      	movs	r0, #7
 8001280:	f000 fbcd 	bl	8001a1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)ACCELERO_INT2_EXTI_IRQn);
 8001284:	2007      	movs	r0, #7
 8001286:	f000 fbe6 	bl	8001a56 <HAL_NVIC_EnableIRQ>
}
 800128a:	bf00      	nop
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40023800 	.word	0x40023800
 8001298:	40021000 	.word	0x40021000

0800129c <ACCELERO_IO_Write>:
  * @param  pBuffer: pointer to the buffer containing the data to be written to the Accelerometer.
  * @param  WriteAddr: Accelerometer's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void ACCELERO_IO_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	70fb      	strb	r3, [r7, #3]
 80012a8:	4613      	mov	r3, r2
 80012aa:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
     - When 0, the address will remain unchanged in multiple read/write commands.
     - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 80012ac:	883b      	ldrh	r3, [r7, #0]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d903      	bls.n	80012ba <ACCELERO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 80012b2:	78fb      	ldrb	r3, [r7, #3]
 80012b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012b8:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  ACCELERO_CS_LOW();
 80012ba:	2200      	movs	r2, #0
 80012bc:	2108      	movs	r1, #8
 80012be:	480f      	ldr	r0, [pc, #60]	; (80012fc <ACCELERO_IO_Write+0x60>)
 80012c0:	f000 fe7c 	bl	8001fbc <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 80012c4:	78fb      	ldrb	r3, [r7, #3]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff ff26 	bl	8001118 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 80012cc:	e00a      	b.n	80012e4 <ACCELERO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff ff20 	bl	8001118 <SPIx_WriteRead>
    NumByteToWrite--;
 80012d8:	883b      	ldrh	r3, [r7, #0]
 80012da:	3b01      	subs	r3, #1
 80012dc:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	3301      	adds	r3, #1
 80012e2:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 80012e4:	883b      	ldrh	r3, [r7, #0]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1f1      	bne.n	80012ce <ACCELERO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  ACCELERO_CS_HIGH();
 80012ea:	2201      	movs	r2, #1
 80012ec:	2108      	movs	r1, #8
 80012ee:	4803      	ldr	r0, [pc, #12]	; (80012fc <ACCELERO_IO_Write+0x60>)
 80012f0:	f000 fe64 	bl	8001fbc <HAL_GPIO_WritePin>
}
 80012f4:	bf00      	nop
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40021000 	.word	0x40021000

08001300 <ACCELERO_IO_Read>:
  * @param  pBuffer: pointer to the buffer that receives the data read from the Accelerometer.
  * @param  ReadAddr: Accelerometer's internal address to read from.
  * @param  NumByteToRead: number of bytes to read from the Accelerometer.
  */
void ACCELERO_IO_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	460b      	mov	r3, r1
 800130a:	70fb      	strb	r3, [r7, #3]
 800130c:	4613      	mov	r3, r2
 800130e:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8001310:	883b      	ldrh	r3, [r7, #0]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d904      	bls.n	8001320 <ACCELERO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8001316:	78fb      	ldrb	r3, [r7, #3]
 8001318:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800131c:	70fb      	strb	r3, [r7, #3]
 800131e:	e003      	b.n	8001328 <ACCELERO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8001320:	78fb      	ldrb	r3, [r7, #3]
 8001322:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001326:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  ACCELERO_CS_LOW();
 8001328:	2200      	movs	r2, #0
 800132a:	2108      	movs	r1, #8
 800132c:	4810      	ldr	r0, [pc, #64]	; (8001370 <ACCELERO_IO_Read+0x70>)
 800132e:	f000 fe45 	bl	8001fbc <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8001332:	78fb      	ldrb	r3, [r7, #3]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff feef 	bl	8001118 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 800133a:	e00c      	b.n	8001356 <ACCELERO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to ACCELEROMETER (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 800133c:	2000      	movs	r0, #0
 800133e:	f7ff feeb 	bl	8001118 <SPIx_WriteRead>
 8001342:	4603      	mov	r3, r0
 8001344:	461a      	mov	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 800134a:	883b      	ldrh	r3, [r7, #0]
 800134c:	3b01      	subs	r3, #1
 800134e:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3301      	adds	r3, #1
 8001354:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 8001356:	883b      	ldrh	r3, [r7, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1ef      	bne.n	800133c <ACCELERO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  ACCELERO_CS_HIGH();
 800135c:	2201      	movs	r2, #1
 800135e:	2108      	movs	r1, #8
 8001360:	4803      	ldr	r0, [pc, #12]	; (8001370 <ACCELERO_IO_Read+0x70>)
 8001362:	f000 fe2b 	bl	8001fbc <HAL_GPIO_WritePin>
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40021000 	.word	0x40021000

08001374 <BSP_ACCELERO_Init>:
/**
  * @brief  Setx Accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{ 
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
  uint8_t ret = ACCELERO_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	75fb      	strb	r3, [r7, #23]
  uint16_t ctrl = 0x0000;
 800137e:	2300      	movs	r3, #0
 8001380:	82bb      	strh	r3, [r7, #20]
  LIS302DL_InitTypeDef         lis302dl_initstruct;
  LIS302DL_FilterConfigTypeDef lis302dl_filter = {0,0,0};
 8001382:	2300      	movs	r3, #0
 8001384:	723b      	strb	r3, [r7, #8]
 8001386:	2300      	movs	r3, #0
 8001388:	727b      	strb	r3, [r7, #9]
 800138a:	2300      	movs	r3, #0
 800138c:	72bb      	strb	r3, [r7, #10]
  LIS3DSH_InitTypeDef          l1s3dsh_InitStruct;

  if(Lis302dlDrv.ReadID() == I_AM_LIS302DL)
 800138e:	4b3c      	ldr	r3, [pc, #240]	; (8001480 <BSP_ACCELERO_Init+0x10c>)
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	4798      	blx	r3
 8001394:	4603      	mov	r3, r0
 8001396:	2b3b      	cmp	r3, #59	; 0x3b
 8001398:	d138      	bne.n	800140c <BSP_ACCELERO_Init+0x98>
  {
    /* Initialize the accelerometer driver structure */
    AcceleroDrv = &Lis302dlDrv;
 800139a:	4b3a      	ldr	r3, [pc, #232]	; (8001484 <BSP_ACCELERO_Init+0x110>)
 800139c:	4a38      	ldr	r2, [pc, #224]	; (8001480 <BSP_ACCELERO_Init+0x10c>)
 800139e:	601a      	str	r2, [r3, #0]

    /* Set configuration of LIS302DL MEMS Accelerometer *********************/
    lis302dl_initstruct.Power_Mode = LIS302DL_LOWPOWERMODE_ACTIVE;
 80013a0:	2340      	movs	r3, #64	; 0x40
 80013a2:	733b      	strb	r3, [r7, #12]
    lis302dl_initstruct.Output_DataRate = LIS302DL_DATARATE_100;
 80013a4:	2300      	movs	r3, #0
 80013a6:	737b      	strb	r3, [r7, #13]
    lis302dl_initstruct.Axes_Enable = LIS302DL_XYZ_ENABLE;
 80013a8:	2307      	movs	r3, #7
 80013aa:	73bb      	strb	r3, [r7, #14]
    lis302dl_initstruct.Full_Scale = LIS302DL_FULLSCALE_2_3;
 80013ac:	2300      	movs	r3, #0
 80013ae:	73fb      	strb	r3, [r7, #15]
    lis302dl_initstruct.Self_Test = LIS302DL_SELFTEST_NORMAL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	743b      	strb	r3, [r7, #16]
    
    /* Configure MEMS: data rate, power mode, full scale, self test and axes */
    ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate | lis302dl_initstruct.Power_Mode | \
 80013b4:	7b7a      	ldrb	r2, [r7, #13]
 80013b6:	7b3b      	ldrb	r3, [r7, #12]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	b2da      	uxtb	r2, r3
                       lis302dl_initstruct.Full_Scale | lis302dl_initstruct.Self_Test | \
 80013bc:	7bfb      	ldrb	r3, [r7, #15]
    ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate | lis302dl_initstruct.Power_Mode | \
 80013be:	4313      	orrs	r3, r2
 80013c0:	b2da      	uxtb	r2, r3
                       lis302dl_initstruct.Full_Scale | lis302dl_initstruct.Self_Test | \
 80013c2:	7c3b      	ldrb	r3, [r7, #16]
    ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate | lis302dl_initstruct.Power_Mode | \
 80013c4:	4313      	orrs	r3, r2
 80013c6:	b2da      	uxtb	r2, r3
                       lis302dl_initstruct.Axes_Enable);
 80013c8:	7bbb      	ldrb	r3, [r7, #14]
    ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate | lis302dl_initstruct.Power_Mode | \
 80013ca:	4313      	orrs	r3, r2
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	82bb      	strh	r3, [r7, #20]
    
    /* Configure the accelerometer main parameters */
    AcceleroDrv->Init(ctrl);
 80013d0:	4b2c      	ldr	r3, [pc, #176]	; (8001484 <BSP_ACCELERO_Init+0x110>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	8aba      	ldrh	r2, [r7, #20]
 80013d8:	4610      	mov	r0, r2
 80013da:	4798      	blx	r3
    
    /* MEMS High Pass Filter configuration */
    lis302dl_filter.HighPassFilter_Data_Selection = LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER;
 80013dc:	2320      	movs	r3, #32
 80013de:	723b      	strb	r3, [r7, #8]
    lis302dl_filter.HighPassFilter_CutOff_Frequency = LIS302DL_HIGHPASSFILTER_LEVEL_1;
 80013e0:	2301      	movs	r3, #1
 80013e2:	727b      	strb	r3, [r7, #9]
    lis302dl_filter.HighPassFilter_Interrupt = LIS302DL_HIGHPASSFILTERINTERRUPT_1_2;
 80013e4:	230c      	movs	r3, #12
 80013e6:	72bb      	strb	r3, [r7, #10]
    
    /* Configure MEMS high pass filter cut-off level, interrupt and data selection bits */                     
    ctrl = (uint8_t)(lis302dl_filter.HighPassFilter_Data_Selection | \
 80013e8:	7a3a      	ldrb	r2, [r7, #8]
                     lis302dl_filter.HighPassFilter_CutOff_Frequency | \
 80013ea:	7a7b      	ldrb	r3, [r7, #9]
    ctrl = (uint8_t)(lis302dl_filter.HighPassFilter_Data_Selection | \
 80013ec:	4313      	orrs	r3, r2
 80013ee:	b2da      	uxtb	r2, r3
                     lis302dl_filter.HighPassFilter_Interrupt);
 80013f0:	7abb      	ldrb	r3, [r7, #10]
    ctrl = (uint8_t)(lis302dl_filter.HighPassFilter_Data_Selection | \
 80013f2:	4313      	orrs	r3, r2
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AcceleroDrv->FilterConfig(ctrl);
 80013f8:	4b22      	ldr	r3, [pc, #136]	; (8001484 <BSP_ACCELERO_Init+0x110>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fe:	8aba      	ldrh	r2, [r7, #20]
 8001400:	b2d2      	uxtb	r2, r2
 8001402:	4610      	mov	r0, r2
 8001404:	4798      	blx	r3

    ret = ACCELERO_OK;
 8001406:	2300      	movs	r3, #0
 8001408:	75fb      	strb	r3, [r7, #23]
 800140a:	e034      	b.n	8001476 <BSP_ACCELERO_Init+0x102>
  }
  else if(Lis3dshDrv.ReadID() == I_AM_LIS3DSH)
 800140c:	4b1e      	ldr	r3, [pc, #120]	; (8001488 <BSP_ACCELERO_Init+0x114>)
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	4798      	blx	r3
 8001412:	4603      	mov	r3, r0
 8001414:	2b3f      	cmp	r3, #63	; 0x3f
 8001416:	d12c      	bne.n	8001472 <BSP_ACCELERO_Init+0xfe>
  {
    /* Initialize the accelerometer driver structure */
    AcceleroDrv = &Lis3dshDrv;
 8001418:	4b1a      	ldr	r3, [pc, #104]	; (8001484 <BSP_ACCELERO_Init+0x110>)
 800141a:	4a1b      	ldr	r2, [pc, #108]	; (8001488 <BSP_ACCELERO_Init+0x114>)
 800141c:	601a      	str	r2, [r3, #0]

    /* Set configuration of LIS3DSH MEMS Accelerometer **********************/
    l1s3dsh_InitStruct.Output_DataRate = LIS3DSH_DATARATE_100;
 800141e:	2360      	movs	r3, #96	; 0x60
 8001420:	703b      	strb	r3, [r7, #0]
    l1s3dsh_InitStruct.Axes_Enable = LIS3DSH_XYZ_ENABLE;
 8001422:	2307      	movs	r3, #7
 8001424:	707b      	strb	r3, [r7, #1]
    l1s3dsh_InitStruct.SPI_Wire = LIS3DSH_SERIALINTERFACE_4WIRE;
 8001426:	2300      	movs	r3, #0
 8001428:	70bb      	strb	r3, [r7, #2]
    l1s3dsh_InitStruct.Self_Test = LIS3DSH_SELFTEST_NORMAL;
 800142a:	2300      	movs	r3, #0
 800142c:	70fb      	strb	r3, [r7, #3]
    l1s3dsh_InitStruct.Full_Scale = LIS3DSH_FULLSCALE_2;
 800142e:	2300      	movs	r3, #0
 8001430:	713b      	strb	r3, [r7, #4]
    l1s3dsh_InitStruct.Filter_BW = LIS3DSH_FILTER_BW_800;
 8001432:	2300      	movs	r3, #0
 8001434:	717b      	strb	r3, [r7, #5]
    
    /* Configure MEMS: power mode(ODR) and axes enable */
    ctrl = (uint16_t) (l1s3dsh_InitStruct.Output_DataRate | \
 8001436:	783a      	ldrb	r2, [r7, #0]
                       l1s3dsh_InitStruct.Axes_Enable);
 8001438:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint16_t) (l1s3dsh_InitStruct.Output_DataRate | \
 800143a:	4313      	orrs	r3, r2
 800143c:	b2db      	uxtb	r3, r3
 800143e:	82bb      	strh	r3, [r7, #20]
    
    /* Configure MEMS: full scale and self test */
    ctrl |= (uint16_t) ((l1s3dsh_InitStruct.SPI_Wire    | \
 8001440:	78ba      	ldrb	r2, [r7, #2]
                         l1s3dsh_InitStruct.Self_Test   | \
 8001442:	78fb      	ldrb	r3, [r7, #3]
    ctrl |= (uint16_t) ((l1s3dsh_InitStruct.SPI_Wire    | \
 8001444:	4313      	orrs	r3, r2
 8001446:	b2da      	uxtb	r2, r3
                         l1s3dsh_InitStruct.Full_Scale  | \
 8001448:	793b      	ldrb	r3, [r7, #4]
    ctrl |= (uint16_t) ((l1s3dsh_InitStruct.SPI_Wire    | \
 800144a:	4313      	orrs	r3, r2
 800144c:	b2da      	uxtb	r2, r3
                         l1s3dsh_InitStruct.Filter_BW) << 8);
 800144e:	797b      	ldrb	r3, [r7, #5]
    ctrl |= (uint16_t) ((l1s3dsh_InitStruct.SPI_Wire    | \
 8001450:	4313      	orrs	r3, r2
 8001452:	b2db      	uxtb	r3, r3
 8001454:	b29b      	uxth	r3, r3
 8001456:	021b      	lsls	r3, r3, #8
 8001458:	b29a      	uxth	r2, r3
 800145a:	8abb      	ldrh	r3, [r7, #20]
 800145c:	4313      	orrs	r3, r2
 800145e:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AcceleroDrv->Init(ctrl);
 8001460:	4b08      	ldr	r3, [pc, #32]	; (8001484 <BSP_ACCELERO_Init+0x110>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	8aba      	ldrh	r2, [r7, #20]
 8001468:	4610      	mov	r0, r2
 800146a:	4798      	blx	r3
    
    ret = ACCELERO_OK;
 800146c:	2300      	movs	r3, #0
 800146e:	75fb      	strb	r3, [r7, #23]
 8001470:	e001      	b.n	8001476 <BSP_ACCELERO_Init+0x102>
  }

  else
  {
    ret = ACCELERO_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 8001476:	7dfb      	ldrb	r3, [r7, #23]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3718      	adds	r7, #24
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20000000 	.word	0x20000000
 8001484:	20000780 	.word	0x20000780
 8001488:	20000034 	.word	0x20000034

0800148c <BSP_ACCELERO_GetXYZ>:
  * @brief  Get XYZ axes acceleration.
  * @param  pDataXYZ: Pointer to 3 angular acceleration axes.  
  *                   pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  */
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  int16_t SwitchXY = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	81fb      	strh	r3, [r7, #14]
  
  if(AcceleroDrv->GetXYZ != NULL)
 8001498:	4b10      	ldr	r3, [pc, #64]	; (80014dc <BSP_ACCELERO_GetXYZ+0x50>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d018      	beq.n	80014d4 <BSP_ACCELERO_GetXYZ+0x48>
  {   
    AcceleroDrv->GetXYZ(pDataXYZ);
 80014a2:	4b0e      	ldr	r3, [pc, #56]	; (80014dc <BSP_ACCELERO_GetXYZ+0x50>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	4798      	blx	r3
    
    /* Switch X and Y Axes in case of LIS302DL MEMS */
    if(AcceleroDrv == &Lis302dlDrv)
 80014ac:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <BSP_ACCELERO_GetXYZ+0x50>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a0b      	ldr	r2, [pc, #44]	; (80014e0 <BSP_ACCELERO_GetXYZ+0x54>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d10e      	bne.n	80014d4 <BSP_ACCELERO_GetXYZ+0x48>
    { 
      SwitchXY  = pDataXYZ[0];
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	881b      	ldrh	r3, [r3, #0]
 80014ba:	81fb      	strh	r3, [r7, #14]
      pDataXYZ[0] = pDataXYZ[1];
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	801a      	strh	r2, [r3, #0]
      /* Invert Y Axis to be compliant with LIS3DSH MEMS */
      pDataXYZ[1] = -SwitchXY;
 80014c6:	89fb      	ldrh	r3, [r7, #14]
 80014c8:	425b      	negs	r3, r3
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3302      	adds	r3, #2
 80014d0:	b212      	sxth	r2, r2
 80014d2:	801a      	strh	r2, [r3, #0]
    } 
  }
}
 80014d4:	bf00      	nop
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20000780 	.word	0x20000780
 80014e0:	20000000 	.word	0x20000000

080014e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	607b      	str	r3, [r7, #4]
 80014ee:	4b10      	ldr	r3, [pc, #64]	; (8001530 <HAL_MspInit+0x4c>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	4a0f      	ldr	r2, [pc, #60]	; (8001530 <HAL_MspInit+0x4c>)
 80014f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f8:	6453      	str	r3, [r2, #68]	; 0x44
 80014fa:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <HAL_MspInit+0x4c>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001502:	607b      	str	r3, [r7, #4]
 8001504:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	603b      	str	r3, [r7, #0]
 800150a:	4b09      	ldr	r3, [pc, #36]	; (8001530 <HAL_MspInit+0x4c>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	4a08      	ldr	r2, [pc, #32]	; (8001530 <HAL_MspInit+0x4c>)
 8001510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001514:	6413      	str	r3, [r2, #64]	; 0x40
 8001516:	4b06      	ldr	r3, [pc, #24]	; (8001530 <HAL_MspInit+0x4c>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151e:	603b      	str	r3, [r7, #0]
 8001520:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001522:	2007      	movs	r0, #7
 8001524:	f000 fa70 	bl	8001a08 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001528:	bf00      	nop
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40023800 	.word	0x40023800

08001534 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08a      	sub	sp, #40	; 0x28
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a28      	ldr	r2, [pc, #160]	; (80015f4 <HAL_SPI_MspInit+0xc0>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d149      	bne.n	80015ea <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	613b      	str	r3, [r7, #16]
 800155a:	4b27      	ldr	r3, [pc, #156]	; (80015f8 <HAL_SPI_MspInit+0xc4>)
 800155c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155e:	4a26      	ldr	r2, [pc, #152]	; (80015f8 <HAL_SPI_MspInit+0xc4>)
 8001560:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001564:	6453      	str	r3, [r2, #68]	; 0x44
 8001566:	4b24      	ldr	r3, [pc, #144]	; (80015f8 <HAL_SPI_MspInit+0xc4>)
 8001568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800156e:	613b      	str	r3, [r7, #16]
 8001570:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	4b20      	ldr	r3, [pc, #128]	; (80015f8 <HAL_SPI_MspInit+0xc4>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	4a1f      	ldr	r2, [pc, #124]	; (80015f8 <HAL_SPI_MspInit+0xc4>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	6313      	str	r3, [r2, #48]	; 0x30
 8001582:	4b1d      	ldr	r3, [pc, #116]	; (80015f8 <HAL_SPI_MspInit+0xc4>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	60bb      	str	r3, [r7, #8]
 8001592:	4b19      	ldr	r3, [pc, #100]	; (80015f8 <HAL_SPI_MspInit+0xc4>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	4a18      	ldr	r2, [pc, #96]	; (80015f8 <HAL_SPI_MspInit+0xc4>)
 8001598:	f043 0302 	orr.w	r3, r3, #2
 800159c:	6313      	str	r3, [r2, #48]	; 0x30
 800159e:	4b16      	ldr	r3, [pc, #88]	; (80015f8 <HAL_SPI_MspInit+0xc4>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	60bb      	str	r3, [r7, #8]
 80015a8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015aa:	23c0      	movs	r3, #192	; 0xc0
 80015ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ae:	2302      	movs	r3, #2
 80015b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b6:	2303      	movs	r3, #3
 80015b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015ba:	2305      	movs	r3, #5
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015be:	f107 0314 	add.w	r3, r7, #20
 80015c2:	4619      	mov	r1, r3
 80015c4:	480d      	ldr	r0, [pc, #52]	; (80015fc <HAL_SPI_MspInit+0xc8>)
 80015c6:	f000 fa61 	bl	8001a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015ca:	2308      	movs	r3, #8
 80015cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ce:	2302      	movs	r3, #2
 80015d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d6:	2303      	movs	r3, #3
 80015d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015da:	2305      	movs	r3, #5
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015de:	f107 0314 	add.w	r3, r7, #20
 80015e2:	4619      	mov	r1, r3
 80015e4:	4806      	ldr	r0, [pc, #24]	; (8001600 <HAL_SPI_MspInit+0xcc>)
 80015e6:	f000 fa51 	bl	8001a8c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80015ea:	bf00      	nop
 80015ec:	3728      	adds	r7, #40	; 0x28
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40013000 	.word	0x40013000
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40020000 	.word	0x40020000
 8001600:	40020400 	.word	0x40020400

08001604 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a0a      	ldr	r2, [pc, #40]	; (800163c <HAL_SPI_MspDeInit+0x38>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d10d      	bne.n	8001632 <HAL_SPI_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8001616:	4b0a      	ldr	r3, [pc, #40]	; (8001640 <HAL_SPI_MspDeInit+0x3c>)
 8001618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161a:	4a09      	ldr	r2, [pc, #36]	; (8001640 <HAL_SPI_MspDeInit+0x3c>)
 800161c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001620:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6|GPIO_PIN_7);
 8001622:	21c0      	movs	r1, #192	; 0xc0
 8001624:	4807      	ldr	r0, [pc, #28]	; (8001644 <HAL_SPI_MspDeInit+0x40>)
 8001626:	f000 fbcd 	bl	8001dc4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3);
 800162a:	2108      	movs	r1, #8
 800162c:	4806      	ldr	r0, [pc, #24]	; (8001648 <HAL_SPI_MspDeInit+0x44>)
 800162e:	f000 fbc9 	bl	8001dc4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40013000 	.word	0x40013000
 8001640:	40023800 	.word	0x40023800
 8001644:	40020000 	.word	0x40020000
 8001648:	40020400 	.word	0x40020400

0800164c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001650:	e7fe      	b.n	8001650 <NMI_Handler+0x4>

08001652 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001656:	e7fe      	b.n	8001656 <HardFault_Handler+0x4>

08001658 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800165c:	e7fe      	b.n	800165c <MemManage_Handler+0x4>

0800165e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001662:	e7fe      	b.n	8001662 <BusFault_Handler+0x4>

08001664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001668:	e7fe      	b.n	8001668 <UsageFault_Handler+0x4>

0800166a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001698:	f000 f8a2 	bl	80017e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}

080016a0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80016a4:	2001      	movs	r0, #1
 80016a6:	f000 fca3 	bl	8001ff0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
	...

080016b0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80016b4:	4802      	ldr	r0, [pc, #8]	; (80016c0 <OTG_FS_IRQHandler+0x10>)
 80016b6:	f000 fe03 	bl	80022c0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000c68 	.word	0x20000c68

080016c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016c8:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <SystemInit+0x20>)
 80016ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ce:	4a05      	ldr	r2, [pc, #20]	; (80016e4 <SystemInit+0x20>)
 80016d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80016e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001720 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016ec:	480d      	ldr	r0, [pc, #52]	; (8001724 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016ee:	490e      	ldr	r1, [pc, #56]	; (8001728 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016f0:	4a0e      	ldr	r2, [pc, #56]	; (800172c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016f4:	e002      	b.n	80016fc <LoopCopyDataInit>

080016f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016fa:	3304      	adds	r3, #4

080016fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001700:	d3f9      	bcc.n	80016f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001702:	4a0b      	ldr	r2, [pc, #44]	; (8001730 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001704:	4c0b      	ldr	r4, [pc, #44]	; (8001734 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001706:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001708:	e001      	b.n	800170e <LoopFillZerobss>

0800170a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800170a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800170c:	3204      	adds	r2, #4

0800170e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800170e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001710:	d3fb      	bcc.n	800170a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001712:	f7ff ffd7 	bl	80016c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001716:	f006 fc95 	bl	8008044 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800171a:	f7ff fa83 	bl	8000c24 <main>
  bx  lr    
 800171e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001720:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001724:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001728:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 800172c:	08008104 	.word	0x08008104
  ldr r2, =_sbss
 8001730:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8001734:	20001188 	.word	0x20001188

08001738 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001738:	e7fe      	b.n	8001738 <ADC_IRQHandler>
	...

0800173c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001740:	4b0e      	ldr	r3, [pc, #56]	; (800177c <HAL_Init+0x40>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a0d      	ldr	r2, [pc, #52]	; (800177c <HAL_Init+0x40>)
 8001746:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800174a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800174c:	4b0b      	ldr	r3, [pc, #44]	; (800177c <HAL_Init+0x40>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a0a      	ldr	r2, [pc, #40]	; (800177c <HAL_Init+0x40>)
 8001752:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001756:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001758:	4b08      	ldr	r3, [pc, #32]	; (800177c <HAL_Init+0x40>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a07      	ldr	r2, [pc, #28]	; (800177c <HAL_Init+0x40>)
 800175e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001762:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001764:	2003      	movs	r0, #3
 8001766:	f000 f94f 	bl	8001a08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800176a:	2000      	movs	r0, #0
 800176c:	f000 f808 	bl	8001780 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001770:	f7ff feb8 	bl	80014e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40023c00 	.word	0x40023c00

08001780 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001788:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <HAL_InitTick+0x54>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <HAL_InitTick+0x58>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	4619      	mov	r1, r3
 8001792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001796:	fbb3 f3f1 	udiv	r3, r3, r1
 800179a:	fbb2 f3f3 	udiv	r3, r2, r3
 800179e:	4618      	mov	r0, r3
 80017a0:	f000 f967 	bl	8001a72 <HAL_SYSTICK_Config>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e00e      	b.n	80017cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b0f      	cmp	r3, #15
 80017b2:	d80a      	bhi.n	80017ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b4:	2200      	movs	r2, #0
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	f04f 30ff 	mov.w	r0, #4294967295
 80017bc:	f000 f92f 	bl	8001a1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017c0:	4a06      	ldr	r2, [pc, #24]	; (80017dc <HAL_InitTick+0x5c>)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
 80017c8:	e000      	b.n	80017cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20000074 	.word	0x20000074
 80017d8:	2000007c 	.word	0x2000007c
 80017dc:	20000078 	.word	0x20000078

080017e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <HAL_IncTick+0x20>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b06      	ldr	r3, [pc, #24]	; (8001804 <HAL_IncTick+0x24>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4413      	add	r3, r2
 80017f0:	4a04      	ldr	r2, [pc, #16]	; (8001804 <HAL_IncTick+0x24>)
 80017f2:	6013      	str	r3, [r2, #0]
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	2000007c 	.word	0x2000007c
 8001804:	20000784 	.word	0x20000784

08001808 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  return uwTick;
 800180c:	4b03      	ldr	r3, [pc, #12]	; (800181c <HAL_GetTick+0x14>)
 800180e:	681b      	ldr	r3, [r3, #0]
}
 8001810:	4618      	mov	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	20000784 	.word	0x20000784

08001820 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001828:	f7ff ffee 	bl	8001808 <HAL_GetTick>
 800182c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001838:	d005      	beq.n	8001846 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800183a:	4b0a      	ldr	r3, [pc, #40]	; (8001864 <HAL_Delay+0x44>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	461a      	mov	r2, r3
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	4413      	add	r3, r2
 8001844:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001846:	bf00      	nop
 8001848:	f7ff ffde 	bl	8001808 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	429a      	cmp	r2, r3
 8001856:	d8f7      	bhi.n	8001848 <HAL_Delay+0x28>
  {
  }
}
 8001858:	bf00      	nop
 800185a:	bf00      	nop
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	2000007c 	.word	0x2000007c

08001868 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001878:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <__NVIC_SetPriorityGrouping+0x44>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800187e:	68ba      	ldr	r2, [r7, #8]
 8001880:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001884:	4013      	ands	r3, r2
 8001886:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001890:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001898:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800189a:	4a04      	ldr	r2, [pc, #16]	; (80018ac <__NVIC_SetPriorityGrouping+0x44>)
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	60d3      	str	r3, [r2, #12]
}
 80018a0:	bf00      	nop
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b4:	4b04      	ldr	r3, [pc, #16]	; (80018c8 <__NVIC_GetPriorityGrouping+0x18>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	0a1b      	lsrs	r3, r3, #8
 80018ba:	f003 0307 	and.w	r3, r3, #7
}
 80018be:	4618      	mov	r0, r3
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	db0b      	blt.n	80018f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	f003 021f 	and.w	r2, r3, #31
 80018e4:	4907      	ldr	r1, [pc, #28]	; (8001904 <__NVIC_EnableIRQ+0x38>)
 80018e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ea:	095b      	lsrs	r3, r3, #5
 80018ec:	2001      	movs	r0, #1
 80018ee:	fa00 f202 	lsl.w	r2, r0, r2
 80018f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	e000e100 	.word	0xe000e100

08001908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	6039      	str	r1, [r7, #0]
 8001912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001918:	2b00      	cmp	r3, #0
 800191a:	db0a      	blt.n	8001932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	b2da      	uxtb	r2, r3
 8001920:	490c      	ldr	r1, [pc, #48]	; (8001954 <__NVIC_SetPriority+0x4c>)
 8001922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001926:	0112      	lsls	r2, r2, #4
 8001928:	b2d2      	uxtb	r2, r2
 800192a:	440b      	add	r3, r1
 800192c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001930:	e00a      	b.n	8001948 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	b2da      	uxtb	r2, r3
 8001936:	4908      	ldr	r1, [pc, #32]	; (8001958 <__NVIC_SetPriority+0x50>)
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	f003 030f 	and.w	r3, r3, #15
 800193e:	3b04      	subs	r3, #4
 8001940:	0112      	lsls	r2, r2, #4
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	440b      	add	r3, r1
 8001946:	761a      	strb	r2, [r3, #24]
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e000e100 	.word	0xe000e100
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800195c:	b480      	push	{r7}
 800195e:	b089      	sub	sp, #36	; 0x24
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	f1c3 0307 	rsb	r3, r3, #7
 8001976:	2b04      	cmp	r3, #4
 8001978:	bf28      	it	cs
 800197a:	2304      	movcs	r3, #4
 800197c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3304      	adds	r3, #4
 8001982:	2b06      	cmp	r3, #6
 8001984:	d902      	bls.n	800198c <NVIC_EncodePriority+0x30>
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	3b03      	subs	r3, #3
 800198a:	e000      	b.n	800198e <NVIC_EncodePriority+0x32>
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001990:	f04f 32ff 	mov.w	r2, #4294967295
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43da      	mvns	r2, r3
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	401a      	ands	r2, r3
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019a4:	f04f 31ff 	mov.w	r1, #4294967295
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	fa01 f303 	lsl.w	r3, r1, r3
 80019ae:	43d9      	mvns	r1, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b4:	4313      	orrs	r3, r2
         );
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3724      	adds	r7, #36	; 0x24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
	...

080019c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019d4:	d301      	bcc.n	80019da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019d6:	2301      	movs	r3, #1
 80019d8:	e00f      	b.n	80019fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019da:	4a0a      	ldr	r2, [pc, #40]	; (8001a04 <SysTick_Config+0x40>)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3b01      	subs	r3, #1
 80019e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019e2:	210f      	movs	r1, #15
 80019e4:	f04f 30ff 	mov.w	r0, #4294967295
 80019e8:	f7ff ff8e 	bl	8001908 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019ec:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <SysTick_Config+0x40>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019f2:	4b04      	ldr	r3, [pc, #16]	; (8001a04 <SysTick_Config+0x40>)
 80019f4:	2207      	movs	r2, #7
 80019f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	e000e010 	.word	0xe000e010

08001a08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f7ff ff29 	bl	8001868 <__NVIC_SetPriorityGrouping>
}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b086      	sub	sp, #24
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	4603      	mov	r3, r0
 8001a26:	60b9      	str	r1, [r7, #8]
 8001a28:	607a      	str	r2, [r7, #4]
 8001a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a30:	f7ff ff3e 	bl	80018b0 <__NVIC_GetPriorityGrouping>
 8001a34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	68b9      	ldr	r1, [r7, #8]
 8001a3a:	6978      	ldr	r0, [r7, #20]
 8001a3c:	f7ff ff8e 	bl	800195c <NVIC_EncodePriority>
 8001a40:	4602      	mov	r2, r0
 8001a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a46:	4611      	mov	r1, r2
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff5d 	bl	8001908 <__NVIC_SetPriority>
}
 8001a4e:	bf00      	nop
 8001a50:	3718      	adds	r7, #24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff ff31 	bl	80018cc <__NVIC_EnableIRQ>
}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b082      	sub	sp, #8
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7ff ffa2 	bl	80019c4 <SysTick_Config>
 8001a80:	4603      	mov	r3, r0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b089      	sub	sp, #36	; 0x24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61fb      	str	r3, [r7, #28]
 8001aa6:	e16b      	b.n	8001d80 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	f040 815a 	bne.w	8001d7a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f003 0303 	and.w	r3, r3, #3
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d005      	beq.n	8001ade <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d130      	bne.n	8001b40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	2203      	movs	r2, #3
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43db      	mvns	r3, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4013      	ands	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	68da      	ldr	r2, [r3, #12]
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b14:	2201      	movs	r2, #1
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4013      	ands	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	091b      	lsrs	r3, r3, #4
 8001b2a:	f003 0201 	and.w	r2, r3, #1
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f003 0303 	and.w	r3, r3, #3
 8001b48:	2b03      	cmp	r3, #3
 8001b4a:	d017      	beq.n	8001b7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	2203      	movs	r2, #3
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4013      	ands	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 0303 	and.w	r3, r3, #3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d123      	bne.n	8001bd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	08da      	lsrs	r2, r3, #3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3208      	adds	r2, #8
 8001b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	f003 0307 	and.w	r3, r3, #7
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	220f      	movs	r2, #15
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	691a      	ldr	r2, [r3, #16]
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	08da      	lsrs	r2, r3, #3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	3208      	adds	r2, #8
 8001bca:	69b9      	ldr	r1, [r7, #24]
 8001bcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	2203      	movs	r2, #3
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4013      	ands	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 0203 	and.w	r2, r3, #3
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f000 80b4 	beq.w	8001d7a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	4b60      	ldr	r3, [pc, #384]	; (8001d98 <HAL_GPIO_Init+0x30c>)
 8001c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1a:	4a5f      	ldr	r2, [pc, #380]	; (8001d98 <HAL_GPIO_Init+0x30c>)
 8001c1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c20:	6453      	str	r3, [r2, #68]	; 0x44
 8001c22:	4b5d      	ldr	r3, [pc, #372]	; (8001d98 <HAL_GPIO_Init+0x30c>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c2e:	4a5b      	ldr	r2, [pc, #364]	; (8001d9c <HAL_GPIO_Init+0x310>)
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	089b      	lsrs	r3, r3, #2
 8001c34:	3302      	adds	r3, #2
 8001c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	f003 0303 	and.w	r3, r3, #3
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	220f      	movs	r2, #15
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a52      	ldr	r2, [pc, #328]	; (8001da0 <HAL_GPIO_Init+0x314>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d02b      	beq.n	8001cb2 <HAL_GPIO_Init+0x226>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a51      	ldr	r2, [pc, #324]	; (8001da4 <HAL_GPIO_Init+0x318>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d025      	beq.n	8001cae <HAL_GPIO_Init+0x222>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a50      	ldr	r2, [pc, #320]	; (8001da8 <HAL_GPIO_Init+0x31c>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d01f      	beq.n	8001caa <HAL_GPIO_Init+0x21e>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a4f      	ldr	r2, [pc, #316]	; (8001dac <HAL_GPIO_Init+0x320>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d019      	beq.n	8001ca6 <HAL_GPIO_Init+0x21a>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a4e      	ldr	r2, [pc, #312]	; (8001db0 <HAL_GPIO_Init+0x324>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d013      	beq.n	8001ca2 <HAL_GPIO_Init+0x216>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a4d      	ldr	r2, [pc, #308]	; (8001db4 <HAL_GPIO_Init+0x328>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d00d      	beq.n	8001c9e <HAL_GPIO_Init+0x212>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a4c      	ldr	r2, [pc, #304]	; (8001db8 <HAL_GPIO_Init+0x32c>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d007      	beq.n	8001c9a <HAL_GPIO_Init+0x20e>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a4b      	ldr	r2, [pc, #300]	; (8001dbc <HAL_GPIO_Init+0x330>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d101      	bne.n	8001c96 <HAL_GPIO_Init+0x20a>
 8001c92:	2307      	movs	r3, #7
 8001c94:	e00e      	b.n	8001cb4 <HAL_GPIO_Init+0x228>
 8001c96:	2308      	movs	r3, #8
 8001c98:	e00c      	b.n	8001cb4 <HAL_GPIO_Init+0x228>
 8001c9a:	2306      	movs	r3, #6
 8001c9c:	e00a      	b.n	8001cb4 <HAL_GPIO_Init+0x228>
 8001c9e:	2305      	movs	r3, #5
 8001ca0:	e008      	b.n	8001cb4 <HAL_GPIO_Init+0x228>
 8001ca2:	2304      	movs	r3, #4
 8001ca4:	e006      	b.n	8001cb4 <HAL_GPIO_Init+0x228>
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e004      	b.n	8001cb4 <HAL_GPIO_Init+0x228>
 8001caa:	2302      	movs	r3, #2
 8001cac:	e002      	b.n	8001cb4 <HAL_GPIO_Init+0x228>
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e000      	b.n	8001cb4 <HAL_GPIO_Init+0x228>
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	69fa      	ldr	r2, [r7, #28]
 8001cb6:	f002 0203 	and.w	r2, r2, #3
 8001cba:	0092      	lsls	r2, r2, #2
 8001cbc:	4093      	lsls	r3, r2
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cc4:	4935      	ldr	r1, [pc, #212]	; (8001d9c <HAL_GPIO_Init+0x310>)
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	089b      	lsrs	r3, r3, #2
 8001cca:	3302      	adds	r3, #2
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cd2:	4b3b      	ldr	r3, [pc, #236]	; (8001dc0 <HAL_GPIO_Init+0x334>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cf6:	4a32      	ldr	r2, [pc, #200]	; (8001dc0 <HAL_GPIO_Init+0x334>)
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cfc:	4b30      	ldr	r3, [pc, #192]	; (8001dc0 <HAL_GPIO_Init+0x334>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	43db      	mvns	r3, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d20:	4a27      	ldr	r2, [pc, #156]	; (8001dc0 <HAL_GPIO_Init+0x334>)
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d26:	4b26      	ldr	r3, [pc, #152]	; (8001dc0 <HAL_GPIO_Init+0x334>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4013      	ands	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d4a:	4a1d      	ldr	r2, [pc, #116]	; (8001dc0 <HAL_GPIO_Init+0x334>)
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d50:	4b1b      	ldr	r3, [pc, #108]	; (8001dc0 <HAL_GPIO_Init+0x334>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d003      	beq.n	8001d74 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d74:	4a12      	ldr	r2, [pc, #72]	; (8001dc0 <HAL_GPIO_Init+0x334>)
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	61fb      	str	r3, [r7, #28]
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	2b0f      	cmp	r3, #15
 8001d84:	f67f ae90 	bls.w	8001aa8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d88:	bf00      	nop
 8001d8a:	bf00      	nop
 8001d8c:	3724      	adds	r7, #36	; 0x24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	40013800 	.word	0x40013800
 8001da0:	40020000 	.word	0x40020000
 8001da4:	40020400 	.word	0x40020400
 8001da8:	40020800 	.word	0x40020800
 8001dac:	40020c00 	.word	0x40020c00
 8001db0:	40021000 	.word	0x40021000
 8001db4:	40021400 	.word	0x40021400
 8001db8:	40021800 	.word	0x40021800
 8001dbc:	40021c00 	.word	0x40021c00
 8001dc0:	40013c00 	.word	0x40013c00

08001dc4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b087      	sub	sp, #28
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dda:	2300      	movs	r3, #0
 8001ddc:	617b      	str	r3, [r7, #20]
 8001dde:	e0cd      	b.n	8001f7c <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001de0:	2201      	movs	r2, #1
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	4013      	ands	r3, r2
 8001df0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	f040 80bd 	bne.w	8001f76 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001dfc:	4a65      	ldr	r2, [pc, #404]	; (8001f94 <HAL_GPIO_DeInit+0x1d0>)
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	089b      	lsrs	r3, r3, #2
 8001e02:	3302      	adds	r3, #2
 8001e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e08:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	f003 0303 	and.w	r3, r3, #3
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	220f      	movs	r2, #15
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	68ba      	ldr	r2, [r7, #8]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a5d      	ldr	r2, [pc, #372]	; (8001f98 <HAL_GPIO_DeInit+0x1d4>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d02b      	beq.n	8001e7e <HAL_GPIO_DeInit+0xba>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a5c      	ldr	r2, [pc, #368]	; (8001f9c <HAL_GPIO_DeInit+0x1d8>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d025      	beq.n	8001e7a <HAL_GPIO_DeInit+0xb6>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a5b      	ldr	r2, [pc, #364]	; (8001fa0 <HAL_GPIO_DeInit+0x1dc>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d01f      	beq.n	8001e76 <HAL_GPIO_DeInit+0xb2>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a5a      	ldr	r2, [pc, #360]	; (8001fa4 <HAL_GPIO_DeInit+0x1e0>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d019      	beq.n	8001e72 <HAL_GPIO_DeInit+0xae>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a59      	ldr	r2, [pc, #356]	; (8001fa8 <HAL_GPIO_DeInit+0x1e4>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d013      	beq.n	8001e6e <HAL_GPIO_DeInit+0xaa>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a58      	ldr	r2, [pc, #352]	; (8001fac <HAL_GPIO_DeInit+0x1e8>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d00d      	beq.n	8001e6a <HAL_GPIO_DeInit+0xa6>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a57      	ldr	r2, [pc, #348]	; (8001fb0 <HAL_GPIO_DeInit+0x1ec>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d007      	beq.n	8001e66 <HAL_GPIO_DeInit+0xa2>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a56      	ldr	r2, [pc, #344]	; (8001fb4 <HAL_GPIO_DeInit+0x1f0>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d101      	bne.n	8001e62 <HAL_GPIO_DeInit+0x9e>
 8001e5e:	2307      	movs	r3, #7
 8001e60:	e00e      	b.n	8001e80 <HAL_GPIO_DeInit+0xbc>
 8001e62:	2308      	movs	r3, #8
 8001e64:	e00c      	b.n	8001e80 <HAL_GPIO_DeInit+0xbc>
 8001e66:	2306      	movs	r3, #6
 8001e68:	e00a      	b.n	8001e80 <HAL_GPIO_DeInit+0xbc>
 8001e6a:	2305      	movs	r3, #5
 8001e6c:	e008      	b.n	8001e80 <HAL_GPIO_DeInit+0xbc>
 8001e6e:	2304      	movs	r3, #4
 8001e70:	e006      	b.n	8001e80 <HAL_GPIO_DeInit+0xbc>
 8001e72:	2303      	movs	r3, #3
 8001e74:	e004      	b.n	8001e80 <HAL_GPIO_DeInit+0xbc>
 8001e76:	2302      	movs	r3, #2
 8001e78:	e002      	b.n	8001e80 <HAL_GPIO_DeInit+0xbc>
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e000      	b.n	8001e80 <HAL_GPIO_DeInit+0xbc>
 8001e7e:	2300      	movs	r3, #0
 8001e80:	697a      	ldr	r2, [r7, #20]
 8001e82:	f002 0203 	and.w	r2, r2, #3
 8001e86:	0092      	lsls	r2, r2, #2
 8001e88:	4093      	lsls	r3, r2
 8001e8a:	68ba      	ldr	r2, [r7, #8]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d132      	bne.n	8001ef6 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001e90:	4b49      	ldr	r3, [pc, #292]	; (8001fb8 <HAL_GPIO_DeInit+0x1f4>)
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	43db      	mvns	r3, r3
 8001e98:	4947      	ldr	r1, [pc, #284]	; (8001fb8 <HAL_GPIO_DeInit+0x1f4>)
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001e9e:	4b46      	ldr	r3, [pc, #280]	; (8001fb8 <HAL_GPIO_DeInit+0x1f4>)
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	4944      	ldr	r1, [pc, #272]	; (8001fb8 <HAL_GPIO_DeInit+0x1f4>)
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001eac:	4b42      	ldr	r3, [pc, #264]	; (8001fb8 <HAL_GPIO_DeInit+0x1f4>)
 8001eae:	68da      	ldr	r2, [r3, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	4940      	ldr	r1, [pc, #256]	; (8001fb8 <HAL_GPIO_DeInit+0x1f4>)
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001eba:	4b3f      	ldr	r3, [pc, #252]	; (8001fb8 <HAL_GPIO_DeInit+0x1f4>)
 8001ebc:	689a      	ldr	r2, [r3, #8]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	493d      	ldr	r1, [pc, #244]	; (8001fb8 <HAL_GPIO_DeInit+0x1f4>)
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	f003 0303 	and.w	r3, r3, #3
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	220f      	movs	r2, #15
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001ed8:	4a2e      	ldr	r2, [pc, #184]	; (8001f94 <HAL_GPIO_DeInit+0x1d0>)
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	089b      	lsrs	r3, r3, #2
 8001ede:	3302      	adds	r3, #2
 8001ee0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	43da      	mvns	r2, r3
 8001ee8:	482a      	ldr	r0, [pc, #168]	; (8001f94 <HAL_GPIO_DeInit+0x1d0>)
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	089b      	lsrs	r3, r3, #2
 8001eee:	400a      	ands	r2, r1
 8001ef0:	3302      	adds	r3, #2
 8001ef2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	2103      	movs	r1, #3
 8001f00:	fa01 f303 	lsl.w	r3, r1, r3
 8001f04:	43db      	mvns	r3, r3
 8001f06:	401a      	ands	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	08da      	lsrs	r2, r3, #3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3208      	adds	r2, #8
 8001f14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	220f      	movs	r2, #15
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	43db      	mvns	r3, r3
 8001f28:	697a      	ldr	r2, [r7, #20]
 8001f2a:	08d2      	lsrs	r2, r2, #3
 8001f2c:	4019      	ands	r1, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	3208      	adds	r2, #8
 8001f32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	68da      	ldr	r2, [r3, #12]
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	2103      	movs	r1, #3
 8001f40:	fa01 f303 	lsl.w	r3, r1, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	401a      	ands	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	2101      	movs	r1, #1
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	fa01 f303 	lsl.w	r3, r1, r3
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	401a      	ands	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689a      	ldr	r2, [r3, #8]
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	2103      	movs	r1, #3
 8001f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	401a      	ands	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	617b      	str	r3, [r7, #20]
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	2b0f      	cmp	r3, #15
 8001f80:	f67f af2e 	bls.w	8001de0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001f84:	bf00      	nop
 8001f86:	bf00      	nop
 8001f88:	371c      	adds	r7, #28
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	40013800 	.word	0x40013800
 8001f98:	40020000 	.word	0x40020000
 8001f9c:	40020400 	.word	0x40020400
 8001fa0:	40020800 	.word	0x40020800
 8001fa4:	40020c00 	.word	0x40020c00
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	40021400 	.word	0x40021400
 8001fb0:	40021800 	.word	0x40021800
 8001fb4:	40021c00 	.word	0x40021c00
 8001fb8:	40013c00 	.word	0x40013c00

08001fbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	807b      	strh	r3, [r7, #2]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fcc:	787b      	ldrb	r3, [r7, #1]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fd2:	887a      	ldrh	r2, [r7, #2]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fd8:	e003      	b.n	8001fe2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fda:	887b      	ldrh	r3, [r7, #2]
 8001fdc:	041a      	lsls	r2, r3, #16
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	619a      	str	r2, [r3, #24]
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
	...

08001ff0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001ffa:	4b08      	ldr	r3, [pc, #32]	; (800201c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ffc:	695a      	ldr	r2, [r3, #20]
 8001ffe:	88fb      	ldrh	r3, [r7, #6]
 8002000:	4013      	ands	r3, r2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d006      	beq.n	8002014 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002006:	4a05      	ldr	r2, [pc, #20]	; (800201c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002008:	88fb      	ldrh	r3, [r7, #6]
 800200a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800200c:	88fb      	ldrh	r3, [r7, #6]
 800200e:	4618      	mov	r0, r3
 8002010:	f7fe fdf4 	bl	8000bfc <HAL_GPIO_EXTI_Callback>
  }
}
 8002014:	bf00      	nop
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40013c00 	.word	0x40013c00

08002020 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002022:	b08f      	sub	sp, #60	; 0x3c
 8002024:	af0a      	add	r7, sp, #40	; 0x28
 8002026:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e10f      	b.n	8002252 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800203e:	b2db      	uxtb	r3, r3
 8002040:	2b00      	cmp	r3, #0
 8002042:	d106      	bne.n	8002052 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f005 fc9d 	bl	800798c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2203      	movs	r2, #3
 8002056:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800205e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002062:	2b00      	cmp	r3, #0
 8002064:	d102      	bne.n	800206c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4618      	mov	r0, r3
 8002072:	f002 faec 	bl	800464e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	603b      	str	r3, [r7, #0]
 800207c:	687e      	ldr	r6, [r7, #4]
 800207e:	466d      	mov	r5, sp
 8002080:	f106 0410 	add.w	r4, r6, #16
 8002084:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002086:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002088:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800208a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800208c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002090:	e885 0003 	stmia.w	r5, {r0, r1}
 8002094:	1d33      	adds	r3, r6, #4
 8002096:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002098:	6838      	ldr	r0, [r7, #0]
 800209a:	f002 f9c3 	bl	8004424 <USB_CoreInit>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d005      	beq.n	80020b0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2202      	movs	r2, #2
 80020a8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e0d0      	b.n	8002252 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2100      	movs	r1, #0
 80020b6:	4618      	mov	r0, r3
 80020b8:	f002 fada 	bl	8004670 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020bc:	2300      	movs	r3, #0
 80020be:	73fb      	strb	r3, [r7, #15]
 80020c0:	e04a      	b.n	8002158 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020c2:	7bfa      	ldrb	r2, [r7, #15]
 80020c4:	6879      	ldr	r1, [r7, #4]
 80020c6:	4613      	mov	r3, r2
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	4413      	add	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	440b      	add	r3, r1
 80020d0:	333d      	adds	r3, #61	; 0x3d
 80020d2:	2201      	movs	r2, #1
 80020d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020d6:	7bfa      	ldrb	r2, [r7, #15]
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	4613      	mov	r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	4413      	add	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	440b      	add	r3, r1
 80020e4:	333c      	adds	r3, #60	; 0x3c
 80020e6:	7bfa      	ldrb	r2, [r7, #15]
 80020e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80020ea:	7bfa      	ldrb	r2, [r7, #15]
 80020ec:	7bfb      	ldrb	r3, [r7, #15]
 80020ee:	b298      	uxth	r0, r3
 80020f0:	6879      	ldr	r1, [r7, #4]
 80020f2:	4613      	mov	r3, r2
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	4413      	add	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	440b      	add	r3, r1
 80020fc:	3344      	adds	r3, #68	; 0x44
 80020fe:	4602      	mov	r2, r0
 8002100:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002102:	7bfa      	ldrb	r2, [r7, #15]
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	4613      	mov	r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	4413      	add	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	440b      	add	r3, r1
 8002110:	3340      	adds	r3, #64	; 0x40
 8002112:	2200      	movs	r2, #0
 8002114:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002116:	7bfa      	ldrb	r2, [r7, #15]
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	4613      	mov	r3, r2
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	4413      	add	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	440b      	add	r3, r1
 8002124:	3348      	adds	r3, #72	; 0x48
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800212a:	7bfa      	ldrb	r2, [r7, #15]
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	4413      	add	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	440b      	add	r3, r1
 8002138:	334c      	adds	r3, #76	; 0x4c
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800213e:	7bfa      	ldrb	r2, [r7, #15]
 8002140:	6879      	ldr	r1, [r7, #4]
 8002142:	4613      	mov	r3, r2
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	4413      	add	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	440b      	add	r3, r1
 800214c:	3354      	adds	r3, #84	; 0x54
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002152:	7bfb      	ldrb	r3, [r7, #15]
 8002154:	3301      	adds	r3, #1
 8002156:	73fb      	strb	r3, [r7, #15]
 8002158:	7bfa      	ldrb	r2, [r7, #15]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	429a      	cmp	r2, r3
 8002160:	d3af      	bcc.n	80020c2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002162:	2300      	movs	r3, #0
 8002164:	73fb      	strb	r3, [r7, #15]
 8002166:	e044      	b.n	80021f2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002168:	7bfa      	ldrb	r2, [r7, #15]
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	4613      	mov	r3, r2
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	4413      	add	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	440b      	add	r3, r1
 8002176:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800217a:	2200      	movs	r2, #0
 800217c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800217e:	7bfa      	ldrb	r2, [r7, #15]
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	4613      	mov	r3, r2
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	4413      	add	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	440b      	add	r3, r1
 800218c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002190:	7bfa      	ldrb	r2, [r7, #15]
 8002192:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002194:	7bfa      	ldrb	r2, [r7, #15]
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	4613      	mov	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	4413      	add	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	440b      	add	r3, r1
 80021a2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80021a6:	2200      	movs	r2, #0
 80021a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021aa:	7bfa      	ldrb	r2, [r7, #15]
 80021ac:	6879      	ldr	r1, [r7, #4]
 80021ae:	4613      	mov	r3, r2
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	4413      	add	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	440b      	add	r3, r1
 80021b8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021c0:	7bfa      	ldrb	r2, [r7, #15]
 80021c2:	6879      	ldr	r1, [r7, #4]
 80021c4:	4613      	mov	r3, r2
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	4413      	add	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	440b      	add	r3, r1
 80021ce:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021d6:	7bfa      	ldrb	r2, [r7, #15]
 80021d8:	6879      	ldr	r1, [r7, #4]
 80021da:	4613      	mov	r3, r2
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	4413      	add	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	440b      	add	r3, r1
 80021e4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021ec:	7bfb      	ldrb	r3, [r7, #15]
 80021ee:	3301      	adds	r3, #1
 80021f0:	73fb      	strb	r3, [r7, #15]
 80021f2:	7bfa      	ldrb	r2, [r7, #15]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d3b5      	bcc.n	8002168 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	603b      	str	r3, [r7, #0]
 8002202:	687e      	ldr	r6, [r7, #4]
 8002204:	466d      	mov	r5, sp
 8002206:	f106 0410 	add.w	r4, r6, #16
 800220a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800220c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800220e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002210:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002212:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002216:	e885 0003 	stmia.w	r5, {r0, r1}
 800221a:	1d33      	adds	r3, r6, #4
 800221c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800221e:	6838      	ldr	r0, [r7, #0]
 8002220:	f002 fa72 	bl	8004708 <USB_DevInit>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d005      	beq.n	8002236 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2202      	movs	r2, #2
 800222e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e00d      	b.n	8002252 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f003 fbc1 	bl	80059d2 <USB_DevDisconnect>

  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800225a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b084      	sub	sp, #16
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800226e:	2b01      	cmp	r3, #1
 8002270:	d101      	bne.n	8002276 <HAL_PCD_Start+0x1c>
 8002272:	2302      	movs	r3, #2
 8002274:	e020      	b.n	80022b8 <HAL_PCD_Start+0x5e>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2201      	movs	r2, #1
 800227a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002282:	2b01      	cmp	r3, #1
 8002284:	d109      	bne.n	800229a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800228a:	2b01      	cmp	r3, #1
 800228c:	d005      	beq.n	800229a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002292:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4618      	mov	r0, r3
 80022a0:	f002 f9c4 	bl	800462c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f003 fb71 	bl	8005990 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3710      	adds	r7, #16
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80022c0:	b590      	push	{r4, r7, lr}
 80022c2:	b08d      	sub	sp, #52	; 0x34
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022ce:	6a3b      	ldr	r3, [r7, #32]
 80022d0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f003 fc2f 	bl	8005b3a <USB_GetMode>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f040 848a 	bne.w	8002bf8 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f003 fb93 	bl	8005a14 <USB_ReadInterrupts>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f000 8480 	beq.w	8002bf6 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	0a1b      	lsrs	r3, r3, #8
 8002300:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	f003 fb80 	bl	8005a14 <USB_ReadInterrupts>
 8002314:	4603      	mov	r3, r0
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b02      	cmp	r3, #2
 800231c:	d107      	bne.n	800232e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	695a      	ldr	r2, [r3, #20]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f002 0202 	and.w	r2, r2, #2
 800232c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f003 fb6e 	bl	8005a14 <USB_ReadInterrupts>
 8002338:	4603      	mov	r3, r0
 800233a:	f003 0310 	and.w	r3, r3, #16
 800233e:	2b10      	cmp	r3, #16
 8002340:	d161      	bne.n	8002406 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	699a      	ldr	r2, [r3, #24]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 0210 	bic.w	r2, r2, #16
 8002350:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002352:	6a3b      	ldr	r3, [r7, #32]
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	f003 020f 	and.w	r2, r3, #15
 800235e:	4613      	mov	r3, r2
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	4413      	add	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	4413      	add	r3, r2
 800236e:	3304      	adds	r3, #4
 8002370:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	0c5b      	lsrs	r3, r3, #17
 8002376:	f003 030f 	and.w	r3, r3, #15
 800237a:	2b02      	cmp	r3, #2
 800237c:	d124      	bne.n	80023c8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002384:	4013      	ands	r3, r2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d035      	beq.n	80023f6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	091b      	lsrs	r3, r3, #4
 8002392:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002394:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002398:	b29b      	uxth	r3, r3
 800239a:	461a      	mov	r2, r3
 800239c:	6a38      	ldr	r0, [r7, #32]
 800239e:	f003 f9a5 	bl	80056ec <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	691a      	ldr	r2, [r3, #16]
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	091b      	lsrs	r3, r3, #4
 80023aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023ae:	441a      	add	r2, r3
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	6a1a      	ldr	r2, [r3, #32]
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	091b      	lsrs	r3, r3, #4
 80023bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023c0:	441a      	add	r2, r3
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	621a      	str	r2, [r3, #32]
 80023c6:	e016      	b.n	80023f6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	0c5b      	lsrs	r3, r3, #17
 80023cc:	f003 030f 	and.w	r3, r3, #15
 80023d0:	2b06      	cmp	r3, #6
 80023d2:	d110      	bne.n	80023f6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80023da:	2208      	movs	r2, #8
 80023dc:	4619      	mov	r1, r3
 80023de:	6a38      	ldr	r0, [r7, #32]
 80023e0:	f003 f984 	bl	80056ec <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	6a1a      	ldr	r2, [r3, #32]
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	091b      	lsrs	r3, r3, #4
 80023ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023f0:	441a      	add	r2, r3
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	699a      	ldr	r2, [r3, #24]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f042 0210 	orr.w	r2, r2, #16
 8002404:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f003 fb02 	bl	8005a14 <USB_ReadInterrupts>
 8002410:	4603      	mov	r3, r0
 8002412:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002416:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800241a:	f040 80a7 	bne.w	800256c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800241e:	2300      	movs	r3, #0
 8002420:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f003 fb07 	bl	8005a3a <USB_ReadDevAllOutEpInterrupt>
 800242c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800242e:	e099      	b.n	8002564 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b00      	cmp	r3, #0
 8002438:	f000 808e 	beq.w	8002558 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002442:	b2d2      	uxtb	r2, r2
 8002444:	4611      	mov	r1, r2
 8002446:	4618      	mov	r0, r3
 8002448:	f003 fb2b 	bl	8005aa2 <USB_ReadDevOutEPInterrupt>
 800244c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00c      	beq.n	8002472 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245a:	015a      	lsls	r2, r3, #5
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	4413      	add	r3, r2
 8002460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002464:	461a      	mov	r2, r3
 8002466:	2301      	movs	r3, #1
 8002468:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800246a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f000 feab 	bl	80031c8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	f003 0308 	and.w	r3, r3, #8
 8002478:	2b00      	cmp	r3, #0
 800247a:	d00c      	beq.n	8002496 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	015a      	lsls	r2, r3, #5
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	4413      	add	r3, r2
 8002484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002488:	461a      	mov	r2, r3
 800248a:	2308      	movs	r3, #8
 800248c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800248e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 ff81 	bl	8003398 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	f003 0310 	and.w	r3, r3, #16
 800249c:	2b00      	cmp	r3, #0
 800249e:	d008      	beq.n	80024b2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80024a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a2:	015a      	lsls	r2, r3, #5
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	4413      	add	r3, r2
 80024a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024ac:	461a      	mov	r2, r3
 80024ae:	2310      	movs	r3, #16
 80024b0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d030      	beq.n	800251e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80024bc:	6a3b      	ldr	r3, [r7, #32]
 80024be:	695b      	ldr	r3, [r3, #20]
 80024c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c4:	2b80      	cmp	r3, #128	; 0x80
 80024c6:	d109      	bne.n	80024dc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	69fa      	ldr	r2, [r7, #28]
 80024d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024da:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80024dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024de:	4613      	mov	r3, r2
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	4413      	add	r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	4413      	add	r3, r2
 80024ee:	3304      	adds	r3, #4
 80024f0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	78db      	ldrb	r3, [r3, #3]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d108      	bne.n	800250c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	2200      	movs	r2, #0
 80024fe:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002502:	b2db      	uxtb	r3, r3
 8002504:	4619      	mov	r1, r3
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f005 fb98 	bl	8007c3c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800250c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250e:	015a      	lsls	r2, r3, #5
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	4413      	add	r3, r2
 8002514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002518:	461a      	mov	r2, r3
 800251a:	2302      	movs	r3, #2
 800251c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	f003 0320 	and.w	r3, r3, #32
 8002524:	2b00      	cmp	r3, #0
 8002526:	d008      	beq.n	800253a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252a:	015a      	lsls	r2, r3, #5
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	4413      	add	r3, r2
 8002530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002534:	461a      	mov	r2, r3
 8002536:	2320      	movs	r3, #32
 8002538:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d009      	beq.n	8002558 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	015a      	lsls	r2, r3, #5
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	4413      	add	r3, r2
 800254c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002550:	461a      	mov	r2, r3
 8002552:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002556:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255a:	3301      	adds	r3, #1
 800255c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800255e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002560:	085b      	lsrs	r3, r3, #1
 8002562:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002566:	2b00      	cmp	r3, #0
 8002568:	f47f af62 	bne.w	8002430 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f003 fa4f 	bl	8005a14 <USB_ReadInterrupts>
 8002576:	4603      	mov	r3, r0
 8002578:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800257c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002580:	f040 80db 	bne.w	800273a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4618      	mov	r0, r3
 800258a:	f003 fa70 	bl	8005a6e <USB_ReadDevAllInEpInterrupt>
 800258e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002590:	2300      	movs	r3, #0
 8002592:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002594:	e0cd      	b.n	8002732 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 80c2 	beq.w	8002726 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025a8:	b2d2      	uxtb	r2, r2
 80025aa:	4611      	mov	r1, r2
 80025ac:	4618      	mov	r0, r3
 80025ae:	f003 fa96 	bl	8005ade <USB_ReadDevInEPInterrupt>
 80025b2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d057      	beq.n	800266e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	f003 030f 	and.w	r3, r3, #15
 80025c4:	2201      	movs	r2, #1
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	43db      	mvns	r3, r3
 80025d8:	69f9      	ldr	r1, [r7, #28]
 80025da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80025de:	4013      	ands	r3, r2
 80025e0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	015a      	lsls	r2, r3, #5
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	4413      	add	r3, r2
 80025ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025ee:	461a      	mov	r2, r3
 80025f0:	2301      	movs	r3, #1
 80025f2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d132      	bne.n	8002662 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80025fc:	6879      	ldr	r1, [r7, #4]
 80025fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002600:	4613      	mov	r3, r2
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	4413      	add	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	440b      	add	r3, r1
 800260a:	334c      	adds	r3, #76	; 0x4c
 800260c:	6819      	ldr	r1, [r3, #0]
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002612:	4613      	mov	r3, r2
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	4413      	add	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4403      	add	r3, r0
 800261c:	3348      	adds	r3, #72	; 0x48
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4419      	add	r1, r3
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002626:	4613      	mov	r3, r2
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	4413      	add	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4403      	add	r3, r0
 8002630:	334c      	adds	r3, #76	; 0x4c
 8002632:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002636:	2b00      	cmp	r3, #0
 8002638:	d113      	bne.n	8002662 <HAL_PCD_IRQHandler+0x3a2>
 800263a:	6879      	ldr	r1, [r7, #4]
 800263c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800263e:	4613      	mov	r3, r2
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	4413      	add	r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	440b      	add	r3, r1
 8002648:	3354      	adds	r3, #84	; 0x54
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d108      	bne.n	8002662 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6818      	ldr	r0, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800265a:	461a      	mov	r2, r3
 800265c:	2101      	movs	r1, #1
 800265e:	f003 fa9d 	bl	8005b9c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	b2db      	uxtb	r3, r3
 8002666:	4619      	mov	r1, r3
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f005 fa62 	bl	8007b32 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	f003 0308 	and.w	r3, r3, #8
 8002674:	2b00      	cmp	r3, #0
 8002676:	d008      	beq.n	800268a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267a:	015a      	lsls	r2, r3, #5
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	4413      	add	r3, r2
 8002680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002684:	461a      	mov	r2, r3
 8002686:	2308      	movs	r3, #8
 8002688:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	f003 0310 	and.w	r3, r3, #16
 8002690:	2b00      	cmp	r3, #0
 8002692:	d008      	beq.n	80026a6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	015a      	lsls	r2, r3, #5
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	4413      	add	r3, r2
 800269c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026a0:	461a      	mov	r2, r3
 80026a2:	2310      	movs	r3, #16
 80026a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d008      	beq.n	80026c2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80026b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b2:	015a      	lsls	r2, r3, #5
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	4413      	add	r3, r2
 80026b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026bc:	461a      	mov	r2, r3
 80026be:	2340      	movs	r3, #64	; 0x40
 80026c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d023      	beq.n	8002714 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80026cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026ce:	6a38      	ldr	r0, [r7, #32]
 80026d0:	f002 f97e 	bl	80049d0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80026d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026d6:	4613      	mov	r3, r2
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	4413      	add	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	3338      	adds	r3, #56	; 0x38
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	4413      	add	r3, r2
 80026e4:	3304      	adds	r3, #4
 80026e6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	78db      	ldrb	r3, [r3, #3]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d108      	bne.n	8002702 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	2200      	movs	r2, #0
 80026f4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80026f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	4619      	mov	r1, r3
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f005 faaf 	bl	8007c60 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	015a      	lsls	r2, r3, #5
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	4413      	add	r3, r2
 800270a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800270e:	461a      	mov	r2, r3
 8002710:	2302      	movs	r3, #2
 8002712:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800271a:	2b00      	cmp	r3, #0
 800271c:	d003      	beq.n	8002726 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800271e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f000 fcc3 	bl	80030ac <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002728:	3301      	adds	r3, #1
 800272a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800272c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272e:	085b      	lsrs	r3, r3, #1
 8002730:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002734:	2b00      	cmp	r3, #0
 8002736:	f47f af2e 	bne.w	8002596 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4618      	mov	r0, r3
 8002740:	f003 f968 	bl	8005a14 <USB_ReadInterrupts>
 8002744:	4603      	mov	r3, r0
 8002746:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800274a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800274e:	d122      	bne.n	8002796 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	69fa      	ldr	r2, [r7, #28]
 800275a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800275e:	f023 0301 	bic.w	r3, r3, #1
 8002762:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800276a:	2b01      	cmp	r3, #1
 800276c:	d108      	bne.n	8002780 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002776:	2100      	movs	r1, #0
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f000 feab 	bl	80034d4 <HAL_PCDEx_LPM_Callback>
 800277e:	e002      	b.n	8002786 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f005 fa4d 	bl	8007c20 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	695a      	ldr	r2, [r3, #20]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002794:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f003 f93a 	bl	8005a14 <USB_ReadInterrupts>
 80027a0:	4603      	mov	r3, r0
 80027a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027aa:	d112      	bne.n	80027d2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d102      	bne.n	80027c2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f005 fa09 	bl	8007bd4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	695a      	ldr	r2, [r3, #20]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80027d0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f003 f91c 	bl	8005a14 <USB_ReadInterrupts>
 80027dc:	4603      	mov	r3, r0
 80027de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027e6:	f040 80b7 	bne.w	8002958 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	69fa      	ldr	r2, [r7, #28]
 80027f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027f8:	f023 0301 	bic.w	r3, r3, #1
 80027fc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2110      	movs	r1, #16
 8002804:	4618      	mov	r0, r3
 8002806:	f002 f8e3 	bl	80049d0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800280a:	2300      	movs	r3, #0
 800280c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800280e:	e046      	b.n	800289e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002812:	015a      	lsls	r2, r3, #5
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	4413      	add	r3, r2
 8002818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800281c:	461a      	mov	r2, r3
 800281e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002822:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002826:	015a      	lsls	r2, r3, #5
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	4413      	add	r3, r2
 800282c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002834:	0151      	lsls	r1, r2, #5
 8002836:	69fa      	ldr	r2, [r7, #28]
 8002838:	440a      	add	r2, r1
 800283a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800283e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002842:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002846:	015a      	lsls	r2, r3, #5
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	4413      	add	r3, r2
 800284c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002850:	461a      	mov	r2, r3
 8002852:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002856:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800285a:	015a      	lsls	r2, r3, #5
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	4413      	add	r3, r2
 8002860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002868:	0151      	lsls	r1, r2, #5
 800286a:	69fa      	ldr	r2, [r7, #28]
 800286c:	440a      	add	r2, r1
 800286e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002872:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002876:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287a:	015a      	lsls	r2, r3, #5
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	4413      	add	r3, r2
 8002880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002888:	0151      	lsls	r1, r2, #5
 800288a:	69fa      	ldr	r2, [r7, #28]
 800288c:	440a      	add	r2, r1
 800288e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002892:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002896:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800289a:	3301      	adds	r3, #1
 800289c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d3b3      	bcc.n	8002810 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028ae:	69db      	ldr	r3, [r3, #28]
 80028b0:	69fa      	ldr	r2, [r7, #28]
 80028b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028b6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80028ba:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d016      	beq.n	80028f2 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028ce:	69fa      	ldr	r2, [r7, #28]
 80028d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028d4:	f043 030b 	orr.w	r3, r3, #11
 80028d8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e4:	69fa      	ldr	r2, [r7, #28]
 80028e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028ea:	f043 030b 	orr.w	r3, r3, #11
 80028ee:	6453      	str	r3, [r2, #68]	; 0x44
 80028f0:	e015      	b.n	800291e <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	69fa      	ldr	r2, [r7, #28]
 80028fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002900:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002904:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002908:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	69fa      	ldr	r2, [r7, #28]
 8002914:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002918:	f043 030b 	orr.w	r3, r3, #11
 800291c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	69fa      	ldr	r2, [r7, #28]
 8002928:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800292c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002930:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6818      	ldr	r0, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002942:	461a      	mov	r2, r3
 8002944:	f003 f92a 	bl	8005b9c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	695a      	ldr	r2, [r3, #20]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002956:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	f003 f859 	bl	8005a14 <USB_ReadInterrupts>
 8002962:	4603      	mov	r3, r0
 8002964:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002968:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800296c:	d124      	bne.n	80029b8 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	f003 f8ef 	bl	8005b56 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4618      	mov	r0, r3
 800297e:	f002 f8a4 	bl	8004aca <USB_GetDevSpeed>
 8002982:	4603      	mov	r3, r0
 8002984:	461a      	mov	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681c      	ldr	r4, [r3, #0]
 800298e:	f001 fa11 	bl	8003db4 <HAL_RCC_GetHCLKFreq>
 8002992:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002998:	b2db      	uxtb	r3, r3
 800299a:	461a      	mov	r2, r3
 800299c:	4620      	mov	r0, r4
 800299e:	f001 fda3 	bl	80044e8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f005 f8ed 	bl	8007b82 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	695a      	ldr	r2, [r3, #20]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80029b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4618      	mov	r0, r3
 80029be:	f003 f829 	bl	8005a14 <USB_ReadInterrupts>
 80029c2:	4603      	mov	r3, r0
 80029c4:	f003 0308 	and.w	r3, r3, #8
 80029c8:	2b08      	cmp	r3, #8
 80029ca:	d10a      	bne.n	80029e2 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f005 f8ca 	bl	8007b66 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	695a      	ldr	r2, [r3, #20]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f002 0208 	and.w	r2, r2, #8
 80029e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f003 f814 	bl	8005a14 <USB_ReadInterrupts>
 80029ec:	4603      	mov	r3, r0
 80029ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f2:	2b80      	cmp	r3, #128	; 0x80
 80029f4:	d122      	bne.n	8002a3c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80029f6:	6a3b      	ldr	r3, [r7, #32]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029fe:	6a3b      	ldr	r3, [r7, #32]
 8002a00:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a02:	2301      	movs	r3, #1
 8002a04:	627b      	str	r3, [r7, #36]	; 0x24
 8002a06:	e014      	b.n	8002a32 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	4413      	add	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	440b      	add	r3, r1
 8002a16:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d105      	bne.n	8002a2c <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	4619      	mov	r1, r3
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 fb0f 	bl	800304a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2e:	3301      	adds	r3, #1
 8002a30:	627b      	str	r3, [r7, #36]	; 0x24
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d3e5      	bcc.n	8002a08 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f002 ffe7 	bl	8005a14 <USB_ReadInterrupts>
 8002a46:	4603      	mov	r3, r0
 8002a48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a50:	d13b      	bne.n	8002aca <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a52:	2301      	movs	r3, #1
 8002a54:	627b      	str	r3, [r7, #36]	; 0x24
 8002a56:	e02b      	b.n	8002ab0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5a:	015a      	lsls	r2, r3, #5
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	4413      	add	r3, r2
 8002a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a68:	6879      	ldr	r1, [r7, #4]
 8002a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	4413      	add	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	440b      	add	r3, r1
 8002a76:	3340      	adds	r3, #64	; 0x40
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d115      	bne.n	8002aaa <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002a7e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	da12      	bge.n	8002aaa <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002a84:	6879      	ldr	r1, [r7, #4]
 8002a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a88:	4613      	mov	r3, r2
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	4413      	add	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	440b      	add	r3, r1
 8002a92:	333f      	adds	r3, #63	; 0x3f
 8002a94:	2201      	movs	r2, #1
 8002a96:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 fad0 	bl	800304a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aac:	3301      	adds	r3, #1
 8002aae:	627b      	str	r3, [r7, #36]	; 0x24
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d3ce      	bcc.n	8002a58 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	695a      	ldr	r2, [r3, #20]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002ac8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f002 ffa0 	bl	8005a14 <USB_ReadInterrupts>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ada:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ade:	d155      	bne.n	8002b8c <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ae4:	e045      	b.n	8002b72 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	015a      	lsls	r2, r3, #5
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	4413      	add	r3, r2
 8002aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002afa:	4613      	mov	r3, r2
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	4413      	add	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	440b      	add	r3, r1
 8002b04:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d12e      	bne.n	8002b6c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002b0e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	da2b      	bge.n	8002b6c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002b20:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d121      	bne.n	8002b6c <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002b28:	6879      	ldr	r1, [r7, #4]
 8002b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	4413      	add	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	440b      	add	r3, r1
 8002b36:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002b3e:	6a3b      	ldr	r3, [r7, #32]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002b46:	6a3b      	ldr	r3, [r7, #32]
 8002b48:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002b4a:	6a3b      	ldr	r3, [r7, #32]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10a      	bne.n	8002b6c <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	69fa      	ldr	r2, [r7, #28]
 8002b60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b68:	6053      	str	r3, [r2, #4]
            break;
 8002b6a:	e007      	b.n	8002b7c <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6e:	3301      	adds	r3, #1
 8002b70:	627b      	str	r3, [r7, #36]	; 0x24
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d3b4      	bcc.n	8002ae6 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	695a      	ldr	r2, [r3, #20]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002b8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f002 ff3f 	bl	8005a14 <USB_ReadInterrupts>
 8002b96:	4603      	mov	r3, r0
 8002b98:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ba0:	d10a      	bne.n	8002bb8 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f005 f86e 	bl	8007c84 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	695a      	ldr	r2, [r3, #20]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002bb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f002 ff29 	bl	8005a14 <USB_ReadInterrupts>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	f003 0304 	and.w	r3, r3, #4
 8002bc8:	2b04      	cmp	r3, #4
 8002bca:	d115      	bne.n	8002bf8 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	f003 0304 	and.w	r3, r3, #4
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d002      	beq.n	8002be4 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f005 f85e 	bl	8007ca0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6859      	ldr	r1, [r3, #4]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	605a      	str	r2, [r3, #4]
 8002bf4:	e000      	b.n	8002bf8 <HAL_PCD_IRQHandler+0x938>
      return;
 8002bf6:	bf00      	nop
    }
  }
}
 8002bf8:	3734      	adds	r7, #52	; 0x34
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd90      	pop	{r4, r7, pc}

08002bfe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b082      	sub	sp, #8
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
 8002c06:	460b      	mov	r3, r1
 8002c08:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d101      	bne.n	8002c18 <HAL_PCD_SetAddress+0x1a>
 8002c14:	2302      	movs	r3, #2
 8002c16:	e013      	b.n	8002c40 <HAL_PCD_SetAddress+0x42>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	78fa      	ldrb	r2, [r7, #3]
 8002c24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	78fa      	ldrb	r2, [r7, #3]
 8002c2e:	4611      	mov	r1, r2
 8002c30:	4618      	mov	r0, r3
 8002c32:	f002 fe87 	bl	8005944 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3708      	adds	r7, #8
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	4608      	mov	r0, r1
 8002c52:	4611      	mov	r1, r2
 8002c54:	461a      	mov	r2, r3
 8002c56:	4603      	mov	r3, r0
 8002c58:	70fb      	strb	r3, [r7, #3]
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	803b      	strh	r3, [r7, #0]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002c62:	2300      	movs	r3, #0
 8002c64:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	da0f      	bge.n	8002c8e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c6e:	78fb      	ldrb	r3, [r7, #3]
 8002c70:	f003 020f 	and.w	r2, r3, #15
 8002c74:	4613      	mov	r3, r2
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	4413      	add	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	3338      	adds	r3, #56	; 0x38
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	4413      	add	r3, r2
 8002c82:	3304      	adds	r3, #4
 8002c84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	705a      	strb	r2, [r3, #1]
 8002c8c:	e00f      	b.n	8002cae <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c8e:	78fb      	ldrb	r3, [r7, #3]
 8002c90:	f003 020f 	and.w	r2, r3, #15
 8002c94:	4613      	mov	r3, r2
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	4413      	add	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	3304      	adds	r3, #4
 8002ca6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002cae:	78fb      	ldrb	r3, [r7, #3]
 8002cb0:	f003 030f 	and.w	r3, r3, #15
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002cba:	883a      	ldrh	r2, [r7, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	78ba      	ldrb	r2, [r7, #2]
 8002cc4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	785b      	ldrb	r3, [r3, #1]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d004      	beq.n	8002cd8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002cd8:	78bb      	ldrb	r3, [r7, #2]
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d102      	bne.n	8002ce4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d101      	bne.n	8002cf2 <HAL_PCD_EP_Open+0xaa>
 8002cee:	2302      	movs	r3, #2
 8002cf0:	e00e      	b.n	8002d10 <HAL_PCD_EP_Open+0xc8>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68f9      	ldr	r1, [r7, #12]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f001 ff07 	bl	8004b14 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002d0e:	7afb      	ldrb	r3, [r7, #11]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3710      	adds	r7, #16
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	460b      	mov	r3, r1
 8002d22:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	da0f      	bge.n	8002d4c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d2c:	78fb      	ldrb	r3, [r7, #3]
 8002d2e:	f003 020f 	and.w	r2, r3, #15
 8002d32:	4613      	mov	r3, r2
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	4413      	add	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	3338      	adds	r3, #56	; 0x38
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	4413      	add	r3, r2
 8002d40:	3304      	adds	r3, #4
 8002d42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2201      	movs	r2, #1
 8002d48:	705a      	strb	r2, [r3, #1]
 8002d4a:	e00f      	b.n	8002d6c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d4c:	78fb      	ldrb	r3, [r7, #3]
 8002d4e:	f003 020f 	and.w	r2, r3, #15
 8002d52:	4613      	mov	r3, r2
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	4413      	add	r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	4413      	add	r3, r2
 8002d62:	3304      	adds	r3, #4
 8002d64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002d6c:	78fb      	ldrb	r3, [r7, #3]
 8002d6e:	f003 030f 	and.w	r3, r3, #15
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d101      	bne.n	8002d86 <HAL_PCD_EP_Close+0x6e>
 8002d82:	2302      	movs	r3, #2
 8002d84:	e00e      	b.n	8002da4 <HAL_PCD_EP_Close+0x8c>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68f9      	ldr	r1, [r7, #12]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f001 ff45 	bl	8004c24 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3710      	adds	r7, #16
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	607a      	str	r2, [r7, #4]
 8002db6:	603b      	str	r3, [r7, #0]
 8002db8:	460b      	mov	r3, r1
 8002dba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dbc:	7afb      	ldrb	r3, [r7, #11]
 8002dbe:	f003 020f 	and.w	r2, r3, #15
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	00db      	lsls	r3, r3, #3
 8002dc6:	4413      	add	r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	3304      	adds	r3, #4
 8002dd4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	2200      	movs	r2, #0
 8002de6:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	2200      	movs	r2, #0
 8002dec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dee:	7afb      	ldrb	r3, [r7, #11]
 8002df0:	f003 030f 	and.w	r3, r3, #15
 8002df4:	b2da      	uxtb	r2, r3
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d102      	bne.n	8002e08 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e08:	7afb      	ldrb	r3, [r7, #11]
 8002e0a:	f003 030f 	and.w	r3, r3, #15
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d109      	bne.n	8002e26 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6818      	ldr	r0, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	6979      	ldr	r1, [r7, #20]
 8002e20:	f002 fa24 	bl	800526c <USB_EP0StartXfer>
 8002e24:	e008      	b.n	8002e38 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6818      	ldr	r0, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	461a      	mov	r2, r3
 8002e32:	6979      	ldr	r1, [r7, #20]
 8002e34:	f001 ffd2 	bl	8004ddc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3718      	adds	r7, #24
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b086      	sub	sp, #24
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	60f8      	str	r0, [r7, #12]
 8002e4a:	607a      	str	r2, [r7, #4]
 8002e4c:	603b      	str	r3, [r7, #0]
 8002e4e:	460b      	mov	r3, r1
 8002e50:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e52:	7afb      	ldrb	r3, [r7, #11]
 8002e54:	f003 020f 	and.w	r2, r3, #15
 8002e58:	4613      	mov	r3, r2
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	4413      	add	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	3338      	adds	r3, #56	; 0x38
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	4413      	add	r3, r2
 8002e66:	3304      	adds	r3, #4
 8002e68:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e82:	7afb      	ldrb	r3, [r7, #11]
 8002e84:	f003 030f 	and.w	r3, r3, #15
 8002e88:	b2da      	uxtb	r2, r3
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d102      	bne.n	8002e9c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e9c:	7afb      	ldrb	r3, [r7, #11]
 8002e9e:	f003 030f 	and.w	r3, r3, #15
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d109      	bne.n	8002eba <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6818      	ldr	r0, [r3, #0]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	6979      	ldr	r1, [r7, #20]
 8002eb4:	f002 f9da 	bl	800526c <USB_EP0StartXfer>
 8002eb8:	e008      	b.n	8002ecc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6818      	ldr	r0, [r3, #0]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	6979      	ldr	r1, [r7, #20]
 8002ec8:	f001 ff88 	bl	8004ddc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3718      	adds	r7, #24
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b084      	sub	sp, #16
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
 8002ede:	460b      	mov	r3, r1
 8002ee0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ee2:	78fb      	ldrb	r3, [r7, #3]
 8002ee4:	f003 020f 	and.w	r2, r3, #15
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d901      	bls.n	8002ef4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e050      	b.n	8002f96 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ef4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	da0f      	bge.n	8002f1c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002efc:	78fb      	ldrb	r3, [r7, #3]
 8002efe:	f003 020f 	and.w	r2, r3, #15
 8002f02:	4613      	mov	r3, r2
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	4413      	add	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	3338      	adds	r3, #56	; 0x38
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	4413      	add	r3, r2
 8002f10:	3304      	adds	r3, #4
 8002f12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2201      	movs	r2, #1
 8002f18:	705a      	strb	r2, [r3, #1]
 8002f1a:	e00d      	b.n	8002f38 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f1c:	78fa      	ldrb	r2, [r7, #3]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	4413      	add	r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	3304      	adds	r3, #4
 8002f30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f3e:	78fb      	ldrb	r3, [r7, #3]
 8002f40:	f003 030f 	and.w	r3, r3, #15
 8002f44:	b2da      	uxtb	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d101      	bne.n	8002f58 <HAL_PCD_EP_SetStall+0x82>
 8002f54:	2302      	movs	r3, #2
 8002f56:	e01e      	b.n	8002f96 <HAL_PCD_EP_SetStall+0xc0>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68f9      	ldr	r1, [r7, #12]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f002 fc18 	bl	800579c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f6c:	78fb      	ldrb	r3, [r7, #3]
 8002f6e:	f003 030f 	and.w	r3, r3, #15
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10a      	bne.n	8002f8c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6818      	ldr	r0, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	b2d9      	uxtb	r1, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f86:	461a      	mov	r2, r3
 8002f88:	f002 fe08 	bl	8005b9c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b084      	sub	sp, #16
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002faa:	78fb      	ldrb	r3, [r7, #3]
 8002fac:	f003 020f 	and.w	r2, r3, #15
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d901      	bls.n	8002fbc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e042      	b.n	8003042 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	da0f      	bge.n	8002fe4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fc4:	78fb      	ldrb	r3, [r7, #3]
 8002fc6:	f003 020f 	and.w	r2, r3, #15
 8002fca:	4613      	mov	r3, r2
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	4413      	add	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	3338      	adds	r3, #56	; 0x38
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	3304      	adds	r3, #4
 8002fda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	705a      	strb	r2, [r3, #1]
 8002fe2:	e00f      	b.n	8003004 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fe4:	78fb      	ldrb	r3, [r7, #3]
 8002fe6:	f003 020f 	and.w	r2, r3, #15
 8002fea:	4613      	mov	r3, r2
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	4413      	add	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	3304      	adds	r3, #4
 8002ffc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800300a:	78fb      	ldrb	r3, [r7, #3]
 800300c:	f003 030f 	and.w	r3, r3, #15
 8003010:	b2da      	uxtb	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800301c:	2b01      	cmp	r3, #1
 800301e:	d101      	bne.n	8003024 <HAL_PCD_EP_ClrStall+0x86>
 8003020:	2302      	movs	r3, #2
 8003022:	e00e      	b.n	8003042 <HAL_PCD_EP_ClrStall+0xa4>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68f9      	ldr	r1, [r7, #12]
 8003032:	4618      	mov	r0, r3
 8003034:	f002 fc20 	bl	8005878 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	b084      	sub	sp, #16
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
 8003052:	460b      	mov	r3, r1
 8003054:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003056:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800305a:	2b00      	cmp	r3, #0
 800305c:	da0c      	bge.n	8003078 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800305e:	78fb      	ldrb	r3, [r7, #3]
 8003060:	f003 020f 	and.w	r2, r3, #15
 8003064:	4613      	mov	r3, r2
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	4413      	add	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	3338      	adds	r3, #56	; 0x38
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	4413      	add	r3, r2
 8003072:	3304      	adds	r3, #4
 8003074:	60fb      	str	r3, [r7, #12]
 8003076:	e00c      	b.n	8003092 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003078:	78fb      	ldrb	r3, [r7, #3]
 800307a:	f003 020f 	and.w	r2, r3, #15
 800307e:	4613      	mov	r3, r2
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	4413      	add	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	4413      	add	r3, r2
 800308e:	3304      	adds	r3, #4
 8003090:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68f9      	ldr	r1, [r7, #12]
 8003098:	4618      	mov	r0, r3
 800309a:	f002 fa3f 	bl	800551c <USB_EPStopXfer>
 800309e:	4603      	mov	r3, r0
 80030a0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80030a2:	7afb      	ldrb	r3, [r7, #11]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b08a      	sub	sp, #40	; 0x28
 80030b0:	af02      	add	r7, sp, #8
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	4613      	mov	r3, r2
 80030c4:	00db      	lsls	r3, r3, #3
 80030c6:	4413      	add	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	3338      	adds	r3, #56	; 0x38
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	4413      	add	r3, r2
 80030d0:	3304      	adds	r3, #4
 80030d2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6a1a      	ldr	r2, [r3, #32]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d901      	bls.n	80030e4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e06c      	b.n	80031be <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	699a      	ldr	r2, [r3, #24]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6a1b      	ldr	r3, [r3, #32]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	69fa      	ldr	r2, [r7, #28]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d902      	bls.n	8003100 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	3303      	adds	r3, #3
 8003104:	089b      	lsrs	r3, r3, #2
 8003106:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003108:	e02b      	b.n	8003162 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	699a      	ldr	r2, [r3, #24]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	69fa      	ldr	r2, [r7, #28]
 800311c:	429a      	cmp	r2, r3
 800311e:	d902      	bls.n	8003126 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	3303      	adds	r3, #3
 800312a:	089b      	lsrs	r3, r3, #2
 800312c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6919      	ldr	r1, [r3, #16]
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	b2da      	uxtb	r2, r3
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800313e:	b2db      	uxtb	r3, r3
 8003140:	9300      	str	r3, [sp, #0]
 8003142:	4603      	mov	r3, r0
 8003144:	6978      	ldr	r0, [r7, #20]
 8003146:	f002 fa93 	bl	8005670 <USB_WritePacket>

    ep->xfer_buff  += len;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	691a      	ldr	r2, [r3, #16]
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	441a      	add	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6a1a      	ldr	r2, [r3, #32]
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	441a      	add	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	015a      	lsls	r2, r3, #5
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	4413      	add	r3, r2
 800316a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	429a      	cmp	r2, r3
 8003176:	d809      	bhi.n	800318c <PCD_WriteEmptyTxFifo+0xe0>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6a1a      	ldr	r2, [r3, #32]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003180:	429a      	cmp	r2, r3
 8003182:	d203      	bcs.n	800318c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1be      	bne.n	800310a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	699a      	ldr	r2, [r3, #24]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	429a      	cmp	r2, r3
 8003196:	d811      	bhi.n	80031bc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	f003 030f 	and.w	r3, r3, #15
 800319e:	2201      	movs	r2, #1
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	43db      	mvns	r3, r3
 80031b2:	6939      	ldr	r1, [r7, #16]
 80031b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031b8:	4013      	ands	r3, r2
 80031ba:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3720      	adds	r7, #32
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
	...

080031c8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b088      	sub	sp, #32
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	333c      	adds	r3, #60	; 0x3c
 80031e0:	3304      	adds	r3, #4
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	015a      	lsls	r2, r3, #5
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	4413      	add	r3, r2
 80031ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d17b      	bne.n	80032f6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	f003 0308 	and.w	r3, r3, #8
 8003204:	2b00      	cmp	r3, #0
 8003206:	d015      	beq.n	8003234 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	4a61      	ldr	r2, [pc, #388]	; (8003390 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800320c:	4293      	cmp	r3, r2
 800320e:	f240 80b9 	bls.w	8003384 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003218:	2b00      	cmp	r3, #0
 800321a:	f000 80b3 	beq.w	8003384 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	015a      	lsls	r2, r3, #5
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	4413      	add	r3, r2
 8003226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800322a:	461a      	mov	r2, r3
 800322c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003230:	6093      	str	r3, [r2, #8]
 8003232:	e0a7      	b.n	8003384 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	f003 0320 	and.w	r3, r3, #32
 800323a:	2b00      	cmp	r3, #0
 800323c:	d009      	beq.n	8003252 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	015a      	lsls	r2, r3, #5
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	4413      	add	r3, r2
 8003246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800324a:	461a      	mov	r2, r3
 800324c:	2320      	movs	r3, #32
 800324e:	6093      	str	r3, [r2, #8]
 8003250:	e098      	b.n	8003384 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003258:	2b00      	cmp	r3, #0
 800325a:	f040 8093 	bne.w	8003384 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	4a4b      	ldr	r2, [pc, #300]	; (8003390 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d90f      	bls.n	8003286 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00a      	beq.n	8003286 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	015a      	lsls	r2, r3, #5
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	4413      	add	r3, r2
 8003278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800327c:	461a      	mov	r2, r3
 800327e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003282:	6093      	str	r3, [r2, #8]
 8003284:	e07e      	b.n	8003384 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	4613      	mov	r3, r2
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	4413      	add	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	4413      	add	r3, r2
 8003298:	3304      	adds	r3, #4
 800329a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	69da      	ldr	r2, [r3, #28]
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	0159      	lsls	r1, r3, #5
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	440b      	add	r3, r1
 80032a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032b2:	1ad2      	subs	r2, r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d114      	bne.n	80032e8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d109      	bne.n	80032da <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6818      	ldr	r0, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80032d0:	461a      	mov	r2, r3
 80032d2:	2101      	movs	r1, #1
 80032d4:	f002 fc62 	bl	8005b9c <USB_EP0_OutStart>
 80032d8:	e006      	b.n	80032e8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	691a      	ldr	r2, [r3, #16]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	441a      	add	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	4619      	mov	r1, r3
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f004 fc04 	bl	8007afc <HAL_PCD_DataOutStageCallback>
 80032f4:	e046      	b.n	8003384 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	4a26      	ldr	r2, [pc, #152]	; (8003394 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d124      	bne.n	8003348 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00a      	beq.n	800331e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	015a      	lsls	r2, r3, #5
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	4413      	add	r3, r2
 8003310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003314:	461a      	mov	r2, r3
 8003316:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800331a:	6093      	str	r3, [r2, #8]
 800331c:	e032      	b.n	8003384 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	f003 0320 	and.w	r3, r3, #32
 8003324:	2b00      	cmp	r3, #0
 8003326:	d008      	beq.n	800333a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	015a      	lsls	r2, r3, #5
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	4413      	add	r3, r2
 8003330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003334:	461a      	mov	r2, r3
 8003336:	2320      	movs	r3, #32
 8003338:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	b2db      	uxtb	r3, r3
 800333e:	4619      	mov	r1, r3
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f004 fbdb 	bl	8007afc <HAL_PCD_DataOutStageCallback>
 8003346:	e01d      	b.n	8003384 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d114      	bne.n	8003378 <PCD_EP_OutXfrComplete_int+0x1b0>
 800334e:	6879      	ldr	r1, [r7, #4]
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	4613      	mov	r3, r2
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	4413      	add	r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	440b      	add	r3, r1
 800335c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d108      	bne.n	8003378 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6818      	ldr	r0, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003370:	461a      	mov	r2, r3
 8003372:	2100      	movs	r1, #0
 8003374:	f002 fc12 	bl	8005b9c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	b2db      	uxtb	r3, r3
 800337c:	4619      	mov	r1, r3
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f004 fbbc 	bl	8007afc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3720      	adds	r7, #32
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	4f54300a 	.word	0x4f54300a
 8003394:	4f54310a 	.word	0x4f54310a

08003398 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	333c      	adds	r3, #60	; 0x3c
 80033b0:	3304      	adds	r3, #4
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	015a      	lsls	r2, r3, #5
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	4413      	add	r3, r2
 80033be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	4a15      	ldr	r2, [pc, #84]	; (8003420 <PCD_EP_OutSetupPacket_int+0x88>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d90e      	bls.n	80033ec <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d009      	beq.n	80033ec <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	015a      	lsls	r2, r3, #5
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	4413      	add	r3, r2
 80033e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033e4:	461a      	mov	r2, r3
 80033e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033ea:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f004 fb73 	bl	8007ad8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	4a0a      	ldr	r2, [pc, #40]	; (8003420 <PCD_EP_OutSetupPacket_int+0x88>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d90c      	bls.n	8003414 <PCD_EP_OutSetupPacket_int+0x7c>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d108      	bne.n	8003414 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6818      	ldr	r0, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800340c:	461a      	mov	r2, r3
 800340e:	2101      	movs	r1, #1
 8003410:	f002 fbc4 	bl	8005b9c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3718      	adds	r7, #24
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	4f54300a 	.word	0x4f54300a

08003424 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	460b      	mov	r3, r1
 800342e:	70fb      	strb	r3, [r7, #3]
 8003430:	4613      	mov	r3, r2
 8003432:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800343c:	78fb      	ldrb	r3, [r7, #3]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d107      	bne.n	8003452 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003442:	883b      	ldrh	r3, [r7, #0]
 8003444:	0419      	lsls	r1, r3, #16
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68ba      	ldr	r2, [r7, #8]
 800344c:	430a      	orrs	r2, r1
 800344e:	629a      	str	r2, [r3, #40]	; 0x28
 8003450:	e028      	b.n	80034a4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003458:	0c1b      	lsrs	r3, r3, #16
 800345a:	68ba      	ldr	r2, [r7, #8]
 800345c:	4413      	add	r3, r2
 800345e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003460:	2300      	movs	r3, #0
 8003462:	73fb      	strb	r3, [r7, #15]
 8003464:	e00d      	b.n	8003482 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	7bfb      	ldrb	r3, [r7, #15]
 800346c:	3340      	adds	r3, #64	; 0x40
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	4413      	add	r3, r2
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	0c1b      	lsrs	r3, r3, #16
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	4413      	add	r3, r2
 800347a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800347c:	7bfb      	ldrb	r3, [r7, #15]
 800347e:	3301      	adds	r3, #1
 8003480:	73fb      	strb	r3, [r7, #15]
 8003482:	7bfa      	ldrb	r2, [r7, #15]
 8003484:	78fb      	ldrb	r3, [r7, #3]
 8003486:	3b01      	subs	r3, #1
 8003488:	429a      	cmp	r2, r3
 800348a:	d3ec      	bcc.n	8003466 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800348c:	883b      	ldrh	r3, [r7, #0]
 800348e:	0418      	lsls	r0, r3, #16
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6819      	ldr	r1, [r3, #0]
 8003494:	78fb      	ldrb	r3, [r7, #3]
 8003496:	3b01      	subs	r3, #1
 8003498:	68ba      	ldr	r2, [r7, #8]
 800349a:	4302      	orrs	r2, r0
 800349c:	3340      	adds	r3, #64	; 0x40
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	440b      	add	r3, r1
 80034a2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3714      	adds	r7, #20
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr

080034b2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80034b2:	b480      	push	{r7}
 80034b4:	b083      	sub	sp, #12
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
 80034ba:	460b      	mov	r3, r1
 80034bc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	887a      	ldrh	r2, [r7, #2]
 80034c4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	460b      	mov	r3, r1
 80034de:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e267      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d075      	beq.n	80035f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800350a:	4b88      	ldr	r3, [pc, #544]	; (800372c <HAL_RCC_OscConfig+0x240>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f003 030c 	and.w	r3, r3, #12
 8003512:	2b04      	cmp	r3, #4
 8003514:	d00c      	beq.n	8003530 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003516:	4b85      	ldr	r3, [pc, #532]	; (800372c <HAL_RCC_OscConfig+0x240>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800351e:	2b08      	cmp	r3, #8
 8003520:	d112      	bne.n	8003548 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003522:	4b82      	ldr	r3, [pc, #520]	; (800372c <HAL_RCC_OscConfig+0x240>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800352a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800352e:	d10b      	bne.n	8003548 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003530:	4b7e      	ldr	r3, [pc, #504]	; (800372c <HAL_RCC_OscConfig+0x240>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d05b      	beq.n	80035f4 <HAL_RCC_OscConfig+0x108>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d157      	bne.n	80035f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e242      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003550:	d106      	bne.n	8003560 <HAL_RCC_OscConfig+0x74>
 8003552:	4b76      	ldr	r3, [pc, #472]	; (800372c <HAL_RCC_OscConfig+0x240>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a75      	ldr	r2, [pc, #468]	; (800372c <HAL_RCC_OscConfig+0x240>)
 8003558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800355c:	6013      	str	r3, [r2, #0]
 800355e:	e01d      	b.n	800359c <HAL_RCC_OscConfig+0xb0>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003568:	d10c      	bne.n	8003584 <HAL_RCC_OscConfig+0x98>
 800356a:	4b70      	ldr	r3, [pc, #448]	; (800372c <HAL_RCC_OscConfig+0x240>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a6f      	ldr	r2, [pc, #444]	; (800372c <HAL_RCC_OscConfig+0x240>)
 8003570:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003574:	6013      	str	r3, [r2, #0]
 8003576:	4b6d      	ldr	r3, [pc, #436]	; (800372c <HAL_RCC_OscConfig+0x240>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a6c      	ldr	r2, [pc, #432]	; (800372c <HAL_RCC_OscConfig+0x240>)
 800357c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003580:	6013      	str	r3, [r2, #0]
 8003582:	e00b      	b.n	800359c <HAL_RCC_OscConfig+0xb0>
 8003584:	4b69      	ldr	r3, [pc, #420]	; (800372c <HAL_RCC_OscConfig+0x240>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a68      	ldr	r2, [pc, #416]	; (800372c <HAL_RCC_OscConfig+0x240>)
 800358a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800358e:	6013      	str	r3, [r2, #0]
 8003590:	4b66      	ldr	r3, [pc, #408]	; (800372c <HAL_RCC_OscConfig+0x240>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a65      	ldr	r2, [pc, #404]	; (800372c <HAL_RCC_OscConfig+0x240>)
 8003596:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800359a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d013      	beq.n	80035cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a4:	f7fe f930 	bl	8001808 <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035ac:	f7fe f92c 	bl	8001808 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b64      	cmp	r3, #100	; 0x64
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e207      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035be:	4b5b      	ldr	r3, [pc, #364]	; (800372c <HAL_RCC_OscConfig+0x240>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d0f0      	beq.n	80035ac <HAL_RCC_OscConfig+0xc0>
 80035ca:	e014      	b.n	80035f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035cc:	f7fe f91c 	bl	8001808 <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035d2:	e008      	b.n	80035e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035d4:	f7fe f918 	bl	8001808 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b64      	cmp	r3, #100	; 0x64
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e1f3      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035e6:	4b51      	ldr	r3, [pc, #324]	; (800372c <HAL_RCC_OscConfig+0x240>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1f0      	bne.n	80035d4 <HAL_RCC_OscConfig+0xe8>
 80035f2:	e000      	b.n	80035f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d063      	beq.n	80036ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003602:	4b4a      	ldr	r3, [pc, #296]	; (800372c <HAL_RCC_OscConfig+0x240>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f003 030c 	and.w	r3, r3, #12
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00b      	beq.n	8003626 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800360e:	4b47      	ldr	r3, [pc, #284]	; (800372c <HAL_RCC_OscConfig+0x240>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003616:	2b08      	cmp	r3, #8
 8003618:	d11c      	bne.n	8003654 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800361a:	4b44      	ldr	r3, [pc, #272]	; (800372c <HAL_RCC_OscConfig+0x240>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d116      	bne.n	8003654 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003626:	4b41      	ldr	r3, [pc, #260]	; (800372c <HAL_RCC_OscConfig+0x240>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d005      	beq.n	800363e <HAL_RCC_OscConfig+0x152>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d001      	beq.n	800363e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e1c7      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800363e:	4b3b      	ldr	r3, [pc, #236]	; (800372c <HAL_RCC_OscConfig+0x240>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	4937      	ldr	r1, [pc, #220]	; (800372c <HAL_RCC_OscConfig+0x240>)
 800364e:	4313      	orrs	r3, r2
 8003650:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003652:	e03a      	b.n	80036ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d020      	beq.n	800369e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800365c:	4b34      	ldr	r3, [pc, #208]	; (8003730 <HAL_RCC_OscConfig+0x244>)
 800365e:	2201      	movs	r2, #1
 8003660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003662:	f7fe f8d1 	bl	8001808 <HAL_GetTick>
 8003666:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003668:	e008      	b.n	800367c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800366a:	f7fe f8cd 	bl	8001808 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b02      	cmp	r3, #2
 8003676:	d901      	bls.n	800367c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e1a8      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800367c:	4b2b      	ldr	r3, [pc, #172]	; (800372c <HAL_RCC_OscConfig+0x240>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d0f0      	beq.n	800366a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003688:	4b28      	ldr	r3, [pc, #160]	; (800372c <HAL_RCC_OscConfig+0x240>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	4925      	ldr	r1, [pc, #148]	; (800372c <HAL_RCC_OscConfig+0x240>)
 8003698:	4313      	orrs	r3, r2
 800369a:	600b      	str	r3, [r1, #0]
 800369c:	e015      	b.n	80036ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800369e:	4b24      	ldr	r3, [pc, #144]	; (8003730 <HAL_RCC_OscConfig+0x244>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a4:	f7fe f8b0 	bl	8001808 <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036aa:	e008      	b.n	80036be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036ac:	f7fe f8ac 	bl	8001808 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e187      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036be:	4b1b      	ldr	r3, [pc, #108]	; (800372c <HAL_RCC_OscConfig+0x240>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1f0      	bne.n	80036ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0308 	and.w	r3, r3, #8
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d036      	beq.n	8003744 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d016      	beq.n	800370c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036de:	4b15      	ldr	r3, [pc, #84]	; (8003734 <HAL_RCC_OscConfig+0x248>)
 80036e0:	2201      	movs	r2, #1
 80036e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e4:	f7fe f890 	bl	8001808 <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036ec:	f7fe f88c 	bl	8001808 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e167      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036fe:	4b0b      	ldr	r3, [pc, #44]	; (800372c <HAL_RCC_OscConfig+0x240>)
 8003700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d0f0      	beq.n	80036ec <HAL_RCC_OscConfig+0x200>
 800370a:	e01b      	b.n	8003744 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800370c:	4b09      	ldr	r3, [pc, #36]	; (8003734 <HAL_RCC_OscConfig+0x248>)
 800370e:	2200      	movs	r2, #0
 8003710:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003712:	f7fe f879 	bl	8001808 <HAL_GetTick>
 8003716:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003718:	e00e      	b.n	8003738 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800371a:	f7fe f875 	bl	8001808 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b02      	cmp	r3, #2
 8003726:	d907      	bls.n	8003738 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e150      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
 800372c:	40023800 	.word	0x40023800
 8003730:	42470000 	.word	0x42470000
 8003734:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003738:	4b88      	ldr	r3, [pc, #544]	; (800395c <HAL_RCC_OscConfig+0x470>)
 800373a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1ea      	bne.n	800371a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0304 	and.w	r3, r3, #4
 800374c:	2b00      	cmp	r3, #0
 800374e:	f000 8097 	beq.w	8003880 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003752:	2300      	movs	r3, #0
 8003754:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003756:	4b81      	ldr	r3, [pc, #516]	; (800395c <HAL_RCC_OscConfig+0x470>)
 8003758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10f      	bne.n	8003782 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003762:	2300      	movs	r3, #0
 8003764:	60bb      	str	r3, [r7, #8]
 8003766:	4b7d      	ldr	r3, [pc, #500]	; (800395c <HAL_RCC_OscConfig+0x470>)
 8003768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376a:	4a7c      	ldr	r2, [pc, #496]	; (800395c <HAL_RCC_OscConfig+0x470>)
 800376c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003770:	6413      	str	r3, [r2, #64]	; 0x40
 8003772:	4b7a      	ldr	r3, [pc, #488]	; (800395c <HAL_RCC_OscConfig+0x470>)
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800377a:	60bb      	str	r3, [r7, #8]
 800377c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800377e:	2301      	movs	r3, #1
 8003780:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003782:	4b77      	ldr	r3, [pc, #476]	; (8003960 <HAL_RCC_OscConfig+0x474>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800378a:	2b00      	cmp	r3, #0
 800378c:	d118      	bne.n	80037c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800378e:	4b74      	ldr	r3, [pc, #464]	; (8003960 <HAL_RCC_OscConfig+0x474>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a73      	ldr	r2, [pc, #460]	; (8003960 <HAL_RCC_OscConfig+0x474>)
 8003794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003798:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800379a:	f7fe f835 	bl	8001808 <HAL_GetTick>
 800379e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a0:	e008      	b.n	80037b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037a2:	f7fe f831 	bl	8001808 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e10c      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b4:	4b6a      	ldr	r3, [pc, #424]	; (8003960 <HAL_RCC_OscConfig+0x474>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d0f0      	beq.n	80037a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d106      	bne.n	80037d6 <HAL_RCC_OscConfig+0x2ea>
 80037c8:	4b64      	ldr	r3, [pc, #400]	; (800395c <HAL_RCC_OscConfig+0x470>)
 80037ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037cc:	4a63      	ldr	r2, [pc, #396]	; (800395c <HAL_RCC_OscConfig+0x470>)
 80037ce:	f043 0301 	orr.w	r3, r3, #1
 80037d2:	6713      	str	r3, [r2, #112]	; 0x70
 80037d4:	e01c      	b.n	8003810 <HAL_RCC_OscConfig+0x324>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	2b05      	cmp	r3, #5
 80037dc:	d10c      	bne.n	80037f8 <HAL_RCC_OscConfig+0x30c>
 80037de:	4b5f      	ldr	r3, [pc, #380]	; (800395c <HAL_RCC_OscConfig+0x470>)
 80037e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e2:	4a5e      	ldr	r2, [pc, #376]	; (800395c <HAL_RCC_OscConfig+0x470>)
 80037e4:	f043 0304 	orr.w	r3, r3, #4
 80037e8:	6713      	str	r3, [r2, #112]	; 0x70
 80037ea:	4b5c      	ldr	r3, [pc, #368]	; (800395c <HAL_RCC_OscConfig+0x470>)
 80037ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ee:	4a5b      	ldr	r2, [pc, #364]	; (800395c <HAL_RCC_OscConfig+0x470>)
 80037f0:	f043 0301 	orr.w	r3, r3, #1
 80037f4:	6713      	str	r3, [r2, #112]	; 0x70
 80037f6:	e00b      	b.n	8003810 <HAL_RCC_OscConfig+0x324>
 80037f8:	4b58      	ldr	r3, [pc, #352]	; (800395c <HAL_RCC_OscConfig+0x470>)
 80037fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fc:	4a57      	ldr	r2, [pc, #348]	; (800395c <HAL_RCC_OscConfig+0x470>)
 80037fe:	f023 0301 	bic.w	r3, r3, #1
 8003802:	6713      	str	r3, [r2, #112]	; 0x70
 8003804:	4b55      	ldr	r3, [pc, #340]	; (800395c <HAL_RCC_OscConfig+0x470>)
 8003806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003808:	4a54      	ldr	r2, [pc, #336]	; (800395c <HAL_RCC_OscConfig+0x470>)
 800380a:	f023 0304 	bic.w	r3, r3, #4
 800380e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d015      	beq.n	8003844 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003818:	f7fd fff6 	bl	8001808 <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800381e:	e00a      	b.n	8003836 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003820:	f7fd fff2 	bl	8001808 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	f241 3288 	movw	r2, #5000	; 0x1388
 800382e:	4293      	cmp	r3, r2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e0cb      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003836:	4b49      	ldr	r3, [pc, #292]	; (800395c <HAL_RCC_OscConfig+0x470>)
 8003838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d0ee      	beq.n	8003820 <HAL_RCC_OscConfig+0x334>
 8003842:	e014      	b.n	800386e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003844:	f7fd ffe0 	bl	8001808 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800384a:	e00a      	b.n	8003862 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800384c:	f7fd ffdc 	bl	8001808 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	f241 3288 	movw	r2, #5000	; 0x1388
 800385a:	4293      	cmp	r3, r2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e0b5      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003862:	4b3e      	ldr	r3, [pc, #248]	; (800395c <HAL_RCC_OscConfig+0x470>)
 8003864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1ee      	bne.n	800384c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800386e:	7dfb      	ldrb	r3, [r7, #23]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d105      	bne.n	8003880 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003874:	4b39      	ldr	r3, [pc, #228]	; (800395c <HAL_RCC_OscConfig+0x470>)
 8003876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003878:	4a38      	ldr	r2, [pc, #224]	; (800395c <HAL_RCC_OscConfig+0x470>)
 800387a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800387e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	2b00      	cmp	r3, #0
 8003886:	f000 80a1 	beq.w	80039cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800388a:	4b34      	ldr	r3, [pc, #208]	; (800395c <HAL_RCC_OscConfig+0x470>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f003 030c 	and.w	r3, r3, #12
 8003892:	2b08      	cmp	r3, #8
 8003894:	d05c      	beq.n	8003950 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	2b02      	cmp	r3, #2
 800389c:	d141      	bne.n	8003922 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800389e:	4b31      	ldr	r3, [pc, #196]	; (8003964 <HAL_RCC_OscConfig+0x478>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a4:	f7fd ffb0 	bl	8001808 <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038ac:	f7fd ffac 	bl	8001808 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e087      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038be:	4b27      	ldr	r3, [pc, #156]	; (800395c <HAL_RCC_OscConfig+0x470>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1f0      	bne.n	80038ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	69da      	ldr	r2, [r3, #28]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	431a      	orrs	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	019b      	lsls	r3, r3, #6
 80038da:	431a      	orrs	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e0:	085b      	lsrs	r3, r3, #1
 80038e2:	3b01      	subs	r3, #1
 80038e4:	041b      	lsls	r3, r3, #16
 80038e6:	431a      	orrs	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ec:	061b      	lsls	r3, r3, #24
 80038ee:	491b      	ldr	r1, [pc, #108]	; (800395c <HAL_RCC_OscConfig+0x470>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038f4:	4b1b      	ldr	r3, [pc, #108]	; (8003964 <HAL_RCC_OscConfig+0x478>)
 80038f6:	2201      	movs	r2, #1
 80038f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038fa:	f7fd ff85 	bl	8001808 <HAL_GetTick>
 80038fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003900:	e008      	b.n	8003914 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003902:	f7fd ff81 	bl	8001808 <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b02      	cmp	r3, #2
 800390e:	d901      	bls.n	8003914 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e05c      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003914:	4b11      	ldr	r3, [pc, #68]	; (800395c <HAL_RCC_OscConfig+0x470>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d0f0      	beq.n	8003902 <HAL_RCC_OscConfig+0x416>
 8003920:	e054      	b.n	80039cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003922:	4b10      	ldr	r3, [pc, #64]	; (8003964 <HAL_RCC_OscConfig+0x478>)
 8003924:	2200      	movs	r2, #0
 8003926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003928:	f7fd ff6e 	bl	8001808 <HAL_GetTick>
 800392c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800392e:	e008      	b.n	8003942 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003930:	f7fd ff6a 	bl	8001808 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b02      	cmp	r3, #2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e045      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003942:	4b06      	ldr	r3, [pc, #24]	; (800395c <HAL_RCC_OscConfig+0x470>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1f0      	bne.n	8003930 <HAL_RCC_OscConfig+0x444>
 800394e:	e03d      	b.n	80039cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d107      	bne.n	8003968 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e038      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
 800395c:	40023800 	.word	0x40023800
 8003960:	40007000 	.word	0x40007000
 8003964:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003968:	4b1b      	ldr	r3, [pc, #108]	; (80039d8 <HAL_RCC_OscConfig+0x4ec>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d028      	beq.n	80039c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003980:	429a      	cmp	r2, r3
 8003982:	d121      	bne.n	80039c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800398e:	429a      	cmp	r2, r3
 8003990:	d11a      	bne.n	80039c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003998:	4013      	ands	r3, r2
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800399e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d111      	bne.n	80039c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ae:	085b      	lsrs	r3, r3, #1
 80039b0:	3b01      	subs	r3, #1
 80039b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d107      	bne.n	80039c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d001      	beq.n	80039cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e000      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3718      	adds	r7, #24
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	40023800 	.word	0x40023800

080039dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d101      	bne.n	80039f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e0cc      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039f0:	4b68      	ldr	r3, [pc, #416]	; (8003b94 <HAL_RCC_ClockConfig+0x1b8>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0307 	and.w	r3, r3, #7
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d90c      	bls.n	8003a18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039fe:	4b65      	ldr	r3, [pc, #404]	; (8003b94 <HAL_RCC_ClockConfig+0x1b8>)
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	b2d2      	uxtb	r2, r2
 8003a04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a06:	4b63      	ldr	r3, [pc, #396]	; (8003b94 <HAL_RCC_ClockConfig+0x1b8>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0307 	and.w	r3, r3, #7
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d001      	beq.n	8003a18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e0b8      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d020      	beq.n	8003a66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0304 	and.w	r3, r3, #4
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d005      	beq.n	8003a3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a30:	4b59      	ldr	r3, [pc, #356]	; (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	4a58      	ldr	r2, [pc, #352]	; (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0308 	and.w	r3, r3, #8
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d005      	beq.n	8003a54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a48:	4b53      	ldr	r3, [pc, #332]	; (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	4a52      	ldr	r2, [pc, #328]	; (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a54:	4b50      	ldr	r3, [pc, #320]	; (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	494d      	ldr	r1, [pc, #308]	; (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d044      	beq.n	8003afc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d107      	bne.n	8003a8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a7a:	4b47      	ldr	r3, [pc, #284]	; (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d119      	bne.n	8003aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e07f      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d003      	beq.n	8003a9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a96:	2b03      	cmp	r3, #3
 8003a98:	d107      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a9a:	4b3f      	ldr	r3, [pc, #252]	; (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d109      	bne.n	8003aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e06f      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aaa:	4b3b      	ldr	r3, [pc, #236]	; (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e067      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aba:	4b37      	ldr	r3, [pc, #220]	; (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f023 0203 	bic.w	r2, r3, #3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	4934      	ldr	r1, [pc, #208]	; (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003acc:	f7fd fe9c 	bl	8001808 <HAL_GetTick>
 8003ad0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ad2:	e00a      	b.n	8003aea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ad4:	f7fd fe98 	bl	8001808 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e04f      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aea:	4b2b      	ldr	r3, [pc, #172]	; (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f003 020c 	and.w	r2, r3, #12
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d1eb      	bne.n	8003ad4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003afc:	4b25      	ldr	r3, [pc, #148]	; (8003b94 <HAL_RCC_ClockConfig+0x1b8>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0307 	and.w	r3, r3, #7
 8003b04:	683a      	ldr	r2, [r7, #0]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d20c      	bcs.n	8003b24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b0a:	4b22      	ldr	r3, [pc, #136]	; (8003b94 <HAL_RCC_ClockConfig+0x1b8>)
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	b2d2      	uxtb	r2, r2
 8003b10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b12:	4b20      	ldr	r3, [pc, #128]	; (8003b94 <HAL_RCC_ClockConfig+0x1b8>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0307 	and.w	r3, r3, #7
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d001      	beq.n	8003b24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e032      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0304 	and.w	r3, r3, #4
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d008      	beq.n	8003b42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b30:	4b19      	ldr	r3, [pc, #100]	; (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	4916      	ldr	r1, [pc, #88]	; (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0308 	and.w	r3, r3, #8
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d009      	beq.n	8003b62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b4e:	4b12      	ldr	r3, [pc, #72]	; (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	00db      	lsls	r3, r3, #3
 8003b5c:	490e      	ldr	r1, [pc, #56]	; (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b62:	f000 f821 	bl	8003ba8 <HAL_RCC_GetSysClockFreq>
 8003b66:	4602      	mov	r2, r0
 8003b68:	4b0b      	ldr	r3, [pc, #44]	; (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	091b      	lsrs	r3, r3, #4
 8003b6e:	f003 030f 	and.w	r3, r3, #15
 8003b72:	490a      	ldr	r1, [pc, #40]	; (8003b9c <HAL_RCC_ClockConfig+0x1c0>)
 8003b74:	5ccb      	ldrb	r3, [r1, r3]
 8003b76:	fa22 f303 	lsr.w	r3, r2, r3
 8003b7a:	4a09      	ldr	r2, [pc, #36]	; (8003ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b7e:	4b09      	ldr	r3, [pc, #36]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7fd fdfc 	bl	8001780 <HAL_InitTick>

  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	40023c00 	.word	0x40023c00
 8003b98:	40023800 	.word	0x40023800
 8003b9c:	080080e4 	.word	0x080080e4
 8003ba0:	20000074 	.word	0x20000074
 8003ba4:	20000078 	.word	0x20000078

08003ba8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ba8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bac:	b094      	sub	sp, #80	; 0x50
 8003bae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	647b      	str	r3, [r7, #68]	; 0x44
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bb8:	2300      	movs	r3, #0
 8003bba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bc0:	4b79      	ldr	r3, [pc, #484]	; (8003da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f003 030c 	and.w	r3, r3, #12
 8003bc8:	2b08      	cmp	r3, #8
 8003bca:	d00d      	beq.n	8003be8 <HAL_RCC_GetSysClockFreq+0x40>
 8003bcc:	2b08      	cmp	r3, #8
 8003bce:	f200 80e1 	bhi.w	8003d94 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d002      	beq.n	8003bdc <HAL_RCC_GetSysClockFreq+0x34>
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	d003      	beq.n	8003be2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003bda:	e0db      	b.n	8003d94 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bdc:	4b73      	ldr	r3, [pc, #460]	; (8003dac <HAL_RCC_GetSysClockFreq+0x204>)
 8003bde:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003be0:	e0db      	b.n	8003d9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003be2:	4b73      	ldr	r3, [pc, #460]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003be4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003be6:	e0d8      	b.n	8003d9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003be8:	4b6f      	ldr	r3, [pc, #444]	; (8003da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bf0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bf2:	4b6d      	ldr	r3, [pc, #436]	; (8003da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d063      	beq.n	8003cc6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bfe:	4b6a      	ldr	r3, [pc, #424]	; (8003da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	099b      	lsrs	r3, r3, #6
 8003c04:	2200      	movs	r2, #0
 8003c06:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c08:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c10:	633b      	str	r3, [r7, #48]	; 0x30
 8003c12:	2300      	movs	r3, #0
 8003c14:	637b      	str	r3, [r7, #52]	; 0x34
 8003c16:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c1a:	4622      	mov	r2, r4
 8003c1c:	462b      	mov	r3, r5
 8003c1e:	f04f 0000 	mov.w	r0, #0
 8003c22:	f04f 0100 	mov.w	r1, #0
 8003c26:	0159      	lsls	r1, r3, #5
 8003c28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c2c:	0150      	lsls	r0, r2, #5
 8003c2e:	4602      	mov	r2, r0
 8003c30:	460b      	mov	r3, r1
 8003c32:	4621      	mov	r1, r4
 8003c34:	1a51      	subs	r1, r2, r1
 8003c36:	6139      	str	r1, [r7, #16]
 8003c38:	4629      	mov	r1, r5
 8003c3a:	eb63 0301 	sbc.w	r3, r3, r1
 8003c3e:	617b      	str	r3, [r7, #20]
 8003c40:	f04f 0200 	mov.w	r2, #0
 8003c44:	f04f 0300 	mov.w	r3, #0
 8003c48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c4c:	4659      	mov	r1, fp
 8003c4e:	018b      	lsls	r3, r1, #6
 8003c50:	4651      	mov	r1, sl
 8003c52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c56:	4651      	mov	r1, sl
 8003c58:	018a      	lsls	r2, r1, #6
 8003c5a:	4651      	mov	r1, sl
 8003c5c:	ebb2 0801 	subs.w	r8, r2, r1
 8003c60:	4659      	mov	r1, fp
 8003c62:	eb63 0901 	sbc.w	r9, r3, r1
 8003c66:	f04f 0200 	mov.w	r2, #0
 8003c6a:	f04f 0300 	mov.w	r3, #0
 8003c6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c7a:	4690      	mov	r8, r2
 8003c7c:	4699      	mov	r9, r3
 8003c7e:	4623      	mov	r3, r4
 8003c80:	eb18 0303 	adds.w	r3, r8, r3
 8003c84:	60bb      	str	r3, [r7, #8]
 8003c86:	462b      	mov	r3, r5
 8003c88:	eb49 0303 	adc.w	r3, r9, r3
 8003c8c:	60fb      	str	r3, [r7, #12]
 8003c8e:	f04f 0200 	mov.w	r2, #0
 8003c92:	f04f 0300 	mov.w	r3, #0
 8003c96:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c9a:	4629      	mov	r1, r5
 8003c9c:	024b      	lsls	r3, r1, #9
 8003c9e:	4621      	mov	r1, r4
 8003ca0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ca4:	4621      	mov	r1, r4
 8003ca6:	024a      	lsls	r2, r1, #9
 8003ca8:	4610      	mov	r0, r2
 8003caa:	4619      	mov	r1, r3
 8003cac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cae:	2200      	movs	r2, #0
 8003cb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cb4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003cb8:	f7fc fa86 	bl	80001c8 <__aeabi_uldivmod>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cc4:	e058      	b.n	8003d78 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cc6:	4b38      	ldr	r3, [pc, #224]	; (8003da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	099b      	lsrs	r3, r3, #6
 8003ccc:	2200      	movs	r2, #0
 8003cce:	4618      	mov	r0, r3
 8003cd0:	4611      	mov	r1, r2
 8003cd2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003cd6:	623b      	str	r3, [r7, #32]
 8003cd8:	2300      	movs	r3, #0
 8003cda:	627b      	str	r3, [r7, #36]	; 0x24
 8003cdc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ce0:	4642      	mov	r2, r8
 8003ce2:	464b      	mov	r3, r9
 8003ce4:	f04f 0000 	mov.w	r0, #0
 8003ce8:	f04f 0100 	mov.w	r1, #0
 8003cec:	0159      	lsls	r1, r3, #5
 8003cee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cf2:	0150      	lsls	r0, r2, #5
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	4641      	mov	r1, r8
 8003cfa:	ebb2 0a01 	subs.w	sl, r2, r1
 8003cfe:	4649      	mov	r1, r9
 8003d00:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d04:	f04f 0200 	mov.w	r2, #0
 8003d08:	f04f 0300 	mov.w	r3, #0
 8003d0c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d10:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d14:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d18:	ebb2 040a 	subs.w	r4, r2, sl
 8003d1c:	eb63 050b 	sbc.w	r5, r3, fp
 8003d20:	f04f 0200 	mov.w	r2, #0
 8003d24:	f04f 0300 	mov.w	r3, #0
 8003d28:	00eb      	lsls	r3, r5, #3
 8003d2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d2e:	00e2      	lsls	r2, r4, #3
 8003d30:	4614      	mov	r4, r2
 8003d32:	461d      	mov	r5, r3
 8003d34:	4643      	mov	r3, r8
 8003d36:	18e3      	adds	r3, r4, r3
 8003d38:	603b      	str	r3, [r7, #0]
 8003d3a:	464b      	mov	r3, r9
 8003d3c:	eb45 0303 	adc.w	r3, r5, r3
 8003d40:	607b      	str	r3, [r7, #4]
 8003d42:	f04f 0200 	mov.w	r2, #0
 8003d46:	f04f 0300 	mov.w	r3, #0
 8003d4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d4e:	4629      	mov	r1, r5
 8003d50:	028b      	lsls	r3, r1, #10
 8003d52:	4621      	mov	r1, r4
 8003d54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d58:	4621      	mov	r1, r4
 8003d5a:	028a      	lsls	r2, r1, #10
 8003d5c:	4610      	mov	r0, r2
 8003d5e:	4619      	mov	r1, r3
 8003d60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d62:	2200      	movs	r2, #0
 8003d64:	61bb      	str	r3, [r7, #24]
 8003d66:	61fa      	str	r2, [r7, #28]
 8003d68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d6c:	f7fc fa2c 	bl	80001c8 <__aeabi_uldivmod>
 8003d70:	4602      	mov	r2, r0
 8003d72:	460b      	mov	r3, r1
 8003d74:	4613      	mov	r3, r2
 8003d76:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d78:	4b0b      	ldr	r3, [pc, #44]	; (8003da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	0c1b      	lsrs	r3, r3, #16
 8003d7e:	f003 0303 	and.w	r3, r3, #3
 8003d82:	3301      	adds	r3, #1
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003d88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d92:	e002      	b.n	8003d9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d94:	4b05      	ldr	r3, [pc, #20]	; (8003dac <HAL_RCC_GetSysClockFreq+0x204>)
 8003d96:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3750      	adds	r7, #80	; 0x50
 8003da0:	46bd      	mov	sp, r7
 8003da2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003da6:	bf00      	nop
 8003da8:	40023800 	.word	0x40023800
 8003dac:	00f42400 	.word	0x00f42400
 8003db0:	007a1200 	.word	0x007a1200

08003db4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003db8:	4b03      	ldr	r3, [pc, #12]	; (8003dc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dba:	681b      	ldr	r3, [r3, #0]
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	20000074 	.word	0x20000074

08003dcc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e07b      	b.n	8003ed6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d108      	bne.n	8003df8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dee:	d009      	beq.n	8003e04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	61da      	str	r2, [r3, #28]
 8003df6:	e005      	b.n	8003e04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d106      	bne.n	8003e24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7fd fb88 	bl	8001534 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2202      	movs	r2, #2
 8003e28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e3a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003e4c:	431a      	orrs	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e56:	431a      	orrs	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	431a      	orrs	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e74:	431a      	orrs	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	69db      	ldr	r3, [r3, #28]
 8003e7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a1b      	ldr	r3, [r3, #32]
 8003e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e88:	ea42 0103 	orr.w	r1, r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e90:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	0c1b      	lsrs	r3, r3, #16
 8003ea2:	f003 0104 	and.w	r1, r3, #4
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eaa:	f003 0210 	and.w	r2, r3, #16
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	69da      	ldr	r2, [r3, #28]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ec4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3708      	adds	r7, #8
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b082      	sub	sp, #8
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d101      	bne.n	8003ef0 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e01a      	b.n	8003f26 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f06:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f7fd fb7b 	bl	8001604 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3708      	adds	r7, #8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b08c      	sub	sp, #48	; 0x30
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	60f8      	str	r0, [r7, #12]
 8003f36:	60b9      	str	r1, [r7, #8]
 8003f38:	607a      	str	r2, [r7, #4]
 8003f3a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003f40:	2300      	movs	r3, #0
 8003f42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d101      	bne.n	8003f54 <HAL_SPI_TransmitReceive+0x26>
 8003f50:	2302      	movs	r3, #2
 8003f52:	e18a      	b.n	800426a <HAL_SPI_TransmitReceive+0x33c>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f5c:	f7fd fc54 	bl	8001808 <HAL_GetTick>
 8003f60:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003f72:	887b      	ldrh	r3, [r7, #2]
 8003f74:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003f76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d00f      	beq.n	8003f9e <HAL_SPI_TransmitReceive+0x70>
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f84:	d107      	bne.n	8003f96 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d103      	bne.n	8003f96 <HAL_SPI_TransmitReceive+0x68>
 8003f8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f92:	2b04      	cmp	r3, #4
 8003f94:	d003      	beq.n	8003f9e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003f96:	2302      	movs	r3, #2
 8003f98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003f9c:	e15b      	b.n	8004256 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d005      	beq.n	8003fb0 <HAL_SPI_TransmitReceive+0x82>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d002      	beq.n	8003fb0 <HAL_SPI_TransmitReceive+0x82>
 8003faa:	887b      	ldrh	r3, [r7, #2]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d103      	bne.n	8003fb8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003fb6:	e14e      	b.n	8004256 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	2b04      	cmp	r3, #4
 8003fc2:	d003      	beq.n	8003fcc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2205      	movs	r2, #5
 8003fc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	887a      	ldrh	r2, [r7, #2]
 8003fdc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	887a      	ldrh	r2, [r7, #2]
 8003fe2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	68ba      	ldr	r2, [r7, #8]
 8003fe8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	887a      	ldrh	r2, [r7, #2]
 8003fee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	887a      	ldrh	r2, [r7, #2]
 8003ff4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800400c:	2b40      	cmp	r3, #64	; 0x40
 800400e:	d007      	beq.n	8004020 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800401e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004028:	d178      	bne.n	800411c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d002      	beq.n	8004038 <HAL_SPI_TransmitReceive+0x10a>
 8004032:	8b7b      	ldrh	r3, [r7, #26]
 8004034:	2b01      	cmp	r3, #1
 8004036:	d166      	bne.n	8004106 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403c:	881a      	ldrh	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004048:	1c9a      	adds	r2, r3, #2
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004052:	b29b      	uxth	r3, r3
 8004054:	3b01      	subs	r3, #1
 8004056:	b29a      	uxth	r2, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800405c:	e053      	b.n	8004106 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f003 0302 	and.w	r3, r3, #2
 8004068:	2b02      	cmp	r3, #2
 800406a:	d11b      	bne.n	80040a4 <HAL_SPI_TransmitReceive+0x176>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004070:	b29b      	uxth	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d016      	beq.n	80040a4 <HAL_SPI_TransmitReceive+0x176>
 8004076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004078:	2b01      	cmp	r3, #1
 800407a:	d113      	bne.n	80040a4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004080:	881a      	ldrh	r2, [r3, #0]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408c:	1c9a      	adds	r2, r3, #2
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004096:	b29b      	uxth	r3, r3
 8004098:	3b01      	subs	r3, #1
 800409a:	b29a      	uxth	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040a0:	2300      	movs	r3, #0
 80040a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d119      	bne.n	80040e6 <HAL_SPI_TransmitReceive+0x1b8>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d014      	beq.n	80040e6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68da      	ldr	r2, [r3, #12]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c6:	b292      	uxth	r2, r2
 80040c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ce:	1c9a      	adds	r2, r3, #2
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040d8:	b29b      	uxth	r3, r3
 80040da:	3b01      	subs	r3, #1
 80040dc:	b29a      	uxth	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040e2:	2301      	movs	r3, #1
 80040e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80040e6:	f7fd fb8f 	bl	8001808 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d807      	bhi.n	8004106 <HAL_SPI_TransmitReceive+0x1d8>
 80040f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040fc:	d003      	beq.n	8004106 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004104:	e0a7      	b.n	8004256 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800410a:	b29b      	uxth	r3, r3
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1a6      	bne.n	800405e <HAL_SPI_TransmitReceive+0x130>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004114:	b29b      	uxth	r3, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1a1      	bne.n	800405e <HAL_SPI_TransmitReceive+0x130>
 800411a:	e07c      	b.n	8004216 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d002      	beq.n	800412a <HAL_SPI_TransmitReceive+0x1fc>
 8004124:	8b7b      	ldrh	r3, [r7, #26]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d16b      	bne.n	8004202 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	330c      	adds	r3, #12
 8004134:	7812      	ldrb	r2, [r2, #0]
 8004136:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413c:	1c5a      	adds	r2, r3, #1
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004146:	b29b      	uxth	r3, r3
 8004148:	3b01      	subs	r3, #1
 800414a:	b29a      	uxth	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004150:	e057      	b.n	8004202 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b02      	cmp	r3, #2
 800415e:	d11c      	bne.n	800419a <HAL_SPI_TransmitReceive+0x26c>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004164:	b29b      	uxth	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d017      	beq.n	800419a <HAL_SPI_TransmitReceive+0x26c>
 800416a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800416c:	2b01      	cmp	r3, #1
 800416e:	d114      	bne.n	800419a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	330c      	adds	r3, #12
 800417a:	7812      	ldrb	r2, [r2, #0]
 800417c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004182:	1c5a      	adds	r2, r3, #1
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800418c:	b29b      	uxth	r3, r3
 800418e:	3b01      	subs	r3, #1
 8004190:	b29a      	uxth	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004196:	2300      	movs	r3, #0
 8004198:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f003 0301 	and.w	r3, r3, #1
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d119      	bne.n	80041dc <HAL_SPI_TransmitReceive+0x2ae>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d014      	beq.n	80041dc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68da      	ldr	r2, [r3, #12]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041bc:	b2d2      	uxtb	r2, r2
 80041be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c4:	1c5a      	adds	r2, r3, #1
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	3b01      	subs	r3, #1
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80041d8:	2301      	movs	r3, #1
 80041da:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80041dc:	f7fd fb14 	bl	8001808 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d803      	bhi.n	80041f4 <HAL_SPI_TransmitReceive+0x2c6>
 80041ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f2:	d102      	bne.n	80041fa <HAL_SPI_TransmitReceive+0x2cc>
 80041f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d103      	bne.n	8004202 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004200:	e029      	b.n	8004256 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004206:	b29b      	uxth	r3, r3
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1a2      	bne.n	8004152 <HAL_SPI_TransmitReceive+0x224>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004210:	b29b      	uxth	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d19d      	bne.n	8004152 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004218:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f000 f8c0 	bl	80043a0 <SPI_EndRxTxTransaction>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d006      	beq.n	8004234 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2220      	movs	r2, #32
 8004230:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004232:	e010      	b.n	8004256 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10b      	bne.n	8004254 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800423c:	2300      	movs	r3, #0
 800423e:	617b      	str	r3, [r7, #20]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	617b      	str	r3, [r7, #20]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	617b      	str	r3, [r7, #20]
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	e000      	b.n	8004256 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004254:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2201      	movs	r2, #1
 800425a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004266:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800426a:	4618      	mov	r0, r3
 800426c:	3730      	adds	r7, #48	; 0x30
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004272:	b480      	push	{r7}
 8004274:	b083      	sub	sp, #12
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004280:	b2db      	uxtb	r3, r3
}
 8004282:	4618      	mov	r0, r3
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
	...

08004290 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b088      	sub	sp, #32
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	603b      	str	r3, [r7, #0]
 800429c:	4613      	mov	r3, r2
 800429e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80042a0:	f7fd fab2 	bl	8001808 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a8:	1a9b      	subs	r3, r3, r2
 80042aa:	683a      	ldr	r2, [r7, #0]
 80042ac:	4413      	add	r3, r2
 80042ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80042b0:	f7fd faaa 	bl	8001808 <HAL_GetTick>
 80042b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80042b6:	4b39      	ldr	r3, [pc, #228]	; (800439c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	015b      	lsls	r3, r3, #5
 80042bc:	0d1b      	lsrs	r3, r3, #20
 80042be:	69fa      	ldr	r2, [r7, #28]
 80042c0:	fb02 f303 	mul.w	r3, r2, r3
 80042c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042c6:	e054      	b.n	8004372 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ce:	d050      	beq.n	8004372 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80042d0:	f7fd fa9a 	bl	8001808 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	69fa      	ldr	r2, [r7, #28]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d902      	bls.n	80042e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d13d      	bne.n	8004362 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80042f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042fe:	d111      	bne.n	8004324 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004308:	d004      	beq.n	8004314 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004312:	d107      	bne.n	8004324 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004322:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004328:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800432c:	d10f      	bne.n	800434e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800433c:	601a      	str	r2, [r3, #0]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800434c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e017      	b.n	8004392 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d101      	bne.n	800436c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004368:	2300      	movs	r3, #0
 800436a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	3b01      	subs	r3, #1
 8004370:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	689a      	ldr	r2, [r3, #8]
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	4013      	ands	r3, r2
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	429a      	cmp	r2, r3
 8004380:	bf0c      	ite	eq
 8004382:	2301      	moveq	r3, #1
 8004384:	2300      	movne	r3, #0
 8004386:	b2db      	uxtb	r3, r3
 8004388:	461a      	mov	r2, r3
 800438a:	79fb      	ldrb	r3, [r7, #7]
 800438c:	429a      	cmp	r2, r3
 800438e:	d19b      	bne.n	80042c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3720      	adds	r7, #32
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	20000074 	.word	0x20000074

080043a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b088      	sub	sp, #32
 80043a4:	af02      	add	r7, sp, #8
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80043ac:	4b1b      	ldr	r3, [pc, #108]	; (800441c <SPI_EndRxTxTransaction+0x7c>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a1b      	ldr	r2, [pc, #108]	; (8004420 <SPI_EndRxTxTransaction+0x80>)
 80043b2:	fba2 2303 	umull	r2, r3, r2, r3
 80043b6:	0d5b      	lsrs	r3, r3, #21
 80043b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80043bc:	fb02 f303 	mul.w	r3, r2, r3
 80043c0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043ca:	d112      	bne.n	80043f2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	9300      	str	r3, [sp, #0]
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	2200      	movs	r2, #0
 80043d4:	2180      	movs	r1, #128	; 0x80
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f7ff ff5a 	bl	8004290 <SPI_WaitFlagStateUntilTimeout>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d016      	beq.n	8004410 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e6:	f043 0220 	orr.w	r2, r3, #32
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e00f      	b.n	8004412 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00a      	beq.n	800440e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	3b01      	subs	r3, #1
 80043fc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004408:	2b80      	cmp	r3, #128	; 0x80
 800440a:	d0f2      	beq.n	80043f2 <SPI_EndRxTxTransaction+0x52>
 800440c:	e000      	b.n	8004410 <SPI_EndRxTxTransaction+0x70>
        break;
 800440e:	bf00      	nop
  }

  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3718      	adds	r7, #24
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	20000074 	.word	0x20000074
 8004420:	165e9f81 	.word	0x165e9f81

08004424 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004424:	b084      	sub	sp, #16
 8004426:	b580      	push	{r7, lr}
 8004428:	b084      	sub	sp, #16
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
 800442e:	f107 001c 	add.w	r0, r7, #28
 8004432:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004438:	2b01      	cmp	r3, #1
 800443a:	d122      	bne.n	8004482 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004440:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004450:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004466:	2b01      	cmp	r3, #1
 8004468:	d105      	bne.n	8004476 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f001 fbee 	bl	8005c58 <USB_CoreReset>
 800447c:	4603      	mov	r3, r0
 800447e:	73fb      	strb	r3, [r7, #15]
 8004480:	e01a      	b.n	80044b8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f001 fbe2 	bl	8005c58 <USB_CoreReset>
 8004494:	4603      	mov	r3, r0
 8004496:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004498:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800449a:	2b00      	cmp	r3, #0
 800449c:	d106      	bne.n	80044ac <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	639a      	str	r2, [r3, #56]	; 0x38
 80044aa:	e005      	b.n	80044b8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80044b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d10b      	bne.n	80044d6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f043 0206 	orr.w	r2, r3, #6
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f043 0220 	orr.w	r2, r3, #32
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80044d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044e2:	b004      	add	sp, #16
 80044e4:	4770      	bx	lr
	...

080044e8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b087      	sub	sp, #28
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	4613      	mov	r3, r2
 80044f4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80044f6:	79fb      	ldrb	r3, [r7, #7]
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d165      	bne.n	80045c8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	4a41      	ldr	r2, [pc, #260]	; (8004604 <USB_SetTurnaroundTime+0x11c>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d906      	bls.n	8004512 <USB_SetTurnaroundTime+0x2a>
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	4a40      	ldr	r2, [pc, #256]	; (8004608 <USB_SetTurnaroundTime+0x120>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d202      	bcs.n	8004512 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800450c:	230f      	movs	r3, #15
 800450e:	617b      	str	r3, [r7, #20]
 8004510:	e062      	b.n	80045d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	4a3c      	ldr	r2, [pc, #240]	; (8004608 <USB_SetTurnaroundTime+0x120>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d306      	bcc.n	8004528 <USB_SetTurnaroundTime+0x40>
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	4a3b      	ldr	r2, [pc, #236]	; (800460c <USB_SetTurnaroundTime+0x124>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d202      	bcs.n	8004528 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004522:	230e      	movs	r3, #14
 8004524:	617b      	str	r3, [r7, #20]
 8004526:	e057      	b.n	80045d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	4a38      	ldr	r2, [pc, #224]	; (800460c <USB_SetTurnaroundTime+0x124>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d306      	bcc.n	800453e <USB_SetTurnaroundTime+0x56>
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	4a37      	ldr	r2, [pc, #220]	; (8004610 <USB_SetTurnaroundTime+0x128>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d202      	bcs.n	800453e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004538:	230d      	movs	r3, #13
 800453a:	617b      	str	r3, [r7, #20]
 800453c:	e04c      	b.n	80045d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	4a33      	ldr	r2, [pc, #204]	; (8004610 <USB_SetTurnaroundTime+0x128>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d306      	bcc.n	8004554 <USB_SetTurnaroundTime+0x6c>
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	4a32      	ldr	r2, [pc, #200]	; (8004614 <USB_SetTurnaroundTime+0x12c>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d802      	bhi.n	8004554 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800454e:	230c      	movs	r3, #12
 8004550:	617b      	str	r3, [r7, #20]
 8004552:	e041      	b.n	80045d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	4a2f      	ldr	r2, [pc, #188]	; (8004614 <USB_SetTurnaroundTime+0x12c>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d906      	bls.n	800456a <USB_SetTurnaroundTime+0x82>
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	4a2e      	ldr	r2, [pc, #184]	; (8004618 <USB_SetTurnaroundTime+0x130>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d802      	bhi.n	800456a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004564:	230b      	movs	r3, #11
 8004566:	617b      	str	r3, [r7, #20]
 8004568:	e036      	b.n	80045d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	4a2a      	ldr	r2, [pc, #168]	; (8004618 <USB_SetTurnaroundTime+0x130>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d906      	bls.n	8004580 <USB_SetTurnaroundTime+0x98>
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	4a29      	ldr	r2, [pc, #164]	; (800461c <USB_SetTurnaroundTime+0x134>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d802      	bhi.n	8004580 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800457a:	230a      	movs	r3, #10
 800457c:	617b      	str	r3, [r7, #20]
 800457e:	e02b      	b.n	80045d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	4a26      	ldr	r2, [pc, #152]	; (800461c <USB_SetTurnaroundTime+0x134>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d906      	bls.n	8004596 <USB_SetTurnaroundTime+0xae>
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	4a25      	ldr	r2, [pc, #148]	; (8004620 <USB_SetTurnaroundTime+0x138>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d202      	bcs.n	8004596 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004590:	2309      	movs	r3, #9
 8004592:	617b      	str	r3, [r7, #20]
 8004594:	e020      	b.n	80045d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	4a21      	ldr	r2, [pc, #132]	; (8004620 <USB_SetTurnaroundTime+0x138>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d306      	bcc.n	80045ac <USB_SetTurnaroundTime+0xc4>
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	4a20      	ldr	r2, [pc, #128]	; (8004624 <USB_SetTurnaroundTime+0x13c>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d802      	bhi.n	80045ac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80045a6:	2308      	movs	r3, #8
 80045a8:	617b      	str	r3, [r7, #20]
 80045aa:	e015      	b.n	80045d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	4a1d      	ldr	r2, [pc, #116]	; (8004624 <USB_SetTurnaroundTime+0x13c>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d906      	bls.n	80045c2 <USB_SetTurnaroundTime+0xda>
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	4a1c      	ldr	r2, [pc, #112]	; (8004628 <USB_SetTurnaroundTime+0x140>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d202      	bcs.n	80045c2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80045bc:	2307      	movs	r3, #7
 80045be:	617b      	str	r3, [r7, #20]
 80045c0:	e00a      	b.n	80045d8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80045c2:	2306      	movs	r3, #6
 80045c4:	617b      	str	r3, [r7, #20]
 80045c6:	e007      	b.n	80045d8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80045c8:	79fb      	ldrb	r3, [r7, #7]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d102      	bne.n	80045d4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80045ce:	2309      	movs	r3, #9
 80045d0:	617b      	str	r3, [r7, #20]
 80045d2:	e001      	b.n	80045d8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80045d4:	2309      	movs	r3, #9
 80045d6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	68da      	ldr	r2, [r3, #12]
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	029b      	lsls	r3, r3, #10
 80045ec:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80045f0:	431a      	orrs	r2, r3
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	371c      	adds	r7, #28
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr
 8004604:	00d8acbf 	.word	0x00d8acbf
 8004608:	00e4e1c0 	.word	0x00e4e1c0
 800460c:	00f42400 	.word	0x00f42400
 8004610:	01067380 	.word	0x01067380
 8004614:	011a499f 	.word	0x011a499f
 8004618:	01312cff 	.word	0x01312cff
 800461c:	014ca43f 	.word	0x014ca43f
 8004620:	016e3600 	.word	0x016e3600
 8004624:	01a6ab1f 	.word	0x01a6ab1f
 8004628:	01e84800 	.word	0x01e84800

0800462c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f043 0201 	orr.w	r2, r3, #1
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	370c      	adds	r7, #12
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr

0800464e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800464e:	b480      	push	{r7}
 8004650:	b083      	sub	sp, #12
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f023 0201 	bic.w	r2, r3, #1
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004662:	2300      	movs	r3, #0
}
 8004664:	4618      	mov	r0, r3
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	460b      	mov	r3, r1
 800467a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800467c:	2300      	movs	r3, #0
 800467e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800468c:	78fb      	ldrb	r3, [r7, #3]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d115      	bne.n	80046be <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800469e:	2001      	movs	r0, #1
 80046a0:	f7fd f8be 	bl	8001820 <HAL_Delay>
      ms++;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	3301      	adds	r3, #1
 80046a8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f001 fa45 	bl	8005b3a <USB_GetMode>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d01e      	beq.n	80046f4 <USB_SetCurrentMode+0x84>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2b31      	cmp	r3, #49	; 0x31
 80046ba:	d9f0      	bls.n	800469e <USB_SetCurrentMode+0x2e>
 80046bc:	e01a      	b.n	80046f4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80046be:	78fb      	ldrb	r3, [r7, #3]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d115      	bne.n	80046f0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80046d0:	2001      	movs	r0, #1
 80046d2:	f7fd f8a5 	bl	8001820 <HAL_Delay>
      ms++;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	3301      	adds	r3, #1
 80046da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f001 fa2c 	bl	8005b3a <USB_GetMode>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d005      	beq.n	80046f4 <USB_SetCurrentMode+0x84>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2b31      	cmp	r3, #49	; 0x31
 80046ec:	d9f0      	bls.n	80046d0 <USB_SetCurrentMode+0x60>
 80046ee:	e001      	b.n	80046f4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e005      	b.n	8004700 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2b32      	cmp	r3, #50	; 0x32
 80046f8:	d101      	bne.n	80046fe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e000      	b.n	8004700 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	4618      	mov	r0, r3
 8004702:	3710      	adds	r7, #16
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004708:	b084      	sub	sp, #16
 800470a:	b580      	push	{r7, lr}
 800470c:	b086      	sub	sp, #24
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
 8004712:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004716:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800471a:	2300      	movs	r3, #0
 800471c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004722:	2300      	movs	r3, #0
 8004724:	613b      	str	r3, [r7, #16]
 8004726:	e009      	b.n	800473c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	3340      	adds	r3, #64	; 0x40
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	4413      	add	r3, r2
 8004732:	2200      	movs	r2, #0
 8004734:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	3301      	adds	r3, #1
 800473a:	613b      	str	r3, [r7, #16]
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	2b0e      	cmp	r3, #14
 8004740:	d9f2      	bls.n	8004728 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004744:	2b00      	cmp	r3, #0
 8004746:	d11c      	bne.n	8004782 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004756:	f043 0302 	orr.w	r3, r3, #2
 800475a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004760:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004778:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	639a      	str	r2, [r3, #56]	; 0x38
 8004780:	e00b      	b.n	800479a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004786:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004792:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80047a0:	461a      	mov	r2, r3
 80047a2:	2300      	movs	r3, #0
 80047a4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ac:	4619      	mov	r1, r3
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047b4:	461a      	mov	r2, r3
 80047b6:	680b      	ldr	r3, [r1, #0]
 80047b8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80047ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d10c      	bne.n	80047da <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80047c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d104      	bne.n	80047d0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80047c6:	2100      	movs	r1, #0
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f000 f965 	bl	8004a98 <USB_SetDevSpeed>
 80047ce:	e008      	b.n	80047e2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80047d0:	2101      	movs	r1, #1
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f960 	bl	8004a98 <USB_SetDevSpeed>
 80047d8:	e003      	b.n	80047e2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80047da:	2103      	movs	r1, #3
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 f95b 	bl	8004a98 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80047e2:	2110      	movs	r1, #16
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 f8f3 	bl	80049d0 <USB_FlushTxFifo>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d001      	beq.n	80047f4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 f91f 	bl	8004a38 <USB_FlushRxFifo>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d001      	beq.n	8004804 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800480a:	461a      	mov	r2, r3
 800480c:	2300      	movs	r3, #0
 800480e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004816:	461a      	mov	r2, r3
 8004818:	2300      	movs	r3, #0
 800481a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004822:	461a      	mov	r2, r3
 8004824:	2300      	movs	r3, #0
 8004826:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004828:	2300      	movs	r3, #0
 800482a:	613b      	str	r3, [r7, #16]
 800482c:	e043      	b.n	80048b6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	015a      	lsls	r2, r3, #5
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	4413      	add	r3, r2
 8004836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004840:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004844:	d118      	bne.n	8004878 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d10a      	bne.n	8004862 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	015a      	lsls	r2, r3, #5
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	4413      	add	r3, r2
 8004854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004858:	461a      	mov	r2, r3
 800485a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800485e:	6013      	str	r3, [r2, #0]
 8004860:	e013      	b.n	800488a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	015a      	lsls	r2, r3, #5
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	4413      	add	r3, r2
 800486a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800486e:	461a      	mov	r2, r3
 8004870:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004874:	6013      	str	r3, [r2, #0]
 8004876:	e008      	b.n	800488a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	015a      	lsls	r2, r3, #5
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	4413      	add	r3, r2
 8004880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004884:	461a      	mov	r2, r3
 8004886:	2300      	movs	r3, #0
 8004888:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	015a      	lsls	r2, r3, #5
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	4413      	add	r3, r2
 8004892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004896:	461a      	mov	r2, r3
 8004898:	2300      	movs	r3, #0
 800489a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	015a      	lsls	r2, r3, #5
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	4413      	add	r3, r2
 80048a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a8:	461a      	mov	r2, r3
 80048aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80048ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	3301      	adds	r3, #1
 80048b4:	613b      	str	r3, [r7, #16]
 80048b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d3b7      	bcc.n	800482e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048be:	2300      	movs	r3, #0
 80048c0:	613b      	str	r3, [r7, #16]
 80048c2:	e043      	b.n	800494c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	015a      	lsls	r2, r3, #5
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	4413      	add	r3, r2
 80048cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048da:	d118      	bne.n	800490e <USB_DevInit+0x206>
    {
      if (i == 0U)
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10a      	bne.n	80048f8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	015a      	lsls	r2, r3, #5
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	4413      	add	r3, r2
 80048ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ee:	461a      	mov	r2, r3
 80048f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80048f4:	6013      	str	r3, [r2, #0]
 80048f6:	e013      	b.n	8004920 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	015a      	lsls	r2, r3, #5
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	4413      	add	r3, r2
 8004900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004904:	461a      	mov	r2, r3
 8004906:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800490a:	6013      	str	r3, [r2, #0]
 800490c:	e008      	b.n	8004920 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	015a      	lsls	r2, r3, #5
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	4413      	add	r3, r2
 8004916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800491a:	461a      	mov	r2, r3
 800491c:	2300      	movs	r3, #0
 800491e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	015a      	lsls	r2, r3, #5
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4413      	add	r3, r2
 8004928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800492c:	461a      	mov	r2, r3
 800492e:	2300      	movs	r3, #0
 8004930:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	015a      	lsls	r2, r3, #5
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	4413      	add	r3, r2
 800493a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800493e:	461a      	mov	r2, r3
 8004940:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004944:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	3301      	adds	r3, #1
 800494a:	613b      	str	r3, [r7, #16]
 800494c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	429a      	cmp	r2, r3
 8004952:	d3b7      	bcc.n	80048c4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004962:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004966:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004974:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004978:	2b00      	cmp	r3, #0
 800497a:	d105      	bne.n	8004988 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	f043 0210 	orr.w	r2, r3, #16
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	699a      	ldr	r2, [r3, #24]
 800498c:	4b0f      	ldr	r3, [pc, #60]	; (80049cc <USB_DevInit+0x2c4>)
 800498e:	4313      	orrs	r3, r2
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004996:	2b00      	cmp	r3, #0
 8004998:	d005      	beq.n	80049a6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	f043 0208 	orr.w	r2, r3, #8
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80049a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d107      	bne.n	80049bc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80049b4:	f043 0304 	orr.w	r3, r3, #4
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80049bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3718      	adds	r7, #24
 80049c2:	46bd      	mov	sp, r7
 80049c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049c8:	b004      	add	sp, #16
 80049ca:	4770      	bx	lr
 80049cc:	803c3800 	.word	0x803c3800

080049d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80049da:	2300      	movs	r3, #0
 80049dc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	3301      	adds	r3, #1
 80049e2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	4a13      	ldr	r2, [pc, #76]	; (8004a34 <USB_FlushTxFifo+0x64>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d901      	bls.n	80049f0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e01b      	b.n	8004a28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	daf2      	bge.n	80049de <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80049f8:	2300      	movs	r3, #0
 80049fa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	019b      	lsls	r3, r3, #6
 8004a00:	f043 0220 	orr.w	r2, r3, #32
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	4a08      	ldr	r2, [pc, #32]	; (8004a34 <USB_FlushTxFifo+0x64>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d901      	bls.n	8004a1a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e006      	b.n	8004a28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	f003 0320 	and.w	r3, r3, #32
 8004a22:	2b20      	cmp	r3, #32
 8004a24:	d0f0      	beq.n	8004a08 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3714      	adds	r7, #20
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr
 8004a34:	00030d40 	.word	0x00030d40

08004a38 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a40:	2300      	movs	r3, #0
 8004a42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	3301      	adds	r3, #1
 8004a48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	4a11      	ldr	r2, [pc, #68]	; (8004a94 <USB_FlushRxFifo+0x5c>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d901      	bls.n	8004a56 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e018      	b.n	8004a88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	daf2      	bge.n	8004a44 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2210      	movs	r2, #16
 8004a66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	4a08      	ldr	r2, [pc, #32]	; (8004a94 <USB_FlushRxFifo+0x5c>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d901      	bls.n	8004a7a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e006      	b.n	8004a88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	f003 0310 	and.w	r3, r3, #16
 8004a82:	2b10      	cmp	r3, #16
 8004a84:	d0f0      	beq.n	8004a68 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3714      	adds	r7, #20
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr
 8004a94:	00030d40 	.word	0x00030d40

08004a98 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	78fb      	ldrb	r3, [r7, #3]
 8004ab2:	68f9      	ldr	r1, [r7, #12]
 8004ab4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3714      	adds	r7, #20
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr

08004aca <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004aca:	b480      	push	{r7}
 8004acc:	b087      	sub	sp, #28
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f003 0306 	and.w	r3, r3, #6
 8004ae2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d102      	bne.n	8004af0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004aea:	2300      	movs	r3, #0
 8004aec:	75fb      	strb	r3, [r7, #23]
 8004aee:	e00a      	b.n	8004b06 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d002      	beq.n	8004afc <USB_GetDevSpeed+0x32>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2b06      	cmp	r3, #6
 8004afa:	d102      	bne.n	8004b02 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004afc:	2302      	movs	r3, #2
 8004afe:	75fb      	strb	r3, [r7, #23]
 8004b00:	e001      	b.n	8004b06 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004b02:	230f      	movs	r3, #15
 8004b04:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004b06:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	371c      	adds	r7, #28
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	785b      	ldrb	r3, [r3, #1]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d13a      	bne.n	8004ba6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b36:	69da      	ldr	r2, [r3, #28]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	f003 030f 	and.w	r3, r3, #15
 8004b40:	2101      	movs	r1, #1
 8004b42:	fa01 f303 	lsl.w	r3, r1, r3
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	68f9      	ldr	r1, [r7, #12]
 8004b4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	015a      	lsls	r2, r3, #5
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	4413      	add	r3, r2
 8004b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d155      	bne.n	8004c14 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	015a      	lsls	r2, r3, #5
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	4413      	add	r3, r2
 8004b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	791b      	ldrb	r3, [r3, #4]
 8004b82:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b84:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	059b      	lsls	r3, r3, #22
 8004b8a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	68ba      	ldr	r2, [r7, #8]
 8004b90:	0151      	lsls	r1, r2, #5
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	440a      	add	r2, r1
 8004b96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ba2:	6013      	str	r3, [r2, #0]
 8004ba4:	e036      	b.n	8004c14 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bac:	69da      	ldr	r2, [r3, #28]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	f003 030f 	and.w	r3, r3, #15
 8004bb6:	2101      	movs	r1, #1
 8004bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bbc:	041b      	lsls	r3, r3, #16
 8004bbe:	68f9      	ldr	r1, [r7, #12]
 8004bc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	015a      	lsls	r2, r3, #5
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	4413      	add	r3, r2
 8004bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d11a      	bne.n	8004c14 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	015a      	lsls	r2, r3, #5
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	4413      	add	r3, r2
 8004be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	791b      	ldrb	r3, [r3, #4]
 8004bf8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004bfa:	430b      	orrs	r3, r1
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	68ba      	ldr	r2, [r7, #8]
 8004c00:	0151      	lsls	r1, r2, #5
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	440a      	add	r2, r1
 8004c06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c12:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3714      	adds	r7, #20
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
	...

08004c24 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b085      	sub	sp, #20
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	785b      	ldrb	r3, [r3, #1]
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d161      	bne.n	8004d04 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	015a      	lsls	r2, r3, #5
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	4413      	add	r3, r2
 8004c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c56:	d11f      	bne.n	8004c98 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	015a      	lsls	r2, r3, #5
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	4413      	add	r3, r2
 8004c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68ba      	ldr	r2, [r7, #8]
 8004c68:	0151      	lsls	r1, r2, #5
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	440a      	add	r2, r1
 8004c6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c72:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c76:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	015a      	lsls	r2, r3, #5
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	4413      	add	r3, r2
 8004c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68ba      	ldr	r2, [r7, #8]
 8004c88:	0151      	lsls	r1, r2, #5
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	440a      	add	r2, r1
 8004c8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c96:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	f003 030f 	and.w	r3, r3, #15
 8004ca8:	2101      	movs	r1, #1
 8004caa:	fa01 f303 	lsl.w	r3, r1, r3
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	43db      	mvns	r3, r3
 8004cb2:	68f9      	ldr	r1, [r7, #12]
 8004cb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cb8:	4013      	ands	r3, r2
 8004cba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cc2:	69da      	ldr	r2, [r3, #28]
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	f003 030f 	and.w	r3, r3, #15
 8004ccc:	2101      	movs	r1, #1
 8004cce:	fa01 f303 	lsl.w	r3, r1, r3
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	43db      	mvns	r3, r3
 8004cd6:	68f9      	ldr	r1, [r7, #12]
 8004cd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cdc:	4013      	ands	r3, r2
 8004cde:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	015a      	lsls	r2, r3, #5
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	0159      	lsls	r1, r3, #5
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	440b      	add	r3, r1
 8004cf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	4b35      	ldr	r3, [pc, #212]	; (8004dd4 <USB_DeactivateEndpoint+0x1b0>)
 8004cfe:	4013      	ands	r3, r2
 8004d00:	600b      	str	r3, [r1, #0]
 8004d02:	e060      	b.n	8004dc6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	015a      	lsls	r2, r3, #5
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d1a:	d11f      	bne.n	8004d5c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	015a      	lsls	r2, r3, #5
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	4413      	add	r3, r2
 8004d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68ba      	ldr	r2, [r7, #8]
 8004d2c:	0151      	lsls	r1, r2, #5
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	440a      	add	r2, r1
 8004d32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d36:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d3a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	015a      	lsls	r2, r3, #5
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	4413      	add	r3, r2
 8004d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68ba      	ldr	r2, [r7, #8]
 8004d4c:	0151      	lsls	r1, r2, #5
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	440a      	add	r2, r1
 8004d52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d5a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	f003 030f 	and.w	r3, r3, #15
 8004d6c:	2101      	movs	r1, #1
 8004d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d72:	041b      	lsls	r3, r3, #16
 8004d74:	43db      	mvns	r3, r3
 8004d76:	68f9      	ldr	r1, [r7, #12]
 8004d78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d86:	69da      	ldr	r2, [r3, #28]
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	f003 030f 	and.w	r3, r3, #15
 8004d90:	2101      	movs	r1, #1
 8004d92:	fa01 f303 	lsl.w	r3, r1, r3
 8004d96:	041b      	lsls	r3, r3, #16
 8004d98:	43db      	mvns	r3, r3
 8004d9a:	68f9      	ldr	r1, [r7, #12]
 8004d9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004da0:	4013      	ands	r3, r2
 8004da2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	015a      	lsls	r2, r3, #5
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	4413      	add	r3, r2
 8004dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	0159      	lsls	r1, r3, #5
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	440b      	add	r3, r1
 8004dba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	4b05      	ldr	r3, [pc, #20]	; (8004dd8 <USB_DeactivateEndpoint+0x1b4>)
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3714      	adds	r7, #20
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr
 8004dd4:	ec337800 	.word	0xec337800
 8004dd8:	eff37800 	.word	0xeff37800

08004ddc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b08a      	sub	sp, #40	; 0x28
 8004de0:	af02      	add	r7, sp, #8
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	4613      	mov	r3, r2
 8004de8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	785b      	ldrb	r3, [r3, #1]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	f040 815c 	bne.w	80050b6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	699b      	ldr	r3, [r3, #24]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d132      	bne.n	8004e6c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	015a      	lsls	r2, r3, #5
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	69ba      	ldr	r2, [r7, #24]
 8004e16:	0151      	lsls	r1, r2, #5
 8004e18:	69fa      	ldr	r2, [r7, #28]
 8004e1a:	440a      	add	r2, r1
 8004e1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e20:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e24:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e28:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	015a      	lsls	r2, r3, #5
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	4413      	add	r3, r2
 8004e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	69ba      	ldr	r2, [r7, #24]
 8004e3a:	0151      	lsls	r1, r2, #5
 8004e3c:	69fa      	ldr	r2, [r7, #28]
 8004e3e:	440a      	add	r2, r1
 8004e40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e48:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	015a      	lsls	r2, r3, #5
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	4413      	add	r3, r2
 8004e52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	69ba      	ldr	r2, [r7, #24]
 8004e5a:	0151      	lsls	r1, r2, #5
 8004e5c:	69fa      	ldr	r2, [r7, #28]
 8004e5e:	440a      	add	r2, r1
 8004e60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e64:	0cdb      	lsrs	r3, r3, #19
 8004e66:	04db      	lsls	r3, r3, #19
 8004e68:	6113      	str	r3, [r2, #16]
 8004e6a:	e074      	b.n	8004f56 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	015a      	lsls	r2, r3, #5
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	4413      	add	r3, r2
 8004e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	69ba      	ldr	r2, [r7, #24]
 8004e7c:	0151      	lsls	r1, r2, #5
 8004e7e:	69fa      	ldr	r2, [r7, #28]
 8004e80:	440a      	add	r2, r1
 8004e82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e86:	0cdb      	lsrs	r3, r3, #19
 8004e88:	04db      	lsls	r3, r3, #19
 8004e8a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	015a      	lsls	r2, r3, #5
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	4413      	add	r3, r2
 8004e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	69ba      	ldr	r2, [r7, #24]
 8004e9c:	0151      	lsls	r1, r2, #5
 8004e9e:	69fa      	ldr	r2, [r7, #28]
 8004ea0:	440a      	add	r2, r1
 8004ea2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ea6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004eaa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004eae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	015a      	lsls	r2, r3, #5
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ebc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	6999      	ldr	r1, [r3, #24]
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	440b      	add	r3, r1
 8004ec8:	1e59      	subs	r1, r3, #1
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ed2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004ed4:	4b9d      	ldr	r3, [pc, #628]	; (800514c <USB_EPStartXfer+0x370>)
 8004ed6:	400b      	ands	r3, r1
 8004ed8:	69b9      	ldr	r1, [r7, #24]
 8004eda:	0148      	lsls	r0, r1, #5
 8004edc:	69f9      	ldr	r1, [r7, #28]
 8004ede:	4401      	add	r1, r0
 8004ee0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	015a      	lsls	r2, r3, #5
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	4413      	add	r3, r2
 8004ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef4:	691a      	ldr	r2, [r3, #16]
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004efe:	69b9      	ldr	r1, [r7, #24]
 8004f00:	0148      	lsls	r0, r1, #5
 8004f02:	69f9      	ldr	r1, [r7, #28]
 8004f04:	4401      	add	r1, r0
 8004f06:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	791b      	ldrb	r3, [r3, #4]
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d11f      	bne.n	8004f56 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	015a      	lsls	r2, r3, #5
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	69ba      	ldr	r2, [r7, #24]
 8004f26:	0151      	lsls	r1, r2, #5
 8004f28:	69fa      	ldr	r2, [r7, #28]
 8004f2a:	440a      	add	r2, r1
 8004f2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f30:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004f34:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	015a      	lsls	r2, r3, #5
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	69ba      	ldr	r2, [r7, #24]
 8004f46:	0151      	lsls	r1, r2, #5
 8004f48:	69fa      	ldr	r2, [r7, #28]
 8004f4a:	440a      	add	r2, r1
 8004f4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f50:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f54:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004f56:	79fb      	ldrb	r3, [r7, #7]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d14b      	bne.n	8004ff4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	695b      	ldr	r3, [r3, #20]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d009      	beq.n	8004f78 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	015a      	lsls	r2, r3, #5
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f70:	461a      	mov	r2, r3
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	791b      	ldrb	r3, [r3, #4]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d128      	bne.n	8004fd2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d110      	bne.n	8004fb2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	015a      	lsls	r2, r3, #5
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	4413      	add	r3, r2
 8004f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	69ba      	ldr	r2, [r7, #24]
 8004fa0:	0151      	lsls	r1, r2, #5
 8004fa2:	69fa      	ldr	r2, [r7, #28]
 8004fa4:	440a      	add	r2, r1
 8004fa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004faa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fae:	6013      	str	r3, [r2, #0]
 8004fb0:	e00f      	b.n	8004fd2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	015a      	lsls	r2, r3, #5
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	4413      	add	r3, r2
 8004fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	69ba      	ldr	r2, [r7, #24]
 8004fc2:	0151      	lsls	r1, r2, #5
 8004fc4:	69fa      	ldr	r2, [r7, #28]
 8004fc6:	440a      	add	r2, r1
 8004fc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fd0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	015a      	lsls	r2, r3, #5
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	4413      	add	r3, r2
 8004fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	69ba      	ldr	r2, [r7, #24]
 8004fe2:	0151      	lsls	r1, r2, #5
 8004fe4:	69fa      	ldr	r2, [r7, #28]
 8004fe6:	440a      	add	r2, r1
 8004fe8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ff0:	6013      	str	r3, [r2, #0]
 8004ff2:	e133      	b.n	800525c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	015a      	lsls	r2, r3, #5
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	69ba      	ldr	r2, [r7, #24]
 8005004:	0151      	lsls	r1, r2, #5
 8005006:	69fa      	ldr	r2, [r7, #28]
 8005008:	440a      	add	r2, r1
 800500a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800500e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005012:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	791b      	ldrb	r3, [r3, #4]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d015      	beq.n	8005048 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	2b00      	cmp	r3, #0
 8005022:	f000 811b 	beq.w	800525c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800502c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	f003 030f 	and.w	r3, r3, #15
 8005036:	2101      	movs	r1, #1
 8005038:	fa01 f303 	lsl.w	r3, r1, r3
 800503c:	69f9      	ldr	r1, [r7, #28]
 800503e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005042:	4313      	orrs	r3, r2
 8005044:	634b      	str	r3, [r1, #52]	; 0x34
 8005046:	e109      	b.n	800525c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005054:	2b00      	cmp	r3, #0
 8005056:	d110      	bne.n	800507a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	015a      	lsls	r2, r3, #5
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	4413      	add	r3, r2
 8005060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	69ba      	ldr	r2, [r7, #24]
 8005068:	0151      	lsls	r1, r2, #5
 800506a:	69fa      	ldr	r2, [r7, #28]
 800506c:	440a      	add	r2, r1
 800506e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005072:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005076:	6013      	str	r3, [r2, #0]
 8005078:	e00f      	b.n	800509a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	015a      	lsls	r2, r3, #5
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	4413      	add	r3, r2
 8005082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	0151      	lsls	r1, r2, #5
 800508c:	69fa      	ldr	r2, [r7, #28]
 800508e:	440a      	add	r2, r1
 8005090:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005098:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	6919      	ldr	r1, [r3, #16]
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	781a      	ldrb	r2, [r3, #0]
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	699b      	ldr	r3, [r3, #24]
 80050a6:	b298      	uxth	r0, r3
 80050a8:	79fb      	ldrb	r3, [r7, #7]
 80050aa:	9300      	str	r3, [sp, #0]
 80050ac:	4603      	mov	r3, r0
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f000 fade 	bl	8005670 <USB_WritePacket>
 80050b4:	e0d2      	b.n	800525c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	015a      	lsls	r2, r3, #5
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	4413      	add	r3, r2
 80050be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050c2:	691b      	ldr	r3, [r3, #16]
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	0151      	lsls	r1, r2, #5
 80050c8:	69fa      	ldr	r2, [r7, #28]
 80050ca:	440a      	add	r2, r1
 80050cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050d0:	0cdb      	lsrs	r3, r3, #19
 80050d2:	04db      	lsls	r3, r3, #19
 80050d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	015a      	lsls	r2, r3, #5
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	4413      	add	r3, r2
 80050de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	0151      	lsls	r1, r2, #5
 80050e8:	69fa      	ldr	r2, [r7, #28]
 80050ea:	440a      	add	r2, r1
 80050ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80050f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80050f8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d126      	bne.n	8005150 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	015a      	lsls	r2, r3, #5
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	4413      	add	r3, r2
 800510a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800510e:	691a      	ldr	r2, [r3, #16]
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005118:	69b9      	ldr	r1, [r7, #24]
 800511a:	0148      	lsls	r0, r1, #5
 800511c:	69f9      	ldr	r1, [r7, #28]
 800511e:	4401      	add	r1, r0
 8005120:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005124:	4313      	orrs	r3, r2
 8005126:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	015a      	lsls	r2, r3, #5
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	4413      	add	r3, r2
 8005130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	69ba      	ldr	r2, [r7, #24]
 8005138:	0151      	lsls	r1, r2, #5
 800513a:	69fa      	ldr	r2, [r7, #28]
 800513c:	440a      	add	r2, r1
 800513e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005142:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005146:	6113      	str	r3, [r2, #16]
 8005148:	e03a      	b.n	80051c0 <USB_EPStartXfer+0x3e4>
 800514a:	bf00      	nop
 800514c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	699a      	ldr	r2, [r3, #24]
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	4413      	add	r3, r2
 800515a:	1e5a      	subs	r2, r3, #1
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	fbb2 f3f3 	udiv	r3, r2, r3
 8005164:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	8afa      	ldrh	r2, [r7, #22]
 800516c:	fb03 f202 	mul.w	r2, r3, r2
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	015a      	lsls	r2, r3, #5
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	4413      	add	r3, r2
 800517c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005180:	691a      	ldr	r2, [r3, #16]
 8005182:	8afb      	ldrh	r3, [r7, #22]
 8005184:	04d9      	lsls	r1, r3, #19
 8005186:	4b38      	ldr	r3, [pc, #224]	; (8005268 <USB_EPStartXfer+0x48c>)
 8005188:	400b      	ands	r3, r1
 800518a:	69b9      	ldr	r1, [r7, #24]
 800518c:	0148      	lsls	r0, r1, #5
 800518e:	69f9      	ldr	r1, [r7, #28]
 8005190:	4401      	add	r1, r0
 8005192:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005196:	4313      	orrs	r3, r2
 8005198:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	015a      	lsls	r2, r3, #5
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	4413      	add	r3, r2
 80051a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a6:	691a      	ldr	r2, [r3, #16]
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	69db      	ldr	r3, [r3, #28]
 80051ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051b0:	69b9      	ldr	r1, [r7, #24]
 80051b2:	0148      	lsls	r0, r1, #5
 80051b4:	69f9      	ldr	r1, [r7, #28]
 80051b6:	4401      	add	r1, r0
 80051b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80051bc:	4313      	orrs	r3, r2
 80051be:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80051c0:	79fb      	ldrb	r3, [r7, #7]
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d10d      	bne.n	80051e2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d009      	beq.n	80051e2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	6919      	ldr	r1, [r3, #16]
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	015a      	lsls	r2, r3, #5
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	4413      	add	r3, r2
 80051da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051de:	460a      	mov	r2, r1
 80051e0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	791b      	ldrb	r3, [r3, #4]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d128      	bne.n	800523c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d110      	bne.n	800521c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	015a      	lsls	r2, r3, #5
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	4413      	add	r3, r2
 8005202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	69ba      	ldr	r2, [r7, #24]
 800520a:	0151      	lsls	r1, r2, #5
 800520c:	69fa      	ldr	r2, [r7, #28]
 800520e:	440a      	add	r2, r1
 8005210:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005214:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005218:	6013      	str	r3, [r2, #0]
 800521a:	e00f      	b.n	800523c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	015a      	lsls	r2, r3, #5
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	4413      	add	r3, r2
 8005224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	69ba      	ldr	r2, [r7, #24]
 800522c:	0151      	lsls	r1, r2, #5
 800522e:	69fa      	ldr	r2, [r7, #28]
 8005230:	440a      	add	r2, r1
 8005232:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800523a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	015a      	lsls	r2, r3, #5
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	4413      	add	r3, r2
 8005244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	69ba      	ldr	r2, [r7, #24]
 800524c:	0151      	lsls	r1, r2, #5
 800524e:	69fa      	ldr	r2, [r7, #28]
 8005250:	440a      	add	r2, r1
 8005252:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005256:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800525a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3720      	adds	r7, #32
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	1ff80000 	.word	0x1ff80000

0800526c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800526c:	b480      	push	{r7}
 800526e:	b087      	sub	sp, #28
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	4613      	mov	r3, r2
 8005278:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	785b      	ldrb	r3, [r3, #1]
 8005288:	2b01      	cmp	r3, #1
 800528a:	f040 80ce 	bne.w	800542a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	699b      	ldr	r3, [r3, #24]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d132      	bne.n	80052fc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	015a      	lsls	r2, r3, #5
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	4413      	add	r3, r2
 800529e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	0151      	lsls	r1, r2, #5
 80052a8:	697a      	ldr	r2, [r7, #20]
 80052aa:	440a      	add	r2, r1
 80052ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80052b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80052b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	015a      	lsls	r2, r3, #5
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	4413      	add	r3, r2
 80052c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	693a      	ldr	r2, [r7, #16]
 80052ca:	0151      	lsls	r1, r2, #5
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	440a      	add	r2, r1
 80052d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80052d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	015a      	lsls	r2, r3, #5
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	4413      	add	r3, r2
 80052e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	0151      	lsls	r1, r2, #5
 80052ec:	697a      	ldr	r2, [r7, #20]
 80052ee:	440a      	add	r2, r1
 80052f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052f4:	0cdb      	lsrs	r3, r3, #19
 80052f6:	04db      	lsls	r3, r3, #19
 80052f8:	6113      	str	r3, [r2, #16]
 80052fa:	e04e      	b.n	800539a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	015a      	lsls	r2, r3, #5
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	4413      	add	r3, r2
 8005304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	693a      	ldr	r2, [r7, #16]
 800530c:	0151      	lsls	r1, r2, #5
 800530e:	697a      	ldr	r2, [r7, #20]
 8005310:	440a      	add	r2, r1
 8005312:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005316:	0cdb      	lsrs	r3, r3, #19
 8005318:	04db      	lsls	r3, r3, #19
 800531a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	015a      	lsls	r2, r3, #5
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	4413      	add	r3, r2
 8005324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	693a      	ldr	r2, [r7, #16]
 800532c:	0151      	lsls	r1, r2, #5
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	440a      	add	r2, r1
 8005332:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005336:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800533a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800533e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	699a      	ldr	r2, [r3, #24]
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	429a      	cmp	r2, r3
 800534a:	d903      	bls.n	8005354 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	68da      	ldr	r2, [r3, #12]
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	015a      	lsls	r2, r3, #5
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	4413      	add	r3, r2
 800535c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	693a      	ldr	r2, [r7, #16]
 8005364:	0151      	lsls	r1, r2, #5
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	440a      	add	r2, r1
 800536a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800536e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005372:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	015a      	lsls	r2, r3, #5
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	4413      	add	r3, r2
 800537c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005380:	691a      	ldr	r2, [r3, #16]
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	699b      	ldr	r3, [r3, #24]
 8005386:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800538a:	6939      	ldr	r1, [r7, #16]
 800538c:	0148      	lsls	r0, r1, #5
 800538e:	6979      	ldr	r1, [r7, #20]
 8005390:	4401      	add	r1, r0
 8005392:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005396:	4313      	orrs	r3, r2
 8005398:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800539a:	79fb      	ldrb	r3, [r7, #7]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d11e      	bne.n	80053de <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	695b      	ldr	r3, [r3, #20]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d009      	beq.n	80053bc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	015a      	lsls	r2, r3, #5
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	4413      	add	r3, r2
 80053b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053b4:	461a      	mov	r2, r3
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	015a      	lsls	r2, r3, #5
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	4413      	add	r3, r2
 80053c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	0151      	lsls	r1, r2, #5
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	440a      	add	r2, r1
 80053d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053da:	6013      	str	r3, [r2, #0]
 80053dc:	e097      	b.n	800550e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	015a      	lsls	r2, r3, #5
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	4413      	add	r3, r2
 80053e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	0151      	lsls	r1, r2, #5
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	440a      	add	r2, r1
 80053f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053fc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	2b00      	cmp	r3, #0
 8005404:	f000 8083 	beq.w	800550e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800540e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	f003 030f 	and.w	r3, r3, #15
 8005418:	2101      	movs	r1, #1
 800541a:	fa01 f303 	lsl.w	r3, r1, r3
 800541e:	6979      	ldr	r1, [r7, #20]
 8005420:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005424:	4313      	orrs	r3, r2
 8005426:	634b      	str	r3, [r1, #52]	; 0x34
 8005428:	e071      	b.n	800550e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	015a      	lsls	r2, r3, #5
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	4413      	add	r3, r2
 8005432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	0151      	lsls	r1, r2, #5
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	440a      	add	r2, r1
 8005440:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005444:	0cdb      	lsrs	r3, r3, #19
 8005446:	04db      	lsls	r3, r3, #19
 8005448:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	015a      	lsls	r2, r3, #5
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	4413      	add	r3, r2
 8005452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	0151      	lsls	r1, r2, #5
 800545c:	697a      	ldr	r2, [r7, #20]
 800545e:	440a      	add	r2, r1
 8005460:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005464:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005468:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800546c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d003      	beq.n	800547e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	68da      	ldr	r2, [r3, #12]
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	68da      	ldr	r2, [r3, #12]
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	015a      	lsls	r2, r3, #5
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	4413      	add	r3, r2
 800548e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	693a      	ldr	r2, [r7, #16]
 8005496:	0151      	lsls	r1, r2, #5
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	440a      	add	r2, r1
 800549c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	015a      	lsls	r2, r3, #5
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	4413      	add	r3, r2
 80054ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b2:	691a      	ldr	r2, [r3, #16]
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	69db      	ldr	r3, [r3, #28]
 80054b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054bc:	6939      	ldr	r1, [r7, #16]
 80054be:	0148      	lsls	r0, r1, #5
 80054c0:	6979      	ldr	r1, [r7, #20]
 80054c2:	4401      	add	r1, r0
 80054c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80054c8:	4313      	orrs	r3, r2
 80054ca:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80054cc:	79fb      	ldrb	r3, [r7, #7]
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d10d      	bne.n	80054ee <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d009      	beq.n	80054ee <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	6919      	ldr	r1, [r3, #16]
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	015a      	lsls	r2, r3, #5
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	4413      	add	r3, r2
 80054e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ea:	460a      	mov	r2, r1
 80054ec:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	015a      	lsls	r2, r3, #5
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	4413      	add	r3, r2
 80054f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	0151      	lsls	r1, r2, #5
 8005500:	697a      	ldr	r2, [r7, #20]
 8005502:	440a      	add	r2, r1
 8005504:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005508:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800550c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	371c      	adds	r7, #28
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800551c:	b480      	push	{r7}
 800551e:	b087      	sub	sp, #28
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005526:	2300      	movs	r3, #0
 8005528:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800552a:	2300      	movs	r3, #0
 800552c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	785b      	ldrb	r3, [r3, #1]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d14a      	bne.n	80055d0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	015a      	lsls	r2, r3, #5
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	4413      	add	r3, r2
 8005544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800554e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005552:	f040 8086 	bne.w	8005662 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	015a      	lsls	r2, r3, #5
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	4413      	add	r3, r2
 8005560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	683a      	ldr	r2, [r7, #0]
 8005568:	7812      	ldrb	r2, [r2, #0]
 800556a:	0151      	lsls	r1, r2, #5
 800556c:	693a      	ldr	r2, [r7, #16]
 800556e:	440a      	add	r2, r1
 8005570:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005574:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005578:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	015a      	lsls	r2, r3, #5
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	4413      	add	r3, r2
 8005584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	683a      	ldr	r2, [r7, #0]
 800558c:	7812      	ldrb	r2, [r2, #0]
 800558e:	0151      	lsls	r1, r2, #5
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	440a      	add	r2, r1
 8005594:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005598:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800559c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	3301      	adds	r3, #1
 80055a2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f242 7210 	movw	r2, #10000	; 0x2710
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d902      	bls.n	80055b4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	75fb      	strb	r3, [r7, #23]
          break;
 80055b2:	e056      	b.n	8005662 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	015a      	lsls	r2, r3, #5
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	4413      	add	r3, r2
 80055be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055cc:	d0e7      	beq.n	800559e <USB_EPStopXfer+0x82>
 80055ce:	e048      	b.n	8005662 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	015a      	lsls	r2, r3, #5
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	4413      	add	r3, r2
 80055da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055e8:	d13b      	bne.n	8005662 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	015a      	lsls	r2, r3, #5
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	4413      	add	r3, r2
 80055f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	683a      	ldr	r2, [r7, #0]
 80055fc:	7812      	ldrb	r2, [r2, #0]
 80055fe:	0151      	lsls	r1, r2, #5
 8005600:	693a      	ldr	r2, [r7, #16]
 8005602:	440a      	add	r2, r1
 8005604:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005608:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800560c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	015a      	lsls	r2, r3, #5
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	4413      	add	r3, r2
 8005618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	683a      	ldr	r2, [r7, #0]
 8005620:	7812      	ldrb	r2, [r2, #0]
 8005622:	0151      	lsls	r1, r2, #5
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	440a      	add	r2, r1
 8005628:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800562c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005630:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	3301      	adds	r3, #1
 8005636:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f242 7210 	movw	r2, #10000	; 0x2710
 800563e:	4293      	cmp	r3, r2
 8005640:	d902      	bls.n	8005648 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	75fb      	strb	r3, [r7, #23]
          break;
 8005646:	e00c      	b.n	8005662 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	015a      	lsls	r2, r3, #5
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	4413      	add	r3, r2
 8005652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800565c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005660:	d0e7      	beq.n	8005632 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005662:	7dfb      	ldrb	r3, [r7, #23]
}
 8005664:	4618      	mov	r0, r3
 8005666:	371c      	adds	r7, #28
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005670:	b480      	push	{r7}
 8005672:	b089      	sub	sp, #36	; 0x24
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	4611      	mov	r1, r2
 800567c:	461a      	mov	r2, r3
 800567e:	460b      	mov	r3, r1
 8005680:	71fb      	strb	r3, [r7, #7]
 8005682:	4613      	mov	r3, r2
 8005684:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800568e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005692:	2b00      	cmp	r3, #0
 8005694:	d123      	bne.n	80056de <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005696:	88bb      	ldrh	r3, [r7, #4]
 8005698:	3303      	adds	r3, #3
 800569a:	089b      	lsrs	r3, r3, #2
 800569c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800569e:	2300      	movs	r3, #0
 80056a0:	61bb      	str	r3, [r7, #24]
 80056a2:	e018      	b.n	80056d6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80056a4:	79fb      	ldrb	r3, [r7, #7]
 80056a6:	031a      	lsls	r2, r3, #12
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	4413      	add	r3, r2
 80056ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056b0:	461a      	mov	r2, r3
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	3301      	adds	r3, #1
 80056bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	3301      	adds	r3, #1
 80056c2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	3301      	adds	r3, #1
 80056c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	3301      	adds	r3, #1
 80056ce:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	3301      	adds	r3, #1
 80056d4:	61bb      	str	r3, [r7, #24]
 80056d6:	69ba      	ldr	r2, [r7, #24]
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	429a      	cmp	r2, r3
 80056dc:	d3e2      	bcc.n	80056a4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3724      	adds	r7, #36	; 0x24
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b08b      	sub	sp, #44	; 0x2c
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	4613      	mov	r3, r2
 80056f8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005702:	88fb      	ldrh	r3, [r7, #6]
 8005704:	089b      	lsrs	r3, r3, #2
 8005706:	b29b      	uxth	r3, r3
 8005708:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800570a:	88fb      	ldrh	r3, [r7, #6]
 800570c:	f003 0303 	and.w	r3, r3, #3
 8005710:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005712:	2300      	movs	r3, #0
 8005714:	623b      	str	r3, [r7, #32]
 8005716:	e014      	b.n	8005742 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005722:	601a      	str	r2, [r3, #0]
    pDest++;
 8005724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005726:	3301      	adds	r3, #1
 8005728:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800572a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572c:	3301      	adds	r3, #1
 800572e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005732:	3301      	adds	r3, #1
 8005734:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005738:	3301      	adds	r3, #1
 800573a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800573c:	6a3b      	ldr	r3, [r7, #32]
 800573e:	3301      	adds	r3, #1
 8005740:	623b      	str	r3, [r7, #32]
 8005742:	6a3a      	ldr	r2, [r7, #32]
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	429a      	cmp	r2, r3
 8005748:	d3e6      	bcc.n	8005718 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800574a:	8bfb      	ldrh	r3, [r7, #30]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d01e      	beq.n	800578e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005750:	2300      	movs	r3, #0
 8005752:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800575a:	461a      	mov	r2, r3
 800575c:	f107 0310 	add.w	r3, r7, #16
 8005760:	6812      	ldr	r2, [r2, #0]
 8005762:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	6a3b      	ldr	r3, [r7, #32]
 8005768:	b2db      	uxtb	r3, r3
 800576a:	00db      	lsls	r3, r3, #3
 800576c:	fa22 f303 	lsr.w	r3, r2, r3
 8005770:	b2da      	uxtb	r2, r3
 8005772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005774:	701a      	strb	r2, [r3, #0]
      i++;
 8005776:	6a3b      	ldr	r3, [r7, #32]
 8005778:	3301      	adds	r3, #1
 800577a:	623b      	str	r3, [r7, #32]
      pDest++;
 800577c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577e:	3301      	adds	r3, #1
 8005780:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005782:	8bfb      	ldrh	r3, [r7, #30]
 8005784:	3b01      	subs	r3, #1
 8005786:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005788:	8bfb      	ldrh	r3, [r7, #30]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1ea      	bne.n	8005764 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800578e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005790:	4618      	mov	r0, r3
 8005792:	372c      	adds	r7, #44	; 0x2c
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800579c:	b480      	push	{r7}
 800579e:	b085      	sub	sp, #20
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	785b      	ldrb	r3, [r3, #1]
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d12c      	bne.n	8005812 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	015a      	lsls	r2, r3, #5
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	4413      	add	r3, r2
 80057c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	db12      	blt.n	80057f0 <USB_EPSetStall+0x54>
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00f      	beq.n	80057f0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	015a      	lsls	r2, r3, #5
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	4413      	add	r3, r2
 80057d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68ba      	ldr	r2, [r7, #8]
 80057e0:	0151      	lsls	r1, r2, #5
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	440a      	add	r2, r1
 80057e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80057ee:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	015a      	lsls	r2, r3, #5
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	4413      	add	r3, r2
 80057f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68ba      	ldr	r2, [r7, #8]
 8005800:	0151      	lsls	r1, r2, #5
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	440a      	add	r2, r1
 8005806:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800580a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800580e:	6013      	str	r3, [r2, #0]
 8005810:	e02b      	b.n	800586a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	015a      	lsls	r2, r3, #5
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	4413      	add	r3, r2
 800581a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	db12      	blt.n	800584a <USB_EPSetStall+0xae>
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00f      	beq.n	800584a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	015a      	lsls	r2, r3, #5
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	4413      	add	r3, r2
 8005832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68ba      	ldr	r2, [r7, #8]
 800583a:	0151      	lsls	r1, r2, #5
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	440a      	add	r2, r1
 8005840:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005844:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005848:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	015a      	lsls	r2, r3, #5
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	4413      	add	r3, r2
 8005852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68ba      	ldr	r2, [r7, #8]
 800585a:	0151      	lsls	r1, r2, #5
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	440a      	add	r2, r1
 8005860:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005864:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005868:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800586a:	2300      	movs	r3, #0
}
 800586c:	4618      	mov	r0, r3
 800586e:	3714      	adds	r7, #20
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005878:	b480      	push	{r7}
 800587a:	b085      	sub	sp, #20
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	785b      	ldrb	r3, [r3, #1]
 8005890:	2b01      	cmp	r3, #1
 8005892:	d128      	bne.n	80058e6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	015a      	lsls	r2, r3, #5
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	4413      	add	r3, r2
 800589c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68ba      	ldr	r2, [r7, #8]
 80058a4:	0151      	lsls	r1, r2, #5
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	440a      	add	r2, r1
 80058aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80058b2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	791b      	ldrb	r3, [r3, #4]
 80058b8:	2b03      	cmp	r3, #3
 80058ba:	d003      	beq.n	80058c4 <USB_EPClearStall+0x4c>
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	791b      	ldrb	r3, [r3, #4]
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d138      	bne.n	8005936 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	015a      	lsls	r2, r3, #5
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	4413      	add	r3, r2
 80058cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68ba      	ldr	r2, [r7, #8]
 80058d4:	0151      	lsls	r1, r2, #5
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	440a      	add	r2, r1
 80058da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058e2:	6013      	str	r3, [r2, #0]
 80058e4:	e027      	b.n	8005936 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	015a      	lsls	r2, r3, #5
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	4413      	add	r3, r2
 80058ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68ba      	ldr	r2, [r7, #8]
 80058f6:	0151      	lsls	r1, r2, #5
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	440a      	add	r2, r1
 80058fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005900:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005904:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	791b      	ldrb	r3, [r3, #4]
 800590a:	2b03      	cmp	r3, #3
 800590c:	d003      	beq.n	8005916 <USB_EPClearStall+0x9e>
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	791b      	ldrb	r3, [r3, #4]
 8005912:	2b02      	cmp	r3, #2
 8005914:	d10f      	bne.n	8005936 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	015a      	lsls	r2, r3, #5
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	4413      	add	r3, r2
 800591e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68ba      	ldr	r2, [r7, #8]
 8005926:	0151      	lsls	r1, r2, #5
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	440a      	add	r2, r1
 800592c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005934:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	3714      	adds	r7, #20
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	460b      	mov	r3, r1
 800594e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005962:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005966:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	78fb      	ldrb	r3, [r7, #3]
 8005972:	011b      	lsls	r3, r3, #4
 8005974:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005978:	68f9      	ldr	r1, [r7, #12]
 800597a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800597e:	4313      	orrs	r3, r2
 8005980:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	3714      	adds	r7, #20
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005990:	b480      	push	{r7}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80059aa:	f023 0303 	bic.w	r3, r3, #3
 80059ae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059be:	f023 0302 	bic.w	r3, r3, #2
 80059c2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3714      	adds	r7, #20
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr

080059d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80059d2:	b480      	push	{r7}
 80059d4:	b085      	sub	sp, #20
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80059ec:	f023 0303 	bic.w	r3, r3, #3
 80059f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a00:	f043 0302 	orr.w	r3, r3, #2
 8005a04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3714      	adds	r7, #20
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	695b      	ldr	r3, [r3, #20]
 8005a20:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	4013      	ands	r3, r2
 8005a2a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3714      	adds	r7, #20
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr

08005a3a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a3a:	b480      	push	{r7}
 8005a3c:	b085      	sub	sp, #20
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a56:	69db      	ldr	r3, [r3, #28]
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	0c1b      	lsrs	r3, r3, #16
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3714      	adds	r7, #20
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr

08005a6e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a6e:	b480      	push	{r7}
 8005a70:	b085      	sub	sp, #20
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a80:	699b      	ldr	r3, [r3, #24]
 8005a82:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a8a:	69db      	ldr	r3, [r3, #28]
 8005a8c:	68ba      	ldr	r2, [r7, #8]
 8005a8e:	4013      	ands	r3, r2
 8005a90:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	b29b      	uxth	r3, r3
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3714      	adds	r7, #20
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	b085      	sub	sp, #20
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
 8005aaa:	460b      	mov	r3, r1
 8005aac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005ab2:	78fb      	ldrb	r3, [r7, #3]
 8005ab4:	015a      	lsls	r2, r3, #5
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	4413      	add	r3, r2
 8005aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ac8:	695b      	ldr	r3, [r3, #20]
 8005aca:	68ba      	ldr	r2, [r7, #8]
 8005acc:	4013      	ands	r3, r2
 8005ace:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005ad0:	68bb      	ldr	r3, [r7, #8]
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3714      	adds	r7, #20
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr

08005ade <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005ade:	b480      	push	{r7}
 8005ae0:	b087      	sub	sp, #28
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
 8005ae6:	460b      	mov	r3, r1
 8005ae8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b00:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005b02:	78fb      	ldrb	r3, [r7, #3]
 8005b04:	f003 030f 	and.w	r3, r3, #15
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b0e:	01db      	lsls	r3, r3, #7
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	693a      	ldr	r2, [r7, #16]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005b18:	78fb      	ldrb	r3, [r7, #3]
 8005b1a:	015a      	lsls	r2, r3, #5
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	4413      	add	r3, r2
 8005b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	693a      	ldr	r2, [r7, #16]
 8005b28:	4013      	ands	r3, r2
 8005b2a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005b2c:	68bb      	ldr	r3, [r7, #8]
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	371c      	adds	r7, #28
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr

08005b3a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005b3a:	b480      	push	{r7}
 8005b3c:	b083      	sub	sp, #12
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	f003 0301 	and.w	r3, r3, #1
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	370c      	adds	r7, #12
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr

08005b56 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005b56:	b480      	push	{r7}
 8005b58:	b085      	sub	sp, #20
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b70:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005b74:	f023 0307 	bic.w	r3, r3, #7
 8005b78:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	68fa      	ldr	r2, [r7, #12]
 8005b84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b8c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3714      	adds	r7, #20
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b087      	sub	sp, #28
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	607a      	str	r2, [r7, #4]
 8005ba8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	333c      	adds	r3, #60	; 0x3c
 8005bb2:	3304      	adds	r3, #4
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	4a26      	ldr	r2, [pc, #152]	; (8005c54 <USB_EP0_OutStart+0xb8>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d90a      	bls.n	8005bd6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bd0:	d101      	bne.n	8005bd6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	e037      	b.n	8005c46 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bdc:	461a      	mov	r2, r3
 8005bde:	2300      	movs	r3, #0
 8005be0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bf0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bf4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	697a      	ldr	r2, [r7, #20]
 8005c00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c04:	f043 0318 	orr.w	r3, r3, #24
 8005c08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c18:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005c1c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005c1e:	7afb      	ldrb	r3, [r7, #11]
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d10f      	bne.n	8005c44 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c3e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005c42:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c44:	2300      	movs	r3, #0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	371c      	adds	r7, #28
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr
 8005c52:	bf00      	nop
 8005c54:	4f54300a 	.word	0x4f54300a

08005c58 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c60:	2300      	movs	r3, #0
 8005c62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	3301      	adds	r3, #1
 8005c68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	4a13      	ldr	r2, [pc, #76]	; (8005cbc <USB_CoreReset+0x64>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d901      	bls.n	8005c76 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e01b      	b.n	8005cae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	daf2      	bge.n	8005c64 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	f043 0201 	orr.w	r2, r3, #1
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	3301      	adds	r3, #1
 8005c92:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	4a09      	ldr	r2, [pc, #36]	; (8005cbc <USB_CoreReset+0x64>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d901      	bls.n	8005ca0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e006      	b.n	8005cae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	f003 0301 	and.w	r3, r3, #1
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d0f0      	beq.n	8005c8e <USB_CoreReset+0x36>

  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3714      	adds	r7, #20
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop
 8005cbc:	00030d40 	.word	0x00030d40

08005cc0 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	460b      	mov	r3, r1
 8005cca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005ccc:	2010      	movs	r0, #16
 8005cce:	f002 f96d 	bl	8007fac <USBD_static_malloc>
 8005cd2:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d109      	bne.n	8005cee <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	32b0      	adds	r2, #176	; 0xb0
 8005ce4:	2100      	movs	r1, #0
 8005ce6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005cea:	2302      	movs	r3, #2
 8005cec:	e048      	b.n	8005d80 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	32b0      	adds	r2, #176	; 0xb0
 8005cf8:	68f9      	ldr	r1, [r7, #12]
 8005cfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	32b0      	adds	r2, #176	; 0xb0
 8005d08:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	7c1b      	ldrb	r3, [r3, #16]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d10d      	bne.n	8005d36 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8005d1a:	4b1b      	ldr	r3, [pc, #108]	; (8005d88 <USBD_HID_Init+0xc8>)
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	f003 020f 	and.w	r2, r3, #15
 8005d22:	6879      	ldr	r1, [r7, #4]
 8005d24:	4613      	mov	r3, r2
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	4413      	add	r3, r2
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	440b      	add	r3, r1
 8005d2e:	3326      	adds	r3, #38	; 0x26
 8005d30:	2207      	movs	r2, #7
 8005d32:	801a      	strh	r2, [r3, #0]
 8005d34:	e00c      	b.n	8005d50 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8005d36:	4b14      	ldr	r3, [pc, #80]	; (8005d88 <USBD_HID_Init+0xc8>)
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	f003 020f 	and.w	r2, r3, #15
 8005d3e:	6879      	ldr	r1, [r7, #4]
 8005d40:	4613      	mov	r3, r2
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	4413      	add	r3, r2
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	440b      	add	r3, r1
 8005d4a:	3326      	adds	r3, #38	; 0x26
 8005d4c:	220a      	movs	r2, #10
 8005d4e:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005d50:	4b0d      	ldr	r3, [pc, #52]	; (8005d88 <USBD_HID_Init+0xc8>)
 8005d52:	7819      	ldrb	r1, [r3, #0]
 8005d54:	2304      	movs	r3, #4
 8005d56:	2203      	movs	r2, #3
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f002 f816 	bl	8007d8a <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8005d5e:	4b0a      	ldr	r3, [pc, #40]	; (8005d88 <USBD_HID_Init+0xc8>)
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	f003 020f 	and.w	r2, r3, #15
 8005d66:	6879      	ldr	r1, [r7, #4]
 8005d68:	4613      	mov	r3, r2
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	4413      	add	r3, r2
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	440b      	add	r3, r1
 8005d72:	3324      	adds	r3, #36	; 0x24
 8005d74:	2201      	movs	r2, #1
 8005d76:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3710      	adds	r7, #16
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}
 8005d88:	2000013e 	.word	0x2000013e

08005d8c <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	460b      	mov	r3, r1
 8005d96:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8005d98:	4b1f      	ldr	r3, [pc, #124]	; (8005e18 <USBD_HID_DeInit+0x8c>)
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f002 f819 	bl	8007dd6 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8005da4:	4b1c      	ldr	r3, [pc, #112]	; (8005e18 <USBD_HID_DeInit+0x8c>)
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	f003 020f 	and.w	r2, r3, #15
 8005dac:	6879      	ldr	r1, [r7, #4]
 8005dae:	4613      	mov	r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	4413      	add	r3, r2
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	440b      	add	r3, r1
 8005db8:	3324      	adds	r3, #36	; 0x24
 8005dba:	2200      	movs	r2, #0
 8005dbc:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8005dbe:	4b16      	ldr	r3, [pc, #88]	; (8005e18 <USBD_HID_DeInit+0x8c>)
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	f003 020f 	and.w	r2, r3, #15
 8005dc6:	6879      	ldr	r1, [r7, #4]
 8005dc8:	4613      	mov	r3, r2
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	4413      	add	r3, r2
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	440b      	add	r3, r1
 8005dd2:	3326      	adds	r3, #38	; 0x26
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	32b0      	adds	r2, #176	; 0xb0
 8005de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d011      	beq.n	8005e0e <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	32b0      	adds	r2, #176	; 0xb0
 8005df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f002 f8e5 	bl	8007fc8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	32b0      	adds	r2, #176	; 0xb0
 8005e08:	2100      	movs	r1, #0
 8005e0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8005e0e:	2300      	movs	r3, #0
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3708      	adds	r7, #8
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	2000013e 	.word	0x2000013e

08005e1c <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b086      	sub	sp, #24
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	32b0      	adds	r2, #176	; 0xb0
 8005e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e34:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e36:	2300      	movs	r3, #0
 8005e38:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d101      	bne.n	8005e48 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8005e44:	2303      	movs	r3, #3
 8005e46:	e0e8      	b.n	800601a <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d046      	beq.n	8005ee2 <USBD_HID_Setup+0xc6>
 8005e54:	2b20      	cmp	r3, #32
 8005e56:	f040 80d8 	bne.w	800600a <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	785b      	ldrb	r3, [r3, #1]
 8005e5e:	3b02      	subs	r3, #2
 8005e60:	2b09      	cmp	r3, #9
 8005e62:	d836      	bhi.n	8005ed2 <USBD_HID_Setup+0xb6>
 8005e64:	a201      	add	r2, pc, #4	; (adr r2, 8005e6c <USBD_HID_Setup+0x50>)
 8005e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e6a:	bf00      	nop
 8005e6c:	08005ec3 	.word	0x08005ec3
 8005e70:	08005ea3 	.word	0x08005ea3
 8005e74:	08005ed3 	.word	0x08005ed3
 8005e78:	08005ed3 	.word	0x08005ed3
 8005e7c:	08005ed3 	.word	0x08005ed3
 8005e80:	08005ed3 	.word	0x08005ed3
 8005e84:	08005ed3 	.word	0x08005ed3
 8005e88:	08005ed3 	.word	0x08005ed3
 8005e8c:	08005eb1 	.word	0x08005eb1
 8005e90:	08005e95 	.word	0x08005e95
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	885b      	ldrh	r3, [r3, #2]
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	601a      	str	r2, [r3, #0]
          break;
 8005ea0:	e01e      	b.n	8005ee0 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f001 fbd5 	bl	8007658 <USBD_CtlSendData>
          break;
 8005eae:	e017      	b.n	8005ee0 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	885b      	ldrh	r3, [r3, #2]
 8005eb4:	0a1b      	lsrs	r3, r3, #8
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	461a      	mov	r2, r3
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	605a      	str	r2, [r3, #4]
          break;
 8005ec0:	e00e      	b.n	8005ee0 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	3304      	adds	r3, #4
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	4619      	mov	r1, r3
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f001 fbc4 	bl	8007658 <USBD_CtlSendData>
          break;
 8005ed0:	e006      	b.n	8005ee0 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005ed2:	6839      	ldr	r1, [r7, #0]
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f001 fb4e 	bl	8007576 <USBD_CtlError>
          ret = USBD_FAIL;
 8005eda:	2303      	movs	r3, #3
 8005edc:	75fb      	strb	r3, [r7, #23]
          break;
 8005ede:	bf00      	nop
      }
      break;
 8005ee0:	e09a      	b.n	8006018 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	785b      	ldrb	r3, [r3, #1]
 8005ee6:	2b0b      	cmp	r3, #11
 8005ee8:	f200 8086 	bhi.w	8005ff8 <USBD_HID_Setup+0x1dc>
 8005eec:	a201      	add	r2, pc, #4	; (adr r2, 8005ef4 <USBD_HID_Setup+0xd8>)
 8005eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef2:	bf00      	nop
 8005ef4:	08005f25 	.word	0x08005f25
 8005ef8:	08006007 	.word	0x08006007
 8005efc:	08005ff9 	.word	0x08005ff9
 8005f00:	08005ff9 	.word	0x08005ff9
 8005f04:	08005ff9 	.word	0x08005ff9
 8005f08:	08005ff9 	.word	0x08005ff9
 8005f0c:	08005f4f 	.word	0x08005f4f
 8005f10:	08005ff9 	.word	0x08005ff9
 8005f14:	08005ff9 	.word	0x08005ff9
 8005f18:	08005ff9 	.word	0x08005ff9
 8005f1c:	08005fa7 	.word	0x08005fa7
 8005f20:	08005fd1 	.word	0x08005fd1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	2b03      	cmp	r3, #3
 8005f2e:	d107      	bne.n	8005f40 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005f30:	f107 030a 	add.w	r3, r7, #10
 8005f34:	2202      	movs	r2, #2
 8005f36:	4619      	mov	r1, r3
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f001 fb8d 	bl	8007658 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005f3e:	e063      	b.n	8006008 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005f40:	6839      	ldr	r1, [r7, #0]
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f001 fb17 	bl	8007576 <USBD_CtlError>
            ret = USBD_FAIL;
 8005f48:	2303      	movs	r3, #3
 8005f4a:	75fb      	strb	r3, [r7, #23]
          break;
 8005f4c:	e05c      	b.n	8006008 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	885b      	ldrh	r3, [r3, #2]
 8005f52:	0a1b      	lsrs	r3, r3, #8
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	2b22      	cmp	r3, #34	; 0x22
 8005f58:	d108      	bne.n	8005f6c <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	88db      	ldrh	r3, [r3, #6]
 8005f5e:	2b4a      	cmp	r3, #74	; 0x4a
 8005f60:	bf28      	it	cs
 8005f62:	234a      	movcs	r3, #74	; 0x4a
 8005f64:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8005f66:	4b2f      	ldr	r3, [pc, #188]	; (8006024 <USBD_HID_Setup+0x208>)
 8005f68:	613b      	str	r3, [r7, #16]
 8005f6a:	e015      	b.n	8005f98 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	885b      	ldrh	r3, [r3, #2]
 8005f70:	0a1b      	lsrs	r3, r3, #8
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	2b21      	cmp	r3, #33	; 0x21
 8005f76:	d108      	bne.n	8005f8a <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8005f78:	4b2b      	ldr	r3, [pc, #172]	; (8006028 <USBD_HID_Setup+0x20c>)
 8005f7a:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	88db      	ldrh	r3, [r3, #6]
 8005f80:	2b09      	cmp	r3, #9
 8005f82:	bf28      	it	cs
 8005f84:	2309      	movcs	r3, #9
 8005f86:	82bb      	strh	r3, [r7, #20]
 8005f88:	e006      	b.n	8005f98 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8005f8a:	6839      	ldr	r1, [r7, #0]
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f001 faf2 	bl	8007576 <USBD_CtlError>
            ret = USBD_FAIL;
 8005f92:	2303      	movs	r3, #3
 8005f94:	75fb      	strb	r3, [r7, #23]
            break;
 8005f96:	e037      	b.n	8006008 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8005f98:	8abb      	ldrh	r3, [r7, #20]
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	6939      	ldr	r1, [r7, #16]
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f001 fb5a 	bl	8007658 <USBD_CtlSendData>
          break;
 8005fa4:	e030      	b.n	8006008 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	2b03      	cmp	r3, #3
 8005fb0:	d107      	bne.n	8005fc2 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	3308      	adds	r3, #8
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	4619      	mov	r1, r3
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f001 fb4c 	bl	8007658 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005fc0:	e022      	b.n	8006008 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005fc2:	6839      	ldr	r1, [r7, #0]
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f001 fad6 	bl	8007576 <USBD_CtlError>
            ret = USBD_FAIL;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	75fb      	strb	r3, [r7, #23]
          break;
 8005fce:	e01b      	b.n	8006008 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	2b03      	cmp	r3, #3
 8005fda:	d106      	bne.n	8005fea <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	885b      	ldrh	r3, [r3, #2]
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005fe8:	e00e      	b.n	8006008 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005fea:	6839      	ldr	r1, [r7, #0]
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f001 fac2 	bl	8007576 <USBD_CtlError>
            ret = USBD_FAIL;
 8005ff2:	2303      	movs	r3, #3
 8005ff4:	75fb      	strb	r3, [r7, #23]
          break;
 8005ff6:	e007      	b.n	8006008 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005ff8:	6839      	ldr	r1, [r7, #0]
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f001 fabb 	bl	8007576 <USBD_CtlError>
          ret = USBD_FAIL;
 8006000:	2303      	movs	r3, #3
 8006002:	75fb      	strb	r3, [r7, #23]
          break;
 8006004:	e000      	b.n	8006008 <USBD_HID_Setup+0x1ec>
          break;
 8006006:	bf00      	nop
      }
      break;
 8006008:	e006      	b.n	8006018 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 800600a:	6839      	ldr	r1, [r7, #0]
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f001 fab2 	bl	8007576 <USBD_CtlError>
      ret = USBD_FAIL;
 8006012:	2303      	movs	r3, #3
 8006014:	75fb      	strb	r3, [r7, #23]
      break;
 8006016:	bf00      	nop
  }

  return (uint8_t)ret;
 8006018:	7dfb      	ldrb	r3, [r7, #23]
}
 800601a:	4618      	mov	r0, r3
 800601c:	3718      	adds	r7, #24
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	200000f4 	.word	0x200000f4
 8006028:	200000dc 	.word	0x200000dc

0800602c <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b086      	sub	sp, #24
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	4613      	mov	r3, r2
 8006038:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	32b0      	adds	r2, #176	; 0xb0
 8006044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006048:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d101      	bne.n	8006054 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006050:	2303      	movs	r3, #3
 8006052:	e014      	b.n	800607e <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800605a:	b2db      	uxtb	r3, r3
 800605c:	2b03      	cmp	r3, #3
 800605e:	d10d      	bne.n	800607c <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == HID_IDLE)
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	7b1b      	ldrb	r3, [r3, #12]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d109      	bne.n	800607c <USBD_HID_SendReport+0x50>
    {
      hhid->state = HID_BUSY;
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	2201      	movs	r2, #1
 800606c:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 800606e:	4b06      	ldr	r3, [pc, #24]	; (8006088 <USBD_HID_SendReport+0x5c>)
 8006070:	7819      	ldrb	r1, [r3, #0]
 8006072:	88fb      	ldrh	r3, [r7, #6]
 8006074:	68ba      	ldr	r2, [r7, #8]
 8006076:	68f8      	ldr	r0, [r7, #12]
 8006078:	f001 ff55 	bl	8007f26 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3718      	adds	r7, #24
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	2000013e 	.word	0x2000013e

0800608c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8006094:	2181      	movs	r1, #129	; 0x81
 8006096:	4809      	ldr	r0, [pc, #36]	; (80060bc <USBD_HID_GetFSCfgDesc+0x30>)
 8006098:	f000 fc35 	bl	8006906 <USBD_GetEpDesc>
 800609c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d002      	beq.n	80060aa <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	220a      	movs	r2, #10
 80060a8:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2222      	movs	r2, #34	; 0x22
 80060ae:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80060b0:	4b02      	ldr	r3, [pc, #8]	; (80060bc <USBD_HID_GetFSCfgDesc+0x30>)
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3710      	adds	r7, #16
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	200000b8 	.word	0x200000b8

080060c0 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80060c8:	2181      	movs	r1, #129	; 0x81
 80060ca:	4809      	ldr	r0, [pc, #36]	; (80060f0 <USBD_HID_GetHSCfgDesc+0x30>)
 80060cc:	f000 fc1b 	bl	8006906 <USBD_GetEpDesc>
 80060d0:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d002      	beq.n	80060de <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2207      	movs	r2, #7
 80060dc:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2222      	movs	r2, #34	; 0x22
 80060e2:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80060e4:	4b02      	ldr	r3, [pc, #8]	; (80060f0 <USBD_HID_GetHSCfgDesc+0x30>)
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3710      	adds	r7, #16
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	200000b8 	.word	0x200000b8

080060f4 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80060fc:	2181      	movs	r1, #129	; 0x81
 80060fe:	4809      	ldr	r0, [pc, #36]	; (8006124 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8006100:	f000 fc01 	bl	8006906 <USBD_GetEpDesc>
 8006104:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d002      	beq.n	8006112 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	220a      	movs	r2, #10
 8006110:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2222      	movs	r2, #34	; 0x22
 8006116:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8006118:	4b02      	ldr	r3, [pc, #8]	; (8006124 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 800611a:	4618      	mov	r0, r3
 800611c:	3710      	adds	r7, #16
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	200000b8 	.word	0x200000b8

08006128 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	460b      	mov	r3, r1
 8006132:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	32b0      	adds	r2, #176	; 0xb0
 800613e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006142:	2200      	movs	r2, #0
 8006144:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8006146:	2300      	movs	r3, #0
}
 8006148:	4618      	mov	r0, r3
 800614a:	370c      	adds	r7, #12
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	220a      	movs	r2, #10
 8006160:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8006162:	4b03      	ldr	r3, [pc, #12]	; (8006170 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006164:	4618      	mov	r0, r3
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr
 8006170:	200000e8 	.word	0x200000e8

08006174 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b086      	sub	sp, #24
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	4613      	mov	r3, r2
 8006180:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d101      	bne.n	800618c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006188:	2303      	movs	r3, #3
 800618a:	e01f      	b.n	80061cc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2200      	movs	r2, #0
 8006190:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2200      	movs	r2, #0
 8006198:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2200      	movs	r2, #0
 80061a0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d003      	beq.n	80061b2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	68ba      	ldr	r2, [r7, #8]
 80061ae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	79fa      	ldrb	r2, [r7, #7]
 80061be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80061c0:	68f8      	ldr	r0, [r7, #12]
 80061c2:	f001 fd7b 	bl	8007cbc <USBD_LL_Init>
 80061c6:	4603      	mov	r3, r0
 80061c8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80061ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3718      	adds	r7, #24
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80061de:	2300      	movs	r3, #0
 80061e0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d101      	bne.n	80061ec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80061e8:	2303      	movs	r3, #3
 80061ea:	e025      	b.n	8006238 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	683a      	ldr	r2, [r7, #0]
 80061f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	32ae      	adds	r2, #174	; 0xae
 80061fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006204:	2b00      	cmp	r3, #0
 8006206:	d00f      	beq.n	8006228 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	32ae      	adds	r2, #174	; 0xae
 8006212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006218:	f107 020e 	add.w	r2, r7, #14
 800621c:	4610      	mov	r0, r2
 800621e:	4798      	blx	r3
 8006220:	4602      	mov	r2, r0
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800622e:	1c5a      	adds	r2, r3, #1
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006236:	2300      	movs	r3, #0
}
 8006238:	4618      	mov	r0, r3
 800623a:	3710      	adds	r7, #16
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b082      	sub	sp, #8
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f001 fd83 	bl	8007d54 <USBD_LL_Start>
 800624e:	4603      	mov	r3, r0
}
 8006250:	4618      	mov	r0, r3
 8006252:	3708      	adds	r7, #8
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006260:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006262:	4618      	mov	r0, r3
 8006264:	370c      	adds	r7, #12
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800626e:	b580      	push	{r7, lr}
 8006270:	b084      	sub	sp, #16
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
 8006276:	460b      	mov	r3, r1
 8006278:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800627a:	2300      	movs	r3, #0
 800627c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006284:	2b00      	cmp	r3, #0
 8006286:	d009      	beq.n	800629c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	78fa      	ldrb	r2, [r7, #3]
 8006292:	4611      	mov	r1, r2
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	4798      	blx	r3
 8006298:	4603      	mov	r3, r0
 800629a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800629c:	7bfb      	ldrb	r3, [r7, #15]
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3710      	adds	r7, #16
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80062a6:	b580      	push	{r7, lr}
 80062a8:	b084      	sub	sp, #16
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
 80062ae:	460b      	mov	r3, r1
 80062b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80062b2:	2300      	movs	r3, #0
 80062b4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	78fa      	ldrb	r2, [r7, #3]
 80062c0:	4611      	mov	r1, r2
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	4798      	blx	r3
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d001      	beq.n	80062d0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80062cc:	2303      	movs	r3, #3
 80062ce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80062d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3710      	adds	r7, #16
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}

080062da <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80062da:	b580      	push	{r7, lr}
 80062dc:	b084      	sub	sp, #16
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
 80062e2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80062ea:	6839      	ldr	r1, [r7, #0]
 80062ec:	4618      	mov	r0, r3
 80062ee:	f001 f908 	bl	8007502 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2201      	movs	r2, #1
 80062f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006300:	461a      	mov	r2, r3
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800630e:	f003 031f 	and.w	r3, r3, #31
 8006312:	2b02      	cmp	r3, #2
 8006314:	d01a      	beq.n	800634c <USBD_LL_SetupStage+0x72>
 8006316:	2b02      	cmp	r3, #2
 8006318:	d822      	bhi.n	8006360 <USBD_LL_SetupStage+0x86>
 800631a:	2b00      	cmp	r3, #0
 800631c:	d002      	beq.n	8006324 <USBD_LL_SetupStage+0x4a>
 800631e:	2b01      	cmp	r3, #1
 8006320:	d00a      	beq.n	8006338 <USBD_LL_SetupStage+0x5e>
 8006322:	e01d      	b.n	8006360 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800632a:	4619      	mov	r1, r3
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f000 fb5f 	bl	80069f0 <USBD_StdDevReq>
 8006332:	4603      	mov	r3, r0
 8006334:	73fb      	strb	r3, [r7, #15]
      break;
 8006336:	e020      	b.n	800637a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800633e:	4619      	mov	r1, r3
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 fbc7 	bl	8006ad4 <USBD_StdItfReq>
 8006346:	4603      	mov	r3, r0
 8006348:	73fb      	strb	r3, [r7, #15]
      break;
 800634a:	e016      	b.n	800637a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006352:	4619      	mov	r1, r3
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 fc29 	bl	8006bac <USBD_StdEPReq>
 800635a:	4603      	mov	r3, r0
 800635c:	73fb      	strb	r3, [r7, #15]
      break;
 800635e:	e00c      	b.n	800637a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006366:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800636a:	b2db      	uxtb	r3, r3
 800636c:	4619      	mov	r1, r3
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f001 fd50 	bl	8007e14 <USBD_LL_StallEP>
 8006374:	4603      	mov	r3, r0
 8006376:	73fb      	strb	r3, [r7, #15]
      break;
 8006378:	bf00      	nop
  }

  return ret;
 800637a:	7bfb      	ldrb	r3, [r7, #15]
}
 800637c:	4618      	mov	r0, r3
 800637e:	3710      	adds	r7, #16
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b086      	sub	sp, #24
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	460b      	mov	r3, r1
 800638e:	607a      	str	r2, [r7, #4]
 8006390:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006392:	2300      	movs	r3, #0
 8006394:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006396:	7afb      	ldrb	r3, [r7, #11]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d16e      	bne.n	800647a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80063a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80063aa:	2b03      	cmp	r3, #3
 80063ac:	f040 8098 	bne.w	80064e0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	689a      	ldr	r2, [r3, #8]
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d913      	bls.n	80063e4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	689a      	ldr	r2, [r3, #8]
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	1ad2      	subs	r2, r2, r3
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	68da      	ldr	r2, [r3, #12]
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	4293      	cmp	r3, r2
 80063d4:	bf28      	it	cs
 80063d6:	4613      	movcs	r3, r2
 80063d8:	461a      	mov	r2, r3
 80063da:	6879      	ldr	r1, [r7, #4]
 80063dc:	68f8      	ldr	r0, [r7, #12]
 80063de:	f001 f967 	bl	80076b0 <USBD_CtlContinueRx>
 80063e2:	e07d      	b.n	80064e0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80063ea:	f003 031f 	and.w	r3, r3, #31
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d014      	beq.n	800641c <USBD_LL_DataOutStage+0x98>
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	d81d      	bhi.n	8006432 <USBD_LL_DataOutStage+0xae>
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d002      	beq.n	8006400 <USBD_LL_DataOutStage+0x7c>
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d003      	beq.n	8006406 <USBD_LL_DataOutStage+0x82>
 80063fe:	e018      	b.n	8006432 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006400:	2300      	movs	r3, #0
 8006402:	75bb      	strb	r3, [r7, #22]
            break;
 8006404:	e018      	b.n	8006438 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800640c:	b2db      	uxtb	r3, r3
 800640e:	4619      	mov	r1, r3
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	f000 fa5e 	bl	80068d2 <USBD_CoreFindIF>
 8006416:	4603      	mov	r3, r0
 8006418:	75bb      	strb	r3, [r7, #22]
            break;
 800641a:	e00d      	b.n	8006438 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006422:	b2db      	uxtb	r3, r3
 8006424:	4619      	mov	r1, r3
 8006426:	68f8      	ldr	r0, [r7, #12]
 8006428:	f000 fa60 	bl	80068ec <USBD_CoreFindEP>
 800642c:	4603      	mov	r3, r0
 800642e:	75bb      	strb	r3, [r7, #22]
            break;
 8006430:	e002      	b.n	8006438 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006432:	2300      	movs	r3, #0
 8006434:	75bb      	strb	r3, [r7, #22]
            break;
 8006436:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006438:	7dbb      	ldrb	r3, [r7, #22]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d119      	bne.n	8006472 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006444:	b2db      	uxtb	r3, r3
 8006446:	2b03      	cmp	r3, #3
 8006448:	d113      	bne.n	8006472 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800644a:	7dba      	ldrb	r2, [r7, #22]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	32ae      	adds	r2, #174	; 0xae
 8006450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00b      	beq.n	8006472 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800645a:	7dba      	ldrb	r2, [r7, #22]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006462:	7dba      	ldrb	r2, [r7, #22]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	32ae      	adds	r2, #174	; 0xae
 8006468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	68f8      	ldr	r0, [r7, #12]
 8006470:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006472:	68f8      	ldr	r0, [r7, #12]
 8006474:	f001 f92d 	bl	80076d2 <USBD_CtlSendStatus>
 8006478:	e032      	b.n	80064e0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800647a:	7afb      	ldrb	r3, [r7, #11]
 800647c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006480:	b2db      	uxtb	r3, r3
 8006482:	4619      	mov	r1, r3
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f000 fa31 	bl	80068ec <USBD_CoreFindEP>
 800648a:	4603      	mov	r3, r0
 800648c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800648e:	7dbb      	ldrb	r3, [r7, #22]
 8006490:	2bff      	cmp	r3, #255	; 0xff
 8006492:	d025      	beq.n	80064e0 <USBD_LL_DataOutStage+0x15c>
 8006494:	7dbb      	ldrb	r3, [r7, #22]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d122      	bne.n	80064e0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	2b03      	cmp	r3, #3
 80064a4:	d117      	bne.n	80064d6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80064a6:	7dba      	ldrb	r2, [r7, #22]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	32ae      	adds	r2, #174	; 0xae
 80064ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064b0:	699b      	ldr	r3, [r3, #24]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00f      	beq.n	80064d6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80064b6:	7dba      	ldrb	r2, [r7, #22]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80064be:	7dba      	ldrb	r2, [r7, #22]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	32ae      	adds	r2, #174	; 0xae
 80064c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064c8:	699b      	ldr	r3, [r3, #24]
 80064ca:	7afa      	ldrb	r2, [r7, #11]
 80064cc:	4611      	mov	r1, r2
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	4798      	blx	r3
 80064d2:	4603      	mov	r3, r0
 80064d4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80064d6:	7dfb      	ldrb	r3, [r7, #23]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d001      	beq.n	80064e0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80064dc:	7dfb      	ldrb	r3, [r7, #23]
 80064de:	e000      	b.n	80064e2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3718      	adds	r7, #24
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}

080064ea <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b086      	sub	sp, #24
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	60f8      	str	r0, [r7, #12]
 80064f2:	460b      	mov	r3, r1
 80064f4:	607a      	str	r2, [r7, #4]
 80064f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80064f8:	7afb      	ldrb	r3, [r7, #11]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d16f      	bne.n	80065de <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	3314      	adds	r3, #20
 8006502:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800650a:	2b02      	cmp	r3, #2
 800650c:	d15a      	bne.n	80065c4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	689a      	ldr	r2, [r3, #8]
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	429a      	cmp	r2, r3
 8006518:	d914      	bls.n	8006544 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	689a      	ldr	r2, [r3, #8]
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	1ad2      	subs	r2, r2, r3
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	461a      	mov	r2, r3
 800652e:	6879      	ldr	r1, [r7, #4]
 8006530:	68f8      	ldr	r0, [r7, #12]
 8006532:	f001 f8ac 	bl	800768e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006536:	2300      	movs	r3, #0
 8006538:	2200      	movs	r2, #0
 800653a:	2100      	movs	r1, #0
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	f001 fd13 	bl	8007f68 <USBD_LL_PrepareReceive>
 8006542:	e03f      	b.n	80065c4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	68da      	ldr	r2, [r3, #12]
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	429a      	cmp	r2, r3
 800654e:	d11c      	bne.n	800658a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	685a      	ldr	r2, [r3, #4]
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006558:	429a      	cmp	r2, r3
 800655a:	d316      	bcc.n	800658a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	685a      	ldr	r2, [r3, #4]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006566:	429a      	cmp	r2, r3
 8006568:	d20f      	bcs.n	800658a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800656a:	2200      	movs	r2, #0
 800656c:	2100      	movs	r1, #0
 800656e:	68f8      	ldr	r0, [r7, #12]
 8006570:	f001 f88d 	bl	800768e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2200      	movs	r2, #0
 8006578:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800657c:	2300      	movs	r3, #0
 800657e:	2200      	movs	r2, #0
 8006580:	2100      	movs	r1, #0
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	f001 fcf0 	bl	8007f68 <USBD_LL_PrepareReceive>
 8006588:	e01c      	b.n	80065c4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006590:	b2db      	uxtb	r3, r3
 8006592:	2b03      	cmp	r3, #3
 8006594:	d10f      	bne.n	80065b6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d009      	beq.n	80065b6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	68f8      	ldr	r0, [r7, #12]
 80065b4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80065b6:	2180      	movs	r1, #128	; 0x80
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	f001 fc2b 	bl	8007e14 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80065be:	68f8      	ldr	r0, [r7, #12]
 80065c0:	f001 f89a 	bl	80076f8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d03a      	beq.n	8006644 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80065ce:	68f8      	ldr	r0, [r7, #12]
 80065d0:	f7ff fe42 	bl	8006258 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80065dc:	e032      	b.n	8006644 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80065de:	7afb      	ldrb	r3, [r7, #11]
 80065e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	4619      	mov	r1, r3
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f000 f97f 	bl	80068ec <USBD_CoreFindEP>
 80065ee:	4603      	mov	r3, r0
 80065f0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80065f2:	7dfb      	ldrb	r3, [r7, #23]
 80065f4:	2bff      	cmp	r3, #255	; 0xff
 80065f6:	d025      	beq.n	8006644 <USBD_LL_DataInStage+0x15a>
 80065f8:	7dfb      	ldrb	r3, [r7, #23]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d122      	bne.n	8006644 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006604:	b2db      	uxtb	r3, r3
 8006606:	2b03      	cmp	r3, #3
 8006608:	d11c      	bne.n	8006644 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800660a:	7dfa      	ldrb	r2, [r7, #23]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	32ae      	adds	r2, #174	; 0xae
 8006610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006614:	695b      	ldr	r3, [r3, #20]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d014      	beq.n	8006644 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800661a:	7dfa      	ldrb	r2, [r7, #23]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006622:	7dfa      	ldrb	r2, [r7, #23]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	32ae      	adds	r2, #174	; 0xae
 8006628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800662c:	695b      	ldr	r3, [r3, #20]
 800662e:	7afa      	ldrb	r2, [r7, #11]
 8006630:	4611      	mov	r1, r2
 8006632:	68f8      	ldr	r0, [r7, #12]
 8006634:	4798      	blx	r3
 8006636:	4603      	mov	r3, r0
 8006638:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800663a:	7dbb      	ldrb	r3, [r7, #22]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d001      	beq.n	8006644 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006640:	7dbb      	ldrb	r3, [r7, #22]
 8006642:	e000      	b.n	8006646 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	3718      	adds	r7, #24
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}

0800664e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800664e:	b580      	push	{r7, lr}
 8006650:	b084      	sub	sp, #16
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006656:	2300      	movs	r3, #0
 8006658:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2201      	movs	r2, #1
 800665e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006686:	2b00      	cmp	r3, #0
 8006688:	d014      	beq.n	80066b4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00e      	beq.n	80066b4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	6852      	ldr	r2, [r2, #4]
 80066a2:	b2d2      	uxtb	r2, r2
 80066a4:	4611      	mov	r1, r2
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	4798      	blx	r3
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d001      	beq.n	80066b4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80066b0:	2303      	movs	r3, #3
 80066b2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80066b4:	2340      	movs	r3, #64	; 0x40
 80066b6:	2200      	movs	r2, #0
 80066b8:	2100      	movs	r1, #0
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f001 fb65 	bl	8007d8a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2240      	movs	r2, #64	; 0x40
 80066cc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80066d0:	2340      	movs	r3, #64	; 0x40
 80066d2:	2200      	movs	r2, #0
 80066d4:	2180      	movs	r1, #128	; 0x80
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f001 fb57 	bl	8007d8a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2201      	movs	r2, #1
 80066e0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2240      	movs	r2, #64	; 0x40
 80066e6:	621a      	str	r2, [r3, #32]

  return ret;
 80066e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3710      	adds	r7, #16
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80066f2:	b480      	push	{r7}
 80066f4:	b083      	sub	sp, #12
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
 80066fa:	460b      	mov	r3, r1
 80066fc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	78fa      	ldrb	r2, [r7, #3]
 8006702:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	370c      	adds	r7, #12
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr

08006712 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006712:	b480      	push	{r7}
 8006714:	b083      	sub	sp, #12
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006720:	b2da      	uxtb	r2, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2204      	movs	r2, #4
 800672c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	370c      	adds	r7, #12
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr

0800673e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800673e:	b480      	push	{r7}
 8006740:	b083      	sub	sp, #12
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800674c:	b2db      	uxtb	r3, r3
 800674e:	2b04      	cmp	r3, #4
 8006750:	d106      	bne.n	8006760 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006758:	b2da      	uxtb	r2, r3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	370c      	adds	r7, #12
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr

0800676e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800676e:	b580      	push	{r7, lr}
 8006770:	b082      	sub	sp, #8
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800677c:	b2db      	uxtb	r3, r3
 800677e:	2b03      	cmp	r3, #3
 8006780:	d110      	bne.n	80067a4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006788:	2b00      	cmp	r3, #0
 800678a:	d00b      	beq.n	80067a4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006792:	69db      	ldr	r3, [r3, #28]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d005      	beq.n	80067a4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800679e:	69db      	ldr	r3, [r3, #28]
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3708      	adds	r7, #8
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}

080067ae <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80067ae:	b580      	push	{r7, lr}
 80067b0:	b082      	sub	sp, #8
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
 80067b6:	460b      	mov	r3, r1
 80067b8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	32ae      	adds	r2, #174	; 0xae
 80067c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d101      	bne.n	80067d0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80067cc:	2303      	movs	r3, #3
 80067ce:	e01c      	b.n	800680a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	2b03      	cmp	r3, #3
 80067da:	d115      	bne.n	8006808 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	32ae      	adds	r2, #174	; 0xae
 80067e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ea:	6a1b      	ldr	r3, [r3, #32]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d00b      	beq.n	8006808 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	32ae      	adds	r2, #174	; 0xae
 80067fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067fe:	6a1b      	ldr	r3, [r3, #32]
 8006800:	78fa      	ldrb	r2, [r7, #3]
 8006802:	4611      	mov	r1, r2
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3708      	adds	r7, #8
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006812:	b580      	push	{r7, lr}
 8006814:	b082      	sub	sp, #8
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
 800681a:	460b      	mov	r3, r1
 800681c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	32ae      	adds	r2, #174	; 0xae
 8006828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d101      	bne.n	8006834 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006830:	2303      	movs	r3, #3
 8006832:	e01c      	b.n	800686e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800683a:	b2db      	uxtb	r3, r3
 800683c:	2b03      	cmp	r3, #3
 800683e:	d115      	bne.n	800686c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	32ae      	adds	r2, #174	; 0xae
 800684a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800684e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006850:	2b00      	cmp	r3, #0
 8006852:	d00b      	beq.n	800686c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	32ae      	adds	r2, #174	; 0xae
 800685e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006864:	78fa      	ldrb	r2, [r7, #3]
 8006866:	4611      	mov	r1, r2
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	3708      	adds	r7, #8
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}

08006876 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006876:	b480      	push	{r7}
 8006878:	b083      	sub	sp, #12
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800687e:	2300      	movs	r3, #0
}
 8006880:	4618      	mov	r0, r3
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006894:	2300      	movs	r3, #0
 8006896:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00e      	beq.n	80068c8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	6852      	ldr	r2, [r2, #4]
 80068b6:	b2d2      	uxtb	r2, r2
 80068b8:	4611      	mov	r1, r2
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	4798      	blx	r3
 80068be:	4603      	mov	r3, r0
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d001      	beq.n	80068c8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80068c4:	2303      	movs	r3, #3
 80068c6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80068c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3710      	adds	r7, #16
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}

080068d2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80068d2:	b480      	push	{r7}
 80068d4:	b083      	sub	sp, #12
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
 80068da:	460b      	mov	r3, r1
 80068dc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80068de:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	370c      	adds	r7, #12
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr

080068ec <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	460b      	mov	r3, r1
 80068f6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80068f8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	370c      	adds	r7, #12
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr

08006906 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b086      	sub	sp, #24
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
 800690e:	460b      	mov	r3, r1
 8006910:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800691a:	2300      	movs	r3, #0
 800691c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	885b      	ldrh	r3, [r3, #2]
 8006922:	b29a      	uxth	r2, r3
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	b29b      	uxth	r3, r3
 800692a:	429a      	cmp	r2, r3
 800692c:	d920      	bls.n	8006970 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	b29b      	uxth	r3, r3
 8006934:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006936:	e013      	b.n	8006960 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006938:	f107 030a 	add.w	r3, r7, #10
 800693c:	4619      	mov	r1, r3
 800693e:	6978      	ldr	r0, [r7, #20]
 8006940:	f000 f81b 	bl	800697a <USBD_GetNextDesc>
 8006944:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	785b      	ldrb	r3, [r3, #1]
 800694a:	2b05      	cmp	r3, #5
 800694c:	d108      	bne.n	8006960 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	789b      	ldrb	r3, [r3, #2]
 8006956:	78fa      	ldrb	r2, [r7, #3]
 8006958:	429a      	cmp	r2, r3
 800695a:	d008      	beq.n	800696e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800695c:	2300      	movs	r3, #0
 800695e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	885b      	ldrh	r3, [r3, #2]
 8006964:	b29a      	uxth	r2, r3
 8006966:	897b      	ldrh	r3, [r7, #10]
 8006968:	429a      	cmp	r2, r3
 800696a:	d8e5      	bhi.n	8006938 <USBD_GetEpDesc+0x32>
 800696c:	e000      	b.n	8006970 <USBD_GetEpDesc+0x6a>
          break;
 800696e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006970:	693b      	ldr	r3, [r7, #16]
}
 8006972:	4618      	mov	r0, r3
 8006974:	3718      	adds	r7, #24
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}

0800697a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800697a:	b480      	push	{r7}
 800697c:	b085      	sub	sp, #20
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
 8006982:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	881a      	ldrh	r2, [r3, #0]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	b29b      	uxth	r3, r3
 8006992:	4413      	add	r3, r2
 8006994:	b29a      	uxth	r2, r3
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	461a      	mov	r2, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4413      	add	r3, r2
 80069a4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80069a6:	68fb      	ldr	r3, [r7, #12]
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3714      	adds	r7, #20
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b087      	sub	sp, #28
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	3301      	adds	r3, #1
 80069ca:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80069d2:	8a3b      	ldrh	r3, [r7, #16]
 80069d4:	021b      	lsls	r3, r3, #8
 80069d6:	b21a      	sxth	r2, r3
 80069d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80069dc:	4313      	orrs	r3, r2
 80069de:	b21b      	sxth	r3, r3
 80069e0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80069e2:	89fb      	ldrh	r3, [r7, #14]
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	371c      	adds	r7, #28
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr

080069f0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80069fa:	2300      	movs	r3, #0
 80069fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a06:	2b40      	cmp	r3, #64	; 0x40
 8006a08:	d005      	beq.n	8006a16 <USBD_StdDevReq+0x26>
 8006a0a:	2b40      	cmp	r3, #64	; 0x40
 8006a0c:	d857      	bhi.n	8006abe <USBD_StdDevReq+0xce>
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00f      	beq.n	8006a32 <USBD_StdDevReq+0x42>
 8006a12:	2b20      	cmp	r3, #32
 8006a14:	d153      	bne.n	8006abe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	32ae      	adds	r2, #174	; 0xae
 8006a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	6839      	ldr	r1, [r7, #0]
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	4798      	blx	r3
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	73fb      	strb	r3, [r7, #15]
      break;
 8006a30:	e04a      	b.n	8006ac8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	785b      	ldrb	r3, [r3, #1]
 8006a36:	2b09      	cmp	r3, #9
 8006a38:	d83b      	bhi.n	8006ab2 <USBD_StdDevReq+0xc2>
 8006a3a:	a201      	add	r2, pc, #4	; (adr r2, 8006a40 <USBD_StdDevReq+0x50>)
 8006a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a40:	08006a95 	.word	0x08006a95
 8006a44:	08006aa9 	.word	0x08006aa9
 8006a48:	08006ab3 	.word	0x08006ab3
 8006a4c:	08006a9f 	.word	0x08006a9f
 8006a50:	08006ab3 	.word	0x08006ab3
 8006a54:	08006a73 	.word	0x08006a73
 8006a58:	08006a69 	.word	0x08006a69
 8006a5c:	08006ab3 	.word	0x08006ab3
 8006a60:	08006a8b 	.word	0x08006a8b
 8006a64:	08006a7d 	.word	0x08006a7d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006a68:	6839      	ldr	r1, [r7, #0]
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 fa3c 	bl	8006ee8 <USBD_GetDescriptor>
          break;
 8006a70:	e024      	b.n	8006abc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006a72:	6839      	ldr	r1, [r7, #0]
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 fba1 	bl	80071bc <USBD_SetAddress>
          break;
 8006a7a:	e01f      	b.n	8006abc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006a7c:	6839      	ldr	r1, [r7, #0]
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 fbe0 	bl	8007244 <USBD_SetConfig>
 8006a84:	4603      	mov	r3, r0
 8006a86:	73fb      	strb	r3, [r7, #15]
          break;
 8006a88:	e018      	b.n	8006abc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006a8a:	6839      	ldr	r1, [r7, #0]
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 fc83 	bl	8007398 <USBD_GetConfig>
          break;
 8006a92:	e013      	b.n	8006abc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006a94:	6839      	ldr	r1, [r7, #0]
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 fcb4 	bl	8007404 <USBD_GetStatus>
          break;
 8006a9c:	e00e      	b.n	8006abc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006a9e:	6839      	ldr	r1, [r7, #0]
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f000 fce3 	bl	800746c <USBD_SetFeature>
          break;
 8006aa6:	e009      	b.n	8006abc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006aa8:	6839      	ldr	r1, [r7, #0]
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 fd07 	bl	80074be <USBD_ClrFeature>
          break;
 8006ab0:	e004      	b.n	8006abc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006ab2:	6839      	ldr	r1, [r7, #0]
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 fd5e 	bl	8007576 <USBD_CtlError>
          break;
 8006aba:	bf00      	nop
      }
      break;
 8006abc:	e004      	b.n	8006ac8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006abe:	6839      	ldr	r1, [r7, #0]
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 fd58 	bl	8007576 <USBD_CtlError>
      break;
 8006ac6:	bf00      	nop
  }

  return ret;
 8006ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3710      	adds	r7, #16
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop

08006ad4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006aea:	2b40      	cmp	r3, #64	; 0x40
 8006aec:	d005      	beq.n	8006afa <USBD_StdItfReq+0x26>
 8006aee:	2b40      	cmp	r3, #64	; 0x40
 8006af0:	d852      	bhi.n	8006b98 <USBD_StdItfReq+0xc4>
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d001      	beq.n	8006afa <USBD_StdItfReq+0x26>
 8006af6:	2b20      	cmp	r3, #32
 8006af8:	d14e      	bne.n	8006b98 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	3b01      	subs	r3, #1
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	d840      	bhi.n	8006b8a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	889b      	ldrh	r3, [r3, #4]
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d836      	bhi.n	8006b80 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	889b      	ldrh	r3, [r3, #4]
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	4619      	mov	r1, r3
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f7ff fed9 	bl	80068d2 <USBD_CoreFindIF>
 8006b20:	4603      	mov	r3, r0
 8006b22:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b24:	7bbb      	ldrb	r3, [r7, #14]
 8006b26:	2bff      	cmp	r3, #255	; 0xff
 8006b28:	d01d      	beq.n	8006b66 <USBD_StdItfReq+0x92>
 8006b2a:	7bbb      	ldrb	r3, [r7, #14]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d11a      	bne.n	8006b66 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006b30:	7bba      	ldrb	r2, [r7, #14]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	32ae      	adds	r2, #174	; 0xae
 8006b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d00f      	beq.n	8006b60 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006b40:	7bba      	ldrb	r2, [r7, #14]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006b48:	7bba      	ldrb	r2, [r7, #14]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	32ae      	adds	r2, #174	; 0xae
 8006b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	6839      	ldr	r1, [r7, #0]
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	4798      	blx	r3
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006b5e:	e004      	b.n	8006b6a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006b60:	2303      	movs	r3, #3
 8006b62:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006b64:	e001      	b.n	8006b6a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006b66:	2303      	movs	r3, #3
 8006b68:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	88db      	ldrh	r3, [r3, #6]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d110      	bne.n	8006b94 <USBD_StdItfReq+0xc0>
 8006b72:	7bfb      	ldrb	r3, [r7, #15]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d10d      	bne.n	8006b94 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 fdaa 	bl	80076d2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006b7e:	e009      	b.n	8006b94 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006b80:	6839      	ldr	r1, [r7, #0]
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 fcf7 	bl	8007576 <USBD_CtlError>
          break;
 8006b88:	e004      	b.n	8006b94 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006b8a:	6839      	ldr	r1, [r7, #0]
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 fcf2 	bl	8007576 <USBD_CtlError>
          break;
 8006b92:	e000      	b.n	8006b96 <USBD_StdItfReq+0xc2>
          break;
 8006b94:	bf00      	nop
      }
      break;
 8006b96:	e004      	b.n	8006ba2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006b98:	6839      	ldr	r1, [r7, #0]
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 fceb 	bl	8007576 <USBD_CtlError>
      break;
 8006ba0:	bf00      	nop
  }

  return ret;
 8006ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3710      	adds	r7, #16
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	889b      	ldrh	r3, [r3, #4]
 8006bbe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006bc8:	2b40      	cmp	r3, #64	; 0x40
 8006bca:	d007      	beq.n	8006bdc <USBD_StdEPReq+0x30>
 8006bcc:	2b40      	cmp	r3, #64	; 0x40
 8006bce:	f200 817f 	bhi.w	8006ed0 <USBD_StdEPReq+0x324>
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d02a      	beq.n	8006c2c <USBD_StdEPReq+0x80>
 8006bd6:	2b20      	cmp	r3, #32
 8006bd8:	f040 817a 	bne.w	8006ed0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006bdc:	7bbb      	ldrb	r3, [r7, #14]
 8006bde:	4619      	mov	r1, r3
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f7ff fe83 	bl	80068ec <USBD_CoreFindEP>
 8006be6:	4603      	mov	r3, r0
 8006be8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006bea:	7b7b      	ldrb	r3, [r7, #13]
 8006bec:	2bff      	cmp	r3, #255	; 0xff
 8006bee:	f000 8174 	beq.w	8006eda <USBD_StdEPReq+0x32e>
 8006bf2:	7b7b      	ldrb	r3, [r7, #13]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	f040 8170 	bne.w	8006eda <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006bfa:	7b7a      	ldrb	r2, [r7, #13]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006c02:	7b7a      	ldrb	r2, [r7, #13]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	32ae      	adds	r2, #174	; 0xae
 8006c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	f000 8163 	beq.w	8006eda <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006c14:	7b7a      	ldrb	r2, [r7, #13]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	32ae      	adds	r2, #174	; 0xae
 8006c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	6839      	ldr	r1, [r7, #0]
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	4798      	blx	r3
 8006c26:	4603      	mov	r3, r0
 8006c28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006c2a:	e156      	b.n	8006eda <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	785b      	ldrb	r3, [r3, #1]
 8006c30:	2b03      	cmp	r3, #3
 8006c32:	d008      	beq.n	8006c46 <USBD_StdEPReq+0x9a>
 8006c34:	2b03      	cmp	r3, #3
 8006c36:	f300 8145 	bgt.w	8006ec4 <USBD_StdEPReq+0x318>
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	f000 809b 	beq.w	8006d76 <USBD_StdEPReq+0x1ca>
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d03c      	beq.n	8006cbe <USBD_StdEPReq+0x112>
 8006c44:	e13e      	b.n	8006ec4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	2b02      	cmp	r3, #2
 8006c50:	d002      	beq.n	8006c58 <USBD_StdEPReq+0xac>
 8006c52:	2b03      	cmp	r3, #3
 8006c54:	d016      	beq.n	8006c84 <USBD_StdEPReq+0xd8>
 8006c56:	e02c      	b.n	8006cb2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c58:	7bbb      	ldrb	r3, [r7, #14]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d00d      	beq.n	8006c7a <USBD_StdEPReq+0xce>
 8006c5e:	7bbb      	ldrb	r3, [r7, #14]
 8006c60:	2b80      	cmp	r3, #128	; 0x80
 8006c62:	d00a      	beq.n	8006c7a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c64:	7bbb      	ldrb	r3, [r7, #14]
 8006c66:	4619      	mov	r1, r3
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f001 f8d3 	bl	8007e14 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c6e:	2180      	movs	r1, #128	; 0x80
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f001 f8cf 	bl	8007e14 <USBD_LL_StallEP>
 8006c76:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006c78:	e020      	b.n	8006cbc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006c7a:	6839      	ldr	r1, [r7, #0]
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 fc7a 	bl	8007576 <USBD_CtlError>
              break;
 8006c82:	e01b      	b.n	8006cbc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	885b      	ldrh	r3, [r3, #2]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d10e      	bne.n	8006caa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006c8c:	7bbb      	ldrb	r3, [r7, #14]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d00b      	beq.n	8006caa <USBD_StdEPReq+0xfe>
 8006c92:	7bbb      	ldrb	r3, [r7, #14]
 8006c94:	2b80      	cmp	r3, #128	; 0x80
 8006c96:	d008      	beq.n	8006caa <USBD_StdEPReq+0xfe>
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	88db      	ldrh	r3, [r3, #6]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d104      	bne.n	8006caa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ca0:	7bbb      	ldrb	r3, [r7, #14]
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f001 f8b5 	bl	8007e14 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 fd11 	bl	80076d2 <USBD_CtlSendStatus>

              break;
 8006cb0:	e004      	b.n	8006cbc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006cb2:	6839      	ldr	r1, [r7, #0]
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 fc5e 	bl	8007576 <USBD_CtlError>
              break;
 8006cba:	bf00      	nop
          }
          break;
 8006cbc:	e107      	b.n	8006ece <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d002      	beq.n	8006cd0 <USBD_StdEPReq+0x124>
 8006cca:	2b03      	cmp	r3, #3
 8006ccc:	d016      	beq.n	8006cfc <USBD_StdEPReq+0x150>
 8006cce:	e04b      	b.n	8006d68 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006cd0:	7bbb      	ldrb	r3, [r7, #14]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d00d      	beq.n	8006cf2 <USBD_StdEPReq+0x146>
 8006cd6:	7bbb      	ldrb	r3, [r7, #14]
 8006cd8:	2b80      	cmp	r3, #128	; 0x80
 8006cda:	d00a      	beq.n	8006cf2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006cdc:	7bbb      	ldrb	r3, [r7, #14]
 8006cde:	4619      	mov	r1, r3
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f001 f897 	bl	8007e14 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ce6:	2180      	movs	r1, #128	; 0x80
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f001 f893 	bl	8007e14 <USBD_LL_StallEP>
 8006cee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006cf0:	e040      	b.n	8006d74 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006cf2:	6839      	ldr	r1, [r7, #0]
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 fc3e 	bl	8007576 <USBD_CtlError>
              break;
 8006cfa:	e03b      	b.n	8006d74 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	885b      	ldrh	r3, [r3, #2]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d136      	bne.n	8006d72 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006d04:	7bbb      	ldrb	r3, [r7, #14]
 8006d06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d004      	beq.n	8006d18 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006d0e:	7bbb      	ldrb	r3, [r7, #14]
 8006d10:	4619      	mov	r1, r3
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f001 f89d 	bl	8007e52 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 fcda 	bl	80076d2 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006d1e:	7bbb      	ldrb	r3, [r7, #14]
 8006d20:	4619      	mov	r1, r3
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f7ff fde2 	bl	80068ec <USBD_CoreFindEP>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006d2c:	7b7b      	ldrb	r3, [r7, #13]
 8006d2e:	2bff      	cmp	r3, #255	; 0xff
 8006d30:	d01f      	beq.n	8006d72 <USBD_StdEPReq+0x1c6>
 8006d32:	7b7b      	ldrb	r3, [r7, #13]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d11c      	bne.n	8006d72 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006d38:	7b7a      	ldrb	r2, [r7, #13]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006d40:	7b7a      	ldrb	r2, [r7, #13]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	32ae      	adds	r2, #174	; 0xae
 8006d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d010      	beq.n	8006d72 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006d50:	7b7a      	ldrb	r2, [r7, #13]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	32ae      	adds	r2, #174	; 0xae
 8006d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	6839      	ldr	r1, [r7, #0]
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	4798      	blx	r3
 8006d62:	4603      	mov	r3, r0
 8006d64:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006d66:	e004      	b.n	8006d72 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006d68:	6839      	ldr	r1, [r7, #0]
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 fc03 	bl	8007576 <USBD_CtlError>
              break;
 8006d70:	e000      	b.n	8006d74 <USBD_StdEPReq+0x1c8>
              break;
 8006d72:	bf00      	nop
          }
          break;
 8006d74:	e0ab      	b.n	8006ece <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	d002      	beq.n	8006d88 <USBD_StdEPReq+0x1dc>
 8006d82:	2b03      	cmp	r3, #3
 8006d84:	d032      	beq.n	8006dec <USBD_StdEPReq+0x240>
 8006d86:	e097      	b.n	8006eb8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d88:	7bbb      	ldrb	r3, [r7, #14]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d007      	beq.n	8006d9e <USBD_StdEPReq+0x1f2>
 8006d8e:	7bbb      	ldrb	r3, [r7, #14]
 8006d90:	2b80      	cmp	r3, #128	; 0x80
 8006d92:	d004      	beq.n	8006d9e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006d94:	6839      	ldr	r1, [r7, #0]
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 fbed 	bl	8007576 <USBD_CtlError>
                break;
 8006d9c:	e091      	b.n	8006ec2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	da0b      	bge.n	8006dbe <USBD_StdEPReq+0x212>
 8006da6:	7bbb      	ldrb	r3, [r7, #14]
 8006da8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006dac:	4613      	mov	r3, r2
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	4413      	add	r3, r2
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	3310      	adds	r3, #16
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	4413      	add	r3, r2
 8006dba:	3304      	adds	r3, #4
 8006dbc:	e00b      	b.n	8006dd6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006dbe:	7bbb      	ldrb	r3, [r7, #14]
 8006dc0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006dc4:	4613      	mov	r3, r2
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	4413      	add	r3, r2
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	3304      	adds	r3, #4
 8006dd6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	2202      	movs	r2, #2
 8006de2:	4619      	mov	r1, r3
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 fc37 	bl	8007658 <USBD_CtlSendData>
              break;
 8006dea:	e06a      	b.n	8006ec2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006dec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	da11      	bge.n	8006e18 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006df4:	7bbb      	ldrb	r3, [r7, #14]
 8006df6:	f003 020f 	and.w	r2, r3, #15
 8006dfa:	6879      	ldr	r1, [r7, #4]
 8006dfc:	4613      	mov	r3, r2
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	4413      	add	r3, r2
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	440b      	add	r3, r1
 8006e06:	3324      	adds	r3, #36	; 0x24
 8006e08:	881b      	ldrh	r3, [r3, #0]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d117      	bne.n	8006e3e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006e0e:	6839      	ldr	r1, [r7, #0]
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 fbb0 	bl	8007576 <USBD_CtlError>
                  break;
 8006e16:	e054      	b.n	8006ec2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006e18:	7bbb      	ldrb	r3, [r7, #14]
 8006e1a:	f003 020f 	and.w	r2, r3, #15
 8006e1e:	6879      	ldr	r1, [r7, #4]
 8006e20:	4613      	mov	r3, r2
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	4413      	add	r3, r2
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	440b      	add	r3, r1
 8006e2a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006e2e:	881b      	ldrh	r3, [r3, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d104      	bne.n	8006e3e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006e34:	6839      	ldr	r1, [r7, #0]
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 fb9d 	bl	8007576 <USBD_CtlError>
                  break;
 8006e3c:	e041      	b.n	8006ec2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	da0b      	bge.n	8006e5e <USBD_StdEPReq+0x2b2>
 8006e46:	7bbb      	ldrb	r3, [r7, #14]
 8006e48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e4c:	4613      	mov	r3, r2
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	4413      	add	r3, r2
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	3310      	adds	r3, #16
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	4413      	add	r3, r2
 8006e5a:	3304      	adds	r3, #4
 8006e5c:	e00b      	b.n	8006e76 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006e5e:	7bbb      	ldrb	r3, [r7, #14]
 8006e60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e64:	4613      	mov	r3, r2
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	4413      	add	r3, r2
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	4413      	add	r3, r2
 8006e74:	3304      	adds	r3, #4
 8006e76:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006e78:	7bbb      	ldrb	r3, [r7, #14]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d002      	beq.n	8006e84 <USBD_StdEPReq+0x2d8>
 8006e7e:	7bbb      	ldrb	r3, [r7, #14]
 8006e80:	2b80      	cmp	r3, #128	; 0x80
 8006e82:	d103      	bne.n	8006e8c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	2200      	movs	r2, #0
 8006e88:	601a      	str	r2, [r3, #0]
 8006e8a:	e00e      	b.n	8006eaa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006e8c:	7bbb      	ldrb	r3, [r7, #14]
 8006e8e:	4619      	mov	r1, r3
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f000 fffd 	bl	8007e90 <USBD_LL_IsStallEP>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d003      	beq.n	8006ea4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	601a      	str	r2, [r3, #0]
 8006ea2:	e002      	b.n	8006eaa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	2202      	movs	r2, #2
 8006eae:	4619      	mov	r1, r3
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 fbd1 	bl	8007658 <USBD_CtlSendData>
              break;
 8006eb6:	e004      	b.n	8006ec2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006eb8:	6839      	ldr	r1, [r7, #0]
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 fb5b 	bl	8007576 <USBD_CtlError>
              break;
 8006ec0:	bf00      	nop
          }
          break;
 8006ec2:	e004      	b.n	8006ece <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006ec4:	6839      	ldr	r1, [r7, #0]
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 fb55 	bl	8007576 <USBD_CtlError>
          break;
 8006ecc:	bf00      	nop
      }
      break;
 8006ece:	e005      	b.n	8006edc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006ed0:	6839      	ldr	r1, [r7, #0]
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 fb4f 	bl	8007576 <USBD_CtlError>
      break;
 8006ed8:	e000      	b.n	8006edc <USBD_StdEPReq+0x330>
      break;
 8006eda:	bf00      	nop
  }

  return ret;
 8006edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3710      	adds	r7, #16
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
	...

08006ee8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006efa:	2300      	movs	r3, #0
 8006efc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	885b      	ldrh	r3, [r3, #2]
 8006f02:	0a1b      	lsrs	r3, r3, #8
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	3b01      	subs	r3, #1
 8006f08:	2b06      	cmp	r3, #6
 8006f0a:	f200 8128 	bhi.w	800715e <USBD_GetDescriptor+0x276>
 8006f0e:	a201      	add	r2, pc, #4	; (adr r2, 8006f14 <USBD_GetDescriptor+0x2c>)
 8006f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f14:	08006f31 	.word	0x08006f31
 8006f18:	08006f49 	.word	0x08006f49
 8006f1c:	08006f89 	.word	0x08006f89
 8006f20:	0800715f 	.word	0x0800715f
 8006f24:	0800715f 	.word	0x0800715f
 8006f28:	080070ff 	.word	0x080070ff
 8006f2c:	0800712b 	.word	0x0800712b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	7c12      	ldrb	r2, [r2, #16]
 8006f3c:	f107 0108 	add.w	r1, r7, #8
 8006f40:	4610      	mov	r0, r2
 8006f42:	4798      	blx	r3
 8006f44:	60f8      	str	r0, [r7, #12]
      break;
 8006f46:	e112      	b.n	800716e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	7c1b      	ldrb	r3, [r3, #16]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d10d      	bne.n	8006f6c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f58:	f107 0208 	add.w	r2, r7, #8
 8006f5c:	4610      	mov	r0, r2
 8006f5e:	4798      	blx	r3
 8006f60:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	3301      	adds	r3, #1
 8006f66:	2202      	movs	r2, #2
 8006f68:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006f6a:	e100      	b.n	800716e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f74:	f107 0208 	add.w	r2, r7, #8
 8006f78:	4610      	mov	r0, r2
 8006f7a:	4798      	blx	r3
 8006f7c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	3301      	adds	r3, #1
 8006f82:	2202      	movs	r2, #2
 8006f84:	701a      	strb	r2, [r3, #0]
      break;
 8006f86:	e0f2      	b.n	800716e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	885b      	ldrh	r3, [r3, #2]
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	2b05      	cmp	r3, #5
 8006f90:	f200 80ac 	bhi.w	80070ec <USBD_GetDescriptor+0x204>
 8006f94:	a201      	add	r2, pc, #4	; (adr r2, 8006f9c <USBD_GetDescriptor+0xb4>)
 8006f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f9a:	bf00      	nop
 8006f9c:	08006fb5 	.word	0x08006fb5
 8006fa0:	08006fe9 	.word	0x08006fe9
 8006fa4:	0800701d 	.word	0x0800701d
 8006fa8:	08007051 	.word	0x08007051
 8006fac:	08007085 	.word	0x08007085
 8006fb0:	080070b9 	.word	0x080070b9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d00b      	beq.n	8006fd8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	7c12      	ldrb	r2, [r2, #16]
 8006fcc:	f107 0108 	add.w	r1, r7, #8
 8006fd0:	4610      	mov	r0, r2
 8006fd2:	4798      	blx	r3
 8006fd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fd6:	e091      	b.n	80070fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fd8:	6839      	ldr	r1, [r7, #0]
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 facb 	bl	8007576 <USBD_CtlError>
            err++;
 8006fe0:	7afb      	ldrb	r3, [r7, #11]
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	72fb      	strb	r3, [r7, #11]
          break;
 8006fe6:	e089      	b.n	80070fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d00b      	beq.n	800700c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	7c12      	ldrb	r2, [r2, #16]
 8007000:	f107 0108 	add.w	r1, r7, #8
 8007004:	4610      	mov	r0, r2
 8007006:	4798      	blx	r3
 8007008:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800700a:	e077      	b.n	80070fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800700c:	6839      	ldr	r1, [r7, #0]
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 fab1 	bl	8007576 <USBD_CtlError>
            err++;
 8007014:	7afb      	ldrb	r3, [r7, #11]
 8007016:	3301      	adds	r3, #1
 8007018:	72fb      	strb	r3, [r7, #11]
          break;
 800701a:	e06f      	b.n	80070fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d00b      	beq.n	8007040 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	7c12      	ldrb	r2, [r2, #16]
 8007034:	f107 0108 	add.w	r1, r7, #8
 8007038:	4610      	mov	r0, r2
 800703a:	4798      	blx	r3
 800703c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800703e:	e05d      	b.n	80070fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007040:	6839      	ldr	r1, [r7, #0]
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 fa97 	bl	8007576 <USBD_CtlError>
            err++;
 8007048:	7afb      	ldrb	r3, [r7, #11]
 800704a:	3301      	adds	r3, #1
 800704c:	72fb      	strb	r3, [r7, #11]
          break;
 800704e:	e055      	b.n	80070fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007056:	691b      	ldr	r3, [r3, #16]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d00b      	beq.n	8007074 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007062:	691b      	ldr	r3, [r3, #16]
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	7c12      	ldrb	r2, [r2, #16]
 8007068:	f107 0108 	add.w	r1, r7, #8
 800706c:	4610      	mov	r0, r2
 800706e:	4798      	blx	r3
 8007070:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007072:	e043      	b.n	80070fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007074:	6839      	ldr	r1, [r7, #0]
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 fa7d 	bl	8007576 <USBD_CtlError>
            err++;
 800707c:	7afb      	ldrb	r3, [r7, #11]
 800707e:	3301      	adds	r3, #1
 8007080:	72fb      	strb	r3, [r7, #11]
          break;
 8007082:	e03b      	b.n	80070fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800708a:	695b      	ldr	r3, [r3, #20]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d00b      	beq.n	80070a8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007096:	695b      	ldr	r3, [r3, #20]
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	7c12      	ldrb	r2, [r2, #16]
 800709c:	f107 0108 	add.w	r1, r7, #8
 80070a0:	4610      	mov	r0, r2
 80070a2:	4798      	blx	r3
 80070a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070a6:	e029      	b.n	80070fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070a8:	6839      	ldr	r1, [r7, #0]
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 fa63 	bl	8007576 <USBD_CtlError>
            err++;
 80070b0:	7afb      	ldrb	r3, [r7, #11]
 80070b2:	3301      	adds	r3, #1
 80070b4:	72fb      	strb	r3, [r7, #11]
          break;
 80070b6:	e021      	b.n	80070fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070be:	699b      	ldr	r3, [r3, #24]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d00b      	beq.n	80070dc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070ca:	699b      	ldr	r3, [r3, #24]
 80070cc:	687a      	ldr	r2, [r7, #4]
 80070ce:	7c12      	ldrb	r2, [r2, #16]
 80070d0:	f107 0108 	add.w	r1, r7, #8
 80070d4:	4610      	mov	r0, r2
 80070d6:	4798      	blx	r3
 80070d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070da:	e00f      	b.n	80070fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070dc:	6839      	ldr	r1, [r7, #0]
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 fa49 	bl	8007576 <USBD_CtlError>
            err++;
 80070e4:	7afb      	ldrb	r3, [r7, #11]
 80070e6:	3301      	adds	r3, #1
 80070e8:	72fb      	strb	r3, [r7, #11]
          break;
 80070ea:	e007      	b.n	80070fc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80070ec:	6839      	ldr	r1, [r7, #0]
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 fa41 	bl	8007576 <USBD_CtlError>
          err++;
 80070f4:	7afb      	ldrb	r3, [r7, #11]
 80070f6:	3301      	adds	r3, #1
 80070f8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80070fa:	bf00      	nop
      }
      break;
 80070fc:	e037      	b.n	800716e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	7c1b      	ldrb	r3, [r3, #16]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d109      	bne.n	800711a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800710c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800710e:	f107 0208 	add.w	r2, r7, #8
 8007112:	4610      	mov	r0, r2
 8007114:	4798      	blx	r3
 8007116:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007118:	e029      	b.n	800716e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800711a:	6839      	ldr	r1, [r7, #0]
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 fa2a 	bl	8007576 <USBD_CtlError>
        err++;
 8007122:	7afb      	ldrb	r3, [r7, #11]
 8007124:	3301      	adds	r3, #1
 8007126:	72fb      	strb	r3, [r7, #11]
      break;
 8007128:	e021      	b.n	800716e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	7c1b      	ldrb	r3, [r3, #16]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d10d      	bne.n	800714e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800713a:	f107 0208 	add.w	r2, r7, #8
 800713e:	4610      	mov	r0, r2
 8007140:	4798      	blx	r3
 8007142:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	3301      	adds	r3, #1
 8007148:	2207      	movs	r2, #7
 800714a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800714c:	e00f      	b.n	800716e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800714e:	6839      	ldr	r1, [r7, #0]
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 fa10 	bl	8007576 <USBD_CtlError>
        err++;
 8007156:	7afb      	ldrb	r3, [r7, #11]
 8007158:	3301      	adds	r3, #1
 800715a:	72fb      	strb	r3, [r7, #11]
      break;
 800715c:	e007      	b.n	800716e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800715e:	6839      	ldr	r1, [r7, #0]
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 fa08 	bl	8007576 <USBD_CtlError>
      err++;
 8007166:	7afb      	ldrb	r3, [r7, #11]
 8007168:	3301      	adds	r3, #1
 800716a:	72fb      	strb	r3, [r7, #11]
      break;
 800716c:	bf00      	nop
  }

  if (err != 0U)
 800716e:	7afb      	ldrb	r3, [r7, #11]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d11e      	bne.n	80071b2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	88db      	ldrh	r3, [r3, #6]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d016      	beq.n	80071aa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800717c:	893b      	ldrh	r3, [r7, #8]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d00e      	beq.n	80071a0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	88da      	ldrh	r2, [r3, #6]
 8007186:	893b      	ldrh	r3, [r7, #8]
 8007188:	4293      	cmp	r3, r2
 800718a:	bf28      	it	cs
 800718c:	4613      	movcs	r3, r2
 800718e:	b29b      	uxth	r3, r3
 8007190:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007192:	893b      	ldrh	r3, [r7, #8]
 8007194:	461a      	mov	r2, r3
 8007196:	68f9      	ldr	r1, [r7, #12]
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 fa5d 	bl	8007658 <USBD_CtlSendData>
 800719e:	e009      	b.n	80071b4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80071a0:	6839      	ldr	r1, [r7, #0]
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 f9e7 	bl	8007576 <USBD_CtlError>
 80071a8:	e004      	b.n	80071b4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 fa91 	bl	80076d2 <USBD_CtlSendStatus>
 80071b0:	e000      	b.n	80071b4 <USBD_GetDescriptor+0x2cc>
    return;
 80071b2:	bf00      	nop
  }
}
 80071b4:	3710      	adds	r7, #16
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop

080071bc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	889b      	ldrh	r3, [r3, #4]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d131      	bne.n	8007232 <USBD_SetAddress+0x76>
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	88db      	ldrh	r3, [r3, #6]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d12d      	bne.n	8007232 <USBD_SetAddress+0x76>
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	885b      	ldrh	r3, [r3, #2]
 80071da:	2b7f      	cmp	r3, #127	; 0x7f
 80071dc:	d829      	bhi.n	8007232 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	885b      	ldrh	r3, [r3, #2]
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071e8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	2b03      	cmp	r3, #3
 80071f4:	d104      	bne.n	8007200 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80071f6:	6839      	ldr	r1, [r7, #0]
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 f9bc 	bl	8007576 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071fe:	e01d      	b.n	800723c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	7bfa      	ldrb	r2, [r7, #15]
 8007204:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007208:	7bfb      	ldrb	r3, [r7, #15]
 800720a:	4619      	mov	r1, r3
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 fe6b 	bl	8007ee8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 fa5d 	bl	80076d2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007218:	7bfb      	ldrb	r3, [r7, #15]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d004      	beq.n	8007228 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2202      	movs	r2, #2
 8007222:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007226:	e009      	b.n	800723c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2201      	movs	r2, #1
 800722c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007230:	e004      	b.n	800723c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007232:	6839      	ldr	r1, [r7, #0]
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 f99e 	bl	8007576 <USBD_CtlError>
  }
}
 800723a:	bf00      	nop
 800723c:	bf00      	nop
 800723e:	3710      	adds	r7, #16
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800724e:	2300      	movs	r3, #0
 8007250:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	885b      	ldrh	r3, [r3, #2]
 8007256:	b2da      	uxtb	r2, r3
 8007258:	4b4e      	ldr	r3, [pc, #312]	; (8007394 <USBD_SetConfig+0x150>)
 800725a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800725c:	4b4d      	ldr	r3, [pc, #308]	; (8007394 <USBD_SetConfig+0x150>)
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	2b01      	cmp	r3, #1
 8007262:	d905      	bls.n	8007270 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007264:	6839      	ldr	r1, [r7, #0]
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 f985 	bl	8007576 <USBD_CtlError>
    return USBD_FAIL;
 800726c:	2303      	movs	r3, #3
 800726e:	e08c      	b.n	800738a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007276:	b2db      	uxtb	r3, r3
 8007278:	2b02      	cmp	r3, #2
 800727a:	d002      	beq.n	8007282 <USBD_SetConfig+0x3e>
 800727c:	2b03      	cmp	r3, #3
 800727e:	d029      	beq.n	80072d4 <USBD_SetConfig+0x90>
 8007280:	e075      	b.n	800736e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007282:	4b44      	ldr	r3, [pc, #272]	; (8007394 <USBD_SetConfig+0x150>)
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d020      	beq.n	80072cc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800728a:	4b42      	ldr	r3, [pc, #264]	; (8007394 <USBD_SetConfig+0x150>)
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	461a      	mov	r2, r3
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007294:	4b3f      	ldr	r3, [pc, #252]	; (8007394 <USBD_SetConfig+0x150>)
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	4619      	mov	r1, r3
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f7fe ffe7 	bl	800626e <USBD_SetClassConfig>
 80072a0:	4603      	mov	r3, r0
 80072a2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80072a4:	7bfb      	ldrb	r3, [r7, #15]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d008      	beq.n	80072bc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80072aa:	6839      	ldr	r1, [r7, #0]
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 f962 	bl	8007576 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2202      	movs	r2, #2
 80072b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80072ba:	e065      	b.n	8007388 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 fa08 	bl	80076d2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2203      	movs	r2, #3
 80072c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80072ca:	e05d      	b.n	8007388 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 fa00 	bl	80076d2 <USBD_CtlSendStatus>
      break;
 80072d2:	e059      	b.n	8007388 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80072d4:	4b2f      	ldr	r3, [pc, #188]	; (8007394 <USBD_SetConfig+0x150>)
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d112      	bne.n	8007302 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2202      	movs	r2, #2
 80072e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80072e4:	4b2b      	ldr	r3, [pc, #172]	; (8007394 <USBD_SetConfig+0x150>)
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	461a      	mov	r2, r3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80072ee:	4b29      	ldr	r3, [pc, #164]	; (8007394 <USBD_SetConfig+0x150>)
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	4619      	mov	r1, r3
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f7fe ffd6 	bl	80062a6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 f9e9 	bl	80076d2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007300:	e042      	b.n	8007388 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007302:	4b24      	ldr	r3, [pc, #144]	; (8007394 <USBD_SetConfig+0x150>)
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	461a      	mov	r2, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	429a      	cmp	r2, r3
 800730e:	d02a      	beq.n	8007366 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	b2db      	uxtb	r3, r3
 8007316:	4619      	mov	r1, r3
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f7fe ffc4 	bl	80062a6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800731e:	4b1d      	ldr	r3, [pc, #116]	; (8007394 <USBD_SetConfig+0x150>)
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	461a      	mov	r2, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007328:	4b1a      	ldr	r3, [pc, #104]	; (8007394 <USBD_SetConfig+0x150>)
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	4619      	mov	r1, r3
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f7fe ff9d 	bl	800626e <USBD_SetClassConfig>
 8007334:	4603      	mov	r3, r0
 8007336:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007338:	7bfb      	ldrb	r3, [r7, #15]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00f      	beq.n	800735e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800733e:	6839      	ldr	r1, [r7, #0]
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 f918 	bl	8007576 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	b2db      	uxtb	r3, r3
 800734c:	4619      	mov	r1, r3
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f7fe ffa9 	bl	80062a6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2202      	movs	r2, #2
 8007358:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800735c:	e014      	b.n	8007388 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 f9b7 	bl	80076d2 <USBD_CtlSendStatus>
      break;
 8007364:	e010      	b.n	8007388 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 f9b3 	bl	80076d2 <USBD_CtlSendStatus>
      break;
 800736c:	e00c      	b.n	8007388 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800736e:	6839      	ldr	r1, [r7, #0]
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 f900 	bl	8007576 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007376:	4b07      	ldr	r3, [pc, #28]	; (8007394 <USBD_SetConfig+0x150>)
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	4619      	mov	r1, r3
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f7fe ff92 	bl	80062a6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007382:	2303      	movs	r3, #3
 8007384:	73fb      	strb	r3, [r7, #15]
      break;
 8007386:	bf00      	nop
  }

  return ret;
 8007388:	7bfb      	ldrb	r3, [r7, #15]
}
 800738a:	4618      	mov	r0, r3
 800738c:	3710      	adds	r7, #16
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop
 8007394:	20000788 	.word	0x20000788

08007398 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	88db      	ldrh	r3, [r3, #6]
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d004      	beq.n	80073b4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80073aa:	6839      	ldr	r1, [r7, #0]
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 f8e2 	bl	8007576 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80073b2:	e023      	b.n	80073fc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	2b02      	cmp	r3, #2
 80073be:	dc02      	bgt.n	80073c6 <USBD_GetConfig+0x2e>
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	dc03      	bgt.n	80073cc <USBD_GetConfig+0x34>
 80073c4:	e015      	b.n	80073f2 <USBD_GetConfig+0x5a>
 80073c6:	2b03      	cmp	r3, #3
 80073c8:	d00b      	beq.n	80073e2 <USBD_GetConfig+0x4a>
 80073ca:	e012      	b.n	80073f2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	3308      	adds	r3, #8
 80073d6:	2201      	movs	r2, #1
 80073d8:	4619      	mov	r1, r3
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 f93c 	bl	8007658 <USBD_CtlSendData>
        break;
 80073e0:	e00c      	b.n	80073fc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	3304      	adds	r3, #4
 80073e6:	2201      	movs	r2, #1
 80073e8:	4619      	mov	r1, r3
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 f934 	bl	8007658 <USBD_CtlSendData>
        break;
 80073f0:	e004      	b.n	80073fc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80073f2:	6839      	ldr	r1, [r7, #0]
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 f8be 	bl	8007576 <USBD_CtlError>
        break;
 80073fa:	bf00      	nop
}
 80073fc:	bf00      	nop
 80073fe:	3708      	adds	r7, #8
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b082      	sub	sp, #8
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007414:	b2db      	uxtb	r3, r3
 8007416:	3b01      	subs	r3, #1
 8007418:	2b02      	cmp	r3, #2
 800741a:	d81e      	bhi.n	800745a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	88db      	ldrh	r3, [r3, #6]
 8007420:	2b02      	cmp	r3, #2
 8007422:	d004      	beq.n	800742e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007424:	6839      	ldr	r1, [r7, #0]
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 f8a5 	bl	8007576 <USBD_CtlError>
        break;
 800742c:	e01a      	b.n	8007464 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2201      	movs	r2, #1
 8007432:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800743a:	2b00      	cmp	r3, #0
 800743c:	d005      	beq.n	800744a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	f043 0202 	orr.w	r2, r3, #2
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	330c      	adds	r3, #12
 800744e:	2202      	movs	r2, #2
 8007450:	4619      	mov	r1, r3
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 f900 	bl	8007658 <USBD_CtlSendData>
      break;
 8007458:	e004      	b.n	8007464 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800745a:	6839      	ldr	r1, [r7, #0]
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 f88a 	bl	8007576 <USBD_CtlError>
      break;
 8007462:	bf00      	nop
  }
}
 8007464:	bf00      	nop
 8007466:	3708      	adds	r7, #8
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b082      	sub	sp, #8
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	885b      	ldrh	r3, [r3, #2]
 800747a:	2b01      	cmp	r3, #1
 800747c:	d107      	bne.n	800748e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2201      	movs	r2, #1
 8007482:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 f923 	bl	80076d2 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800748c:	e013      	b.n	80074b6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	885b      	ldrh	r3, [r3, #2]
 8007492:	2b02      	cmp	r3, #2
 8007494:	d10b      	bne.n	80074ae <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	889b      	ldrh	r3, [r3, #4]
 800749a:	0a1b      	lsrs	r3, r3, #8
 800749c:	b29b      	uxth	r3, r3
 800749e:	b2da      	uxtb	r2, r3
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 f913 	bl	80076d2 <USBD_CtlSendStatus>
}
 80074ac:	e003      	b.n	80074b6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80074ae:	6839      	ldr	r1, [r7, #0]
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 f860 	bl	8007576 <USBD_CtlError>
}
 80074b6:	bf00      	nop
 80074b8:	3708      	adds	r7, #8
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}

080074be <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074be:	b580      	push	{r7, lr}
 80074c0:	b082      	sub	sp, #8
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
 80074c6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	3b01      	subs	r3, #1
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	d80b      	bhi.n	80074ee <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	885b      	ldrh	r3, [r3, #2]
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d10c      	bne.n	80074f8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 f8f3 	bl	80076d2 <USBD_CtlSendStatus>
      }
      break;
 80074ec:	e004      	b.n	80074f8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80074ee:	6839      	ldr	r1, [r7, #0]
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 f840 	bl	8007576 <USBD_CtlError>
      break;
 80074f6:	e000      	b.n	80074fa <USBD_ClrFeature+0x3c>
      break;
 80074f8:	bf00      	nop
  }
}
 80074fa:	bf00      	nop
 80074fc:	3708      	adds	r7, #8
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}

08007502 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007502:	b580      	push	{r7, lr}
 8007504:	b084      	sub	sp, #16
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
 800750a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	781a      	ldrb	r2, [r3, #0]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	3301      	adds	r3, #1
 800751c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	781a      	ldrb	r2, [r3, #0]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	3301      	adds	r3, #1
 800752a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800752c:	68f8      	ldr	r0, [r7, #12]
 800752e:	f7ff fa41 	bl	80069b4 <SWAPBYTE>
 8007532:	4603      	mov	r3, r0
 8007534:	461a      	mov	r2, r3
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	3301      	adds	r3, #1
 800753e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	3301      	adds	r3, #1
 8007544:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	f7ff fa34 	bl	80069b4 <SWAPBYTE>
 800754c:	4603      	mov	r3, r0
 800754e:	461a      	mov	r2, r3
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	3301      	adds	r3, #1
 8007558:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	3301      	adds	r3, #1
 800755e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007560:	68f8      	ldr	r0, [r7, #12]
 8007562:	f7ff fa27 	bl	80069b4 <SWAPBYTE>
 8007566:	4603      	mov	r3, r0
 8007568:	461a      	mov	r2, r3
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	80da      	strh	r2, [r3, #6]
}
 800756e:	bf00      	nop
 8007570:	3710      	adds	r7, #16
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}

08007576 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007576:	b580      	push	{r7, lr}
 8007578:	b082      	sub	sp, #8
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
 800757e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007580:	2180      	movs	r1, #128	; 0x80
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 fc46 	bl	8007e14 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007588:	2100      	movs	r1, #0
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 fc42 	bl	8007e14 <USBD_LL_StallEP>
}
 8007590:	bf00      	nop
 8007592:	3708      	adds	r7, #8
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b086      	sub	sp, #24
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80075a4:	2300      	movs	r3, #0
 80075a6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d036      	beq.n	800761c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80075b2:	6938      	ldr	r0, [r7, #16]
 80075b4:	f000 f836 	bl	8007624 <USBD_GetLen>
 80075b8:	4603      	mov	r3, r0
 80075ba:	3301      	adds	r3, #1
 80075bc:	b29b      	uxth	r3, r3
 80075be:	005b      	lsls	r3, r3, #1
 80075c0:	b29a      	uxth	r2, r3
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80075c6:	7dfb      	ldrb	r3, [r7, #23]
 80075c8:	68ba      	ldr	r2, [r7, #8]
 80075ca:	4413      	add	r3, r2
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	7812      	ldrb	r2, [r2, #0]
 80075d0:	701a      	strb	r2, [r3, #0]
  idx++;
 80075d2:	7dfb      	ldrb	r3, [r7, #23]
 80075d4:	3301      	adds	r3, #1
 80075d6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80075d8:	7dfb      	ldrb	r3, [r7, #23]
 80075da:	68ba      	ldr	r2, [r7, #8]
 80075dc:	4413      	add	r3, r2
 80075de:	2203      	movs	r2, #3
 80075e0:	701a      	strb	r2, [r3, #0]
  idx++;
 80075e2:	7dfb      	ldrb	r3, [r7, #23]
 80075e4:	3301      	adds	r3, #1
 80075e6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80075e8:	e013      	b.n	8007612 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80075ea:	7dfb      	ldrb	r3, [r7, #23]
 80075ec:	68ba      	ldr	r2, [r7, #8]
 80075ee:	4413      	add	r3, r2
 80075f0:	693a      	ldr	r2, [r7, #16]
 80075f2:	7812      	ldrb	r2, [r2, #0]
 80075f4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	3301      	adds	r3, #1
 80075fa:	613b      	str	r3, [r7, #16]
    idx++;
 80075fc:	7dfb      	ldrb	r3, [r7, #23]
 80075fe:	3301      	adds	r3, #1
 8007600:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007602:	7dfb      	ldrb	r3, [r7, #23]
 8007604:	68ba      	ldr	r2, [r7, #8]
 8007606:	4413      	add	r3, r2
 8007608:	2200      	movs	r2, #0
 800760a:	701a      	strb	r2, [r3, #0]
    idx++;
 800760c:	7dfb      	ldrb	r3, [r7, #23]
 800760e:	3301      	adds	r3, #1
 8007610:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1e7      	bne.n	80075ea <USBD_GetString+0x52>
 800761a:	e000      	b.n	800761e <USBD_GetString+0x86>
    return;
 800761c:	bf00      	nop
  }
}
 800761e:	3718      	adds	r7, #24
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007624:	b480      	push	{r7}
 8007626:	b085      	sub	sp, #20
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800762c:	2300      	movs	r3, #0
 800762e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007634:	e005      	b.n	8007642 <USBD_GetLen+0x1e>
  {
    len++;
 8007636:	7bfb      	ldrb	r3, [r7, #15]
 8007638:	3301      	adds	r3, #1
 800763a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	3301      	adds	r3, #1
 8007640:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d1f5      	bne.n	8007636 <USBD_GetLen+0x12>
  }

  return len;
 800764a:	7bfb      	ldrb	r3, [r7, #15]
}
 800764c:	4618      	mov	r0, r3
 800764e:	3714      	adds	r7, #20
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2202      	movs	r2, #2
 8007668:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	68ba      	ldr	r2, [r7, #8]
 800767c:	2100      	movs	r1, #0
 800767e:	68f8      	ldr	r0, [r7, #12]
 8007680:	f000 fc51 	bl	8007f26 <USBD_LL_Transmit>

  return USBD_OK;
 8007684:	2300      	movs	r3, #0
}
 8007686:	4618      	mov	r0, r3
 8007688:	3710      	adds	r7, #16
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}

0800768e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800768e:	b580      	push	{r7, lr}
 8007690:	b084      	sub	sp, #16
 8007692:	af00      	add	r7, sp, #0
 8007694:	60f8      	str	r0, [r7, #12]
 8007696:	60b9      	str	r1, [r7, #8]
 8007698:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	68ba      	ldr	r2, [r7, #8]
 800769e:	2100      	movs	r1, #0
 80076a0:	68f8      	ldr	r0, [r7, #12]
 80076a2:	f000 fc40 	bl	8007f26 <USBD_LL_Transmit>

  return USBD_OK;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3710      	adds	r7, #16
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	60b9      	str	r1, [r7, #8]
 80076ba:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	68ba      	ldr	r2, [r7, #8]
 80076c0:	2100      	movs	r1, #0
 80076c2:	68f8      	ldr	r0, [r7, #12]
 80076c4:	f000 fc50 	bl	8007f68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3710      	adds	r7, #16
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}

080076d2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80076d2:	b580      	push	{r7, lr}
 80076d4:	b082      	sub	sp, #8
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2204      	movs	r2, #4
 80076de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80076e2:	2300      	movs	r3, #0
 80076e4:	2200      	movs	r2, #0
 80076e6:	2100      	movs	r1, #0
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 fc1c 	bl	8007f26 <USBD_LL_Transmit>

  return USBD_OK;
 80076ee:	2300      	movs	r3, #0
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3708      	adds	r7, #8
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2205      	movs	r2, #5
 8007704:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007708:	2300      	movs	r3, #0
 800770a:	2200      	movs	r2, #0
 800770c:	2100      	movs	r1, #0
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 fc2a 	bl	8007f68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007714:	2300      	movs	r3, #0
}
 8007716:	4618      	mov	r0, r3
 8007718:	3708      	adds	r7, #8
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
	...

08007720 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007724:	2200      	movs	r2, #0
 8007726:	490e      	ldr	r1, [pc, #56]	; (8007760 <MX_USB_DEVICE_Init+0x40>)
 8007728:	480e      	ldr	r0, [pc, #56]	; (8007764 <MX_USB_DEVICE_Init+0x44>)
 800772a:	f7fe fd23 	bl	8006174 <USBD_Init>
 800772e:	4603      	mov	r3, r0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d001      	beq.n	8007738 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007734:	f7f9 fcb0 	bl	8001098 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007738:	490b      	ldr	r1, [pc, #44]	; (8007768 <MX_USB_DEVICE_Init+0x48>)
 800773a:	480a      	ldr	r0, [pc, #40]	; (8007764 <MX_USB_DEVICE_Init+0x44>)
 800773c:	f7fe fd4a 	bl	80061d4 <USBD_RegisterClass>
 8007740:	4603      	mov	r3, r0
 8007742:	2b00      	cmp	r3, #0
 8007744:	d001      	beq.n	800774a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007746:	f7f9 fca7 	bl	8001098 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800774a:	4806      	ldr	r0, [pc, #24]	; (8007764 <MX_USB_DEVICE_Init+0x44>)
 800774c:	f7fe fd78 	bl	8006240 <USBD_Start>
 8007750:	4603      	mov	r3, r0
 8007752:	2b00      	cmp	r3, #0
 8007754:	d001      	beq.n	800775a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8007756:	f7f9 fc9f 	bl	8001098 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800775a:	bf00      	nop
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop
 8007760:	20000140 	.word	0x20000140
 8007764:	2000078c 	.word	0x2000078c
 8007768:	20000080 	.word	0x20000080

0800776c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800776c:	b480      	push	{r7}
 800776e:	b083      	sub	sp, #12
 8007770:	af00      	add	r7, sp, #0
 8007772:	4603      	mov	r3, r0
 8007774:	6039      	str	r1, [r7, #0]
 8007776:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	2212      	movs	r2, #18
 800777c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800777e:	4b03      	ldr	r3, [pc, #12]	; (800778c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007780:	4618      	mov	r0, r3
 8007782:	370c      	adds	r7, #12
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr
 800778c:	2000015c 	.word	0x2000015c

08007790 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	4603      	mov	r3, r0
 8007798:	6039      	str	r1, [r7, #0]
 800779a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	2204      	movs	r2, #4
 80077a0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80077a2:	4b03      	ldr	r3, [pc, #12]	; (80077b0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	370c      	adds	r7, #12
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr
 80077b0:	20000170 	.word	0x20000170

080077b4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	4603      	mov	r3, r0
 80077bc:	6039      	str	r1, [r7, #0]
 80077be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80077c0:	79fb      	ldrb	r3, [r7, #7]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d105      	bne.n	80077d2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80077c6:	683a      	ldr	r2, [r7, #0]
 80077c8:	4907      	ldr	r1, [pc, #28]	; (80077e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80077ca:	4808      	ldr	r0, [pc, #32]	; (80077ec <USBD_FS_ProductStrDescriptor+0x38>)
 80077cc:	f7ff fee4 	bl	8007598 <USBD_GetString>
 80077d0:	e004      	b.n	80077dc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80077d2:	683a      	ldr	r2, [r7, #0]
 80077d4:	4904      	ldr	r1, [pc, #16]	; (80077e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80077d6:	4805      	ldr	r0, [pc, #20]	; (80077ec <USBD_FS_ProductStrDescriptor+0x38>)
 80077d8:	f7ff fede 	bl	8007598 <USBD_GetString>
  }
  return USBD_StrDesc;
 80077dc:	4b02      	ldr	r3, [pc, #8]	; (80077e8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3708      	adds	r7, #8
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	20000a68 	.word	0x20000a68
 80077ec:	080080a4 	.word	0x080080a4

080077f0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	4603      	mov	r3, r0
 80077f8:	6039      	str	r1, [r7, #0]
 80077fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80077fc:	683a      	ldr	r2, [r7, #0]
 80077fe:	4904      	ldr	r1, [pc, #16]	; (8007810 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007800:	4804      	ldr	r0, [pc, #16]	; (8007814 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007802:	f7ff fec9 	bl	8007598 <USBD_GetString>
  return USBD_StrDesc;
 8007806:	4b02      	ldr	r3, [pc, #8]	; (8007810 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007808:	4618      	mov	r0, r3
 800780a:	3708      	adds	r7, #8
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}
 8007810:	20000a68 	.word	0x20000a68
 8007814:	080080b4 	.word	0x080080b4

08007818 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
 800781e:	4603      	mov	r3, r0
 8007820:	6039      	str	r1, [r7, #0]
 8007822:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	221a      	movs	r2, #26
 8007828:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800782a:	f000 f843 	bl	80078b4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800782e:	4b02      	ldr	r3, [pc, #8]	; (8007838 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007830:	4618      	mov	r0, r3
 8007832:	3708      	adds	r7, #8
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}
 8007838:	20000174 	.word	0x20000174

0800783c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
 8007842:	4603      	mov	r3, r0
 8007844:	6039      	str	r1, [r7, #0]
 8007846:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007848:	79fb      	ldrb	r3, [r7, #7]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d105      	bne.n	800785a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800784e:	683a      	ldr	r2, [r7, #0]
 8007850:	4907      	ldr	r1, [pc, #28]	; (8007870 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007852:	4808      	ldr	r0, [pc, #32]	; (8007874 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007854:	f7ff fea0 	bl	8007598 <USBD_GetString>
 8007858:	e004      	b.n	8007864 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800785a:	683a      	ldr	r2, [r7, #0]
 800785c:	4904      	ldr	r1, [pc, #16]	; (8007870 <USBD_FS_ConfigStrDescriptor+0x34>)
 800785e:	4805      	ldr	r0, [pc, #20]	; (8007874 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007860:	f7ff fe9a 	bl	8007598 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007864:	4b02      	ldr	r3, [pc, #8]	; (8007870 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007866:	4618      	mov	r0, r3
 8007868:	3708      	adds	r7, #8
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	20000a68 	.word	0x20000a68
 8007874:	080080c8 	.word	0x080080c8

08007878 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b082      	sub	sp, #8
 800787c:	af00      	add	r7, sp, #0
 800787e:	4603      	mov	r3, r0
 8007880:	6039      	str	r1, [r7, #0]
 8007882:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007884:	79fb      	ldrb	r3, [r7, #7]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d105      	bne.n	8007896 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800788a:	683a      	ldr	r2, [r7, #0]
 800788c:	4907      	ldr	r1, [pc, #28]	; (80078ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800788e:	4808      	ldr	r0, [pc, #32]	; (80078b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007890:	f7ff fe82 	bl	8007598 <USBD_GetString>
 8007894:	e004      	b.n	80078a0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007896:	683a      	ldr	r2, [r7, #0]
 8007898:	4904      	ldr	r1, [pc, #16]	; (80078ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800789a:	4805      	ldr	r0, [pc, #20]	; (80078b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800789c:	f7ff fe7c 	bl	8007598 <USBD_GetString>
  }
  return USBD_StrDesc;
 80078a0:	4b02      	ldr	r3, [pc, #8]	; (80078ac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3708      	adds	r7, #8
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop
 80078ac:	20000a68 	.word	0x20000a68
 80078b0:	080080d4 	.word	0x080080d4

080078b4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b084      	sub	sp, #16
 80078b8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80078ba:	4b0f      	ldr	r3, [pc, #60]	; (80078f8 <Get_SerialNum+0x44>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80078c0:	4b0e      	ldr	r3, [pc, #56]	; (80078fc <Get_SerialNum+0x48>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80078c6:	4b0e      	ldr	r3, [pc, #56]	; (8007900 <Get_SerialNum+0x4c>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80078cc:	68fa      	ldr	r2, [r7, #12]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4413      	add	r3, r2
 80078d2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d009      	beq.n	80078ee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80078da:	2208      	movs	r2, #8
 80078dc:	4909      	ldr	r1, [pc, #36]	; (8007904 <Get_SerialNum+0x50>)
 80078de:	68f8      	ldr	r0, [r7, #12]
 80078e0:	f000 f814 	bl	800790c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80078e4:	2204      	movs	r2, #4
 80078e6:	4908      	ldr	r1, [pc, #32]	; (8007908 <Get_SerialNum+0x54>)
 80078e8:	68b8      	ldr	r0, [r7, #8]
 80078ea:	f000 f80f 	bl	800790c <IntToUnicode>
  }
}
 80078ee:	bf00      	nop
 80078f0:	3710      	adds	r7, #16
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	1fff7a10 	.word	0x1fff7a10
 80078fc:	1fff7a14 	.word	0x1fff7a14
 8007900:	1fff7a18 	.word	0x1fff7a18
 8007904:	20000176 	.word	0x20000176
 8007908:	20000186 	.word	0x20000186

0800790c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800790c:	b480      	push	{r7}
 800790e:	b087      	sub	sp, #28
 8007910:	af00      	add	r7, sp, #0
 8007912:	60f8      	str	r0, [r7, #12]
 8007914:	60b9      	str	r1, [r7, #8]
 8007916:	4613      	mov	r3, r2
 8007918:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800791a:	2300      	movs	r3, #0
 800791c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800791e:	2300      	movs	r3, #0
 8007920:	75fb      	strb	r3, [r7, #23]
 8007922:	e027      	b.n	8007974 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	0f1b      	lsrs	r3, r3, #28
 8007928:	2b09      	cmp	r3, #9
 800792a:	d80b      	bhi.n	8007944 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	0f1b      	lsrs	r3, r3, #28
 8007930:	b2da      	uxtb	r2, r3
 8007932:	7dfb      	ldrb	r3, [r7, #23]
 8007934:	005b      	lsls	r3, r3, #1
 8007936:	4619      	mov	r1, r3
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	440b      	add	r3, r1
 800793c:	3230      	adds	r2, #48	; 0x30
 800793e:	b2d2      	uxtb	r2, r2
 8007940:	701a      	strb	r2, [r3, #0]
 8007942:	e00a      	b.n	800795a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	0f1b      	lsrs	r3, r3, #28
 8007948:	b2da      	uxtb	r2, r3
 800794a:	7dfb      	ldrb	r3, [r7, #23]
 800794c:	005b      	lsls	r3, r3, #1
 800794e:	4619      	mov	r1, r3
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	440b      	add	r3, r1
 8007954:	3237      	adds	r2, #55	; 0x37
 8007956:	b2d2      	uxtb	r2, r2
 8007958:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	011b      	lsls	r3, r3, #4
 800795e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007960:	7dfb      	ldrb	r3, [r7, #23]
 8007962:	005b      	lsls	r3, r3, #1
 8007964:	3301      	adds	r3, #1
 8007966:	68ba      	ldr	r2, [r7, #8]
 8007968:	4413      	add	r3, r2
 800796a:	2200      	movs	r2, #0
 800796c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800796e:	7dfb      	ldrb	r3, [r7, #23]
 8007970:	3301      	adds	r3, #1
 8007972:	75fb      	strb	r3, [r7, #23]
 8007974:	7dfa      	ldrb	r2, [r7, #23]
 8007976:	79fb      	ldrb	r3, [r7, #7]
 8007978:	429a      	cmp	r2, r3
 800797a:	d3d3      	bcc.n	8007924 <IntToUnicode+0x18>
  }
}
 800797c:	bf00      	nop
 800797e:	bf00      	nop
 8007980:	371c      	adds	r7, #28
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr
	...

0800798c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b08c      	sub	sp, #48	; 0x30
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007994:	f107 031c 	add.w	r3, r7, #28
 8007998:	2200      	movs	r2, #0
 800799a:	601a      	str	r2, [r3, #0]
 800799c:	605a      	str	r2, [r3, #4]
 800799e:	609a      	str	r2, [r3, #8]
 80079a0:	60da      	str	r2, [r3, #12]
 80079a2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80079ac:	d148      	bne.n	8007a40 <HAL_PCD_MspInit+0xb4>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80079ae:	2300      	movs	r3, #0
 80079b0:	61bb      	str	r3, [r7, #24]
 80079b2:	4b45      	ldr	r3, [pc, #276]	; (8007ac8 <HAL_PCD_MspInit+0x13c>)
 80079b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079b6:	4a44      	ldr	r2, [pc, #272]	; (8007ac8 <HAL_PCD_MspInit+0x13c>)
 80079b8:	f043 0301 	orr.w	r3, r3, #1
 80079bc:	6313      	str	r3, [r2, #48]	; 0x30
 80079be:	4b42      	ldr	r3, [pc, #264]	; (8007ac8 <HAL_PCD_MspInit+0x13c>)
 80079c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c2:	f003 0301 	and.w	r3, r3, #1
 80079c6:	61bb      	str	r3, [r7, #24]
 80079c8:	69bb      	ldr	r3, [r7, #24]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80079ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80079d0:	2300      	movs	r3, #0
 80079d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079d4:	2300      	movs	r3, #0
 80079d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80079d8:	f107 031c 	add.w	r3, r7, #28
 80079dc:	4619      	mov	r1, r3
 80079de:	483b      	ldr	r0, [pc, #236]	; (8007acc <HAL_PCD_MspInit+0x140>)
 80079e0:	f7fa f854 	bl	8001a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80079e4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80079e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079ea:	2302      	movs	r3, #2
 80079ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079ee:	2300      	movs	r3, #0
 80079f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80079f2:	2303      	movs	r3, #3
 80079f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80079f6:	230a      	movs	r3, #10
 80079f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80079fa:	f107 031c 	add.w	r3, r7, #28
 80079fe:	4619      	mov	r1, r3
 8007a00:	4832      	ldr	r0, [pc, #200]	; (8007acc <HAL_PCD_MspInit+0x140>)
 8007a02:	f7fa f843 	bl	8001a8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007a06:	4b30      	ldr	r3, [pc, #192]	; (8007ac8 <HAL_PCD_MspInit+0x13c>)
 8007a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a0a:	4a2f      	ldr	r2, [pc, #188]	; (8007ac8 <HAL_PCD_MspInit+0x13c>)
 8007a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a10:	6353      	str	r3, [r2, #52]	; 0x34
 8007a12:	2300      	movs	r3, #0
 8007a14:	617b      	str	r3, [r7, #20]
 8007a16:	4b2c      	ldr	r3, [pc, #176]	; (8007ac8 <HAL_PCD_MspInit+0x13c>)
 8007a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a1a:	4a2b      	ldr	r2, [pc, #172]	; (8007ac8 <HAL_PCD_MspInit+0x13c>)
 8007a1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007a20:	6453      	str	r3, [r2, #68]	; 0x44
 8007a22:	4b29      	ldr	r3, [pc, #164]	; (8007ac8 <HAL_PCD_MspInit+0x13c>)
 8007a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a2a:	617b      	str	r3, [r7, #20]
 8007a2c:	697b      	ldr	r3, [r7, #20]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007a2e:	2200      	movs	r2, #0
 8007a30:	2100      	movs	r1, #0
 8007a32:	2043      	movs	r0, #67	; 0x43
 8007a34:	f7f9 fff3 	bl	8001a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007a38:	2043      	movs	r0, #67	; 0x43
 8007a3a:	f7fa f80c 	bl	8001a56 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8007a3e:	e03e      	b.n	8007abe <HAL_PCD_MspInit+0x132>
  else if(pcdHandle->Instance==USB_OTG_HS)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a22      	ldr	r2, [pc, #136]	; (8007ad0 <HAL_PCD_MspInit+0x144>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d139      	bne.n	8007abe <HAL_PCD_MspInit+0x132>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	613b      	str	r3, [r7, #16]
 8007a4e:	4b1e      	ldr	r3, [pc, #120]	; (8007ac8 <HAL_PCD_MspInit+0x13c>)
 8007a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a52:	4a1d      	ldr	r2, [pc, #116]	; (8007ac8 <HAL_PCD_MspInit+0x13c>)
 8007a54:	f043 0302 	orr.w	r3, r3, #2
 8007a58:	6313      	str	r3, [r2, #48]	; 0x30
 8007a5a:	4b1b      	ldr	r3, [pc, #108]	; (8007ac8 <HAL_PCD_MspInit+0x13c>)
 8007a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a5e:	f003 0302 	and.w	r3, r3, #2
 8007a62:	613b      	str	r3, [r7, #16]
 8007a64:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007a66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a70:	2300      	movs	r3, #0
 8007a72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a74:	f107 031c 	add.w	r3, r7, #28
 8007a78:	4619      	mov	r1, r3
 8007a7a:	4816      	ldr	r0, [pc, #88]	; (8007ad4 <HAL_PCD_MspInit+0x148>)
 8007a7c:	f7fa f806 	bl	8001a8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8007a80:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8007a84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a86:	2302      	movs	r3, #2
 8007a88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a8e:	2303      	movs	r3, #3
 8007a90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8007a92:	230c      	movs	r3, #12
 8007a94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a96:	f107 031c 	add.w	r3, r7, #28
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	480d      	ldr	r0, [pc, #52]	; (8007ad4 <HAL_PCD_MspInit+0x148>)
 8007a9e:	f7f9 fff5 	bl	8001a8c <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	60fb      	str	r3, [r7, #12]
 8007aa6:	4b08      	ldr	r3, [pc, #32]	; (8007ac8 <HAL_PCD_MspInit+0x13c>)
 8007aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aaa:	4a07      	ldr	r2, [pc, #28]	; (8007ac8 <HAL_PCD_MspInit+0x13c>)
 8007aac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8007ab2:	4b05      	ldr	r3, [pc, #20]	; (8007ac8 <HAL_PCD_MspInit+0x13c>)
 8007ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ab6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007aba:	60fb      	str	r3, [r7, #12]
 8007abc:	68fb      	ldr	r3, [r7, #12]
}
 8007abe:	bf00      	nop
 8007ac0:	3730      	adds	r7, #48	; 0x30
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	40023800 	.word	0x40023800
 8007acc:	40020000 	.word	0x40020000
 8007ad0:	40040000 	.word	0x40040000
 8007ad4:	40020400 	.word	0x40020400

08007ad8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007aec:	4619      	mov	r1, r3
 8007aee:	4610      	mov	r0, r2
 8007af0:	f7fe fbf3 	bl	80062da <USBD_LL_SetupStage>
}
 8007af4:	bf00      	nop
 8007af6:	3708      	adds	r7, #8
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b082      	sub	sp, #8
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	460b      	mov	r3, r1
 8007b06:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007b0e:	78fa      	ldrb	r2, [r7, #3]
 8007b10:	6879      	ldr	r1, [r7, #4]
 8007b12:	4613      	mov	r3, r2
 8007b14:	00db      	lsls	r3, r3, #3
 8007b16:	4413      	add	r3, r2
 8007b18:	009b      	lsls	r3, r3, #2
 8007b1a:	440b      	add	r3, r1
 8007b1c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007b20:	681a      	ldr	r2, [r3, #0]
 8007b22:	78fb      	ldrb	r3, [r7, #3]
 8007b24:	4619      	mov	r1, r3
 8007b26:	f7fe fc2d 	bl	8006384 <USBD_LL_DataOutStage>
}
 8007b2a:	bf00      	nop
 8007b2c:	3708      	adds	r7, #8
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}

08007b32 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b32:	b580      	push	{r7, lr}
 8007b34:	b082      	sub	sp, #8
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
 8007b3a:	460b      	mov	r3, r1
 8007b3c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007b44:	78fa      	ldrb	r2, [r7, #3]
 8007b46:	6879      	ldr	r1, [r7, #4]
 8007b48:	4613      	mov	r3, r2
 8007b4a:	00db      	lsls	r3, r3, #3
 8007b4c:	4413      	add	r3, r2
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	440b      	add	r3, r1
 8007b52:	334c      	adds	r3, #76	; 0x4c
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	78fb      	ldrb	r3, [r7, #3]
 8007b58:	4619      	mov	r1, r3
 8007b5a:	f7fe fcc6 	bl	80064ea <USBD_LL_DataInStage>
}
 8007b5e:	bf00      	nop
 8007b60:	3708      	adds	r7, #8
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}

08007b66 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b66:	b580      	push	{r7, lr}
 8007b68:	b082      	sub	sp, #8
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007b74:	4618      	mov	r0, r3
 8007b76:	f7fe fdfa 	bl	800676e <USBD_LL_SOF>
}
 8007b7a:	bf00      	nop
 8007b7c:	3708      	adds	r7, #8
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}

08007b82 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b82:	b580      	push	{r7, lr}
 8007b84:	b084      	sub	sp, #16
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d102      	bne.n	8007b9c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007b96:	2300      	movs	r3, #0
 8007b98:	73fb      	strb	r3, [r7, #15]
 8007b9a:	e008      	b.n	8007bae <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	68db      	ldr	r3, [r3, #12]
 8007ba0:	2b02      	cmp	r3, #2
 8007ba2:	d102      	bne.n	8007baa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	73fb      	strb	r3, [r7, #15]
 8007ba8:	e001      	b.n	8007bae <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007baa:	f7f9 fa75 	bl	8001098 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007bb4:	7bfa      	ldrb	r2, [r7, #15]
 8007bb6:	4611      	mov	r1, r2
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f7fe fd9a 	bl	80066f2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f7fe fd42 	bl	800664e <USBD_LL_Reset>
}
 8007bca:	bf00      	nop
 8007bcc:	3710      	adds	r7, #16
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
	...

08007bd4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b082      	sub	sp, #8
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007be2:	4618      	mov	r0, r3
 8007be4:	f7fe fd95 	bl	8006712 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	6812      	ldr	r2, [r2, #0]
 8007bf6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007bfa:	f043 0301 	orr.w	r3, r3, #1
 8007bfe:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6a1b      	ldr	r3, [r3, #32]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d005      	beq.n	8007c14 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007c08:	4b04      	ldr	r3, [pc, #16]	; (8007c1c <HAL_PCD_SuspendCallback+0x48>)
 8007c0a:	691b      	ldr	r3, [r3, #16]
 8007c0c:	4a03      	ldr	r2, [pc, #12]	; (8007c1c <HAL_PCD_SuspendCallback+0x48>)
 8007c0e:	f043 0306 	orr.w	r3, r3, #6
 8007c12:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007c14:	bf00      	nop
 8007c16:	3708      	adds	r7, #8
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}
 8007c1c:	e000ed00 	.word	0xe000ed00

08007c20 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7fe fd85 	bl	800673e <USBD_LL_Resume>
}
 8007c34:	bf00      	nop
 8007c36:	3708      	adds	r7, #8
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b082      	sub	sp, #8
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	460b      	mov	r3, r1
 8007c46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c4e:	78fa      	ldrb	r2, [r7, #3]
 8007c50:	4611      	mov	r1, r2
 8007c52:	4618      	mov	r0, r3
 8007c54:	f7fe fddd 	bl	8006812 <USBD_LL_IsoOUTIncomplete>
}
 8007c58:	bf00      	nop
 8007c5a:	3708      	adds	r7, #8
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b082      	sub	sp, #8
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	460b      	mov	r3, r1
 8007c6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c72:	78fa      	ldrb	r2, [r7, #3]
 8007c74:	4611      	mov	r1, r2
 8007c76:	4618      	mov	r0, r3
 8007c78:	f7fe fd99 	bl	80067ae <USBD_LL_IsoINIncomplete>
}
 8007c7c:	bf00      	nop
 8007c7e:	3708      	adds	r7, #8
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c92:	4618      	mov	r0, r3
 8007c94:	f7fe fdef 	bl	8006876 <USBD_LL_DevConnected>
}
 8007c98:	bf00      	nop
 8007c9a:	3708      	adds	r7, #8
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b082      	sub	sp, #8
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f7fe fdec 	bl	800688c <USBD_LL_DevDisconnected>
}
 8007cb4:	bf00      	nop
 8007cb6:	3708      	adds	r7, #8
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b082      	sub	sp, #8
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d13c      	bne.n	8007d46 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007ccc:	4a20      	ldr	r2, [pc, #128]	; (8007d50 <USBD_LL_Init+0x94>)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	4a1e      	ldr	r2, [pc, #120]	; (8007d50 <USBD_LL_Init+0x94>)
 8007cd8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007cdc:	4b1c      	ldr	r3, [pc, #112]	; (8007d50 <USBD_LL_Init+0x94>)
 8007cde:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007ce2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007ce4:	4b1a      	ldr	r3, [pc, #104]	; (8007d50 <USBD_LL_Init+0x94>)
 8007ce6:	2204      	movs	r2, #4
 8007ce8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007cea:	4b19      	ldr	r3, [pc, #100]	; (8007d50 <USBD_LL_Init+0x94>)
 8007cec:	2202      	movs	r2, #2
 8007cee:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007cf0:	4b17      	ldr	r3, [pc, #92]	; (8007d50 <USBD_LL_Init+0x94>)
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007cf6:	4b16      	ldr	r3, [pc, #88]	; (8007d50 <USBD_LL_Init+0x94>)
 8007cf8:	2202      	movs	r2, #2
 8007cfa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007cfc:	4b14      	ldr	r3, [pc, #80]	; (8007d50 <USBD_LL_Init+0x94>)
 8007cfe:	2200      	movs	r2, #0
 8007d00:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007d02:	4b13      	ldr	r3, [pc, #76]	; (8007d50 <USBD_LL_Init+0x94>)
 8007d04:	2200      	movs	r2, #0
 8007d06:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007d08:	4b11      	ldr	r3, [pc, #68]	; (8007d50 <USBD_LL_Init+0x94>)
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8007d0e:	4b10      	ldr	r3, [pc, #64]	; (8007d50 <USBD_LL_Init+0x94>)
 8007d10:	2201      	movs	r2, #1
 8007d12:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007d14:	4b0e      	ldr	r3, [pc, #56]	; (8007d50 <USBD_LL_Init+0x94>)
 8007d16:	2200      	movs	r2, #0
 8007d18:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007d1a:	480d      	ldr	r0, [pc, #52]	; (8007d50 <USBD_LL_Init+0x94>)
 8007d1c:	f7fa f980 	bl	8002020 <HAL_PCD_Init>
 8007d20:	4603      	mov	r3, r0
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d001      	beq.n	8007d2a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007d26:	f7f9 f9b7 	bl	8001098 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007d2a:	2180      	movs	r1, #128	; 0x80
 8007d2c:	4808      	ldr	r0, [pc, #32]	; (8007d50 <USBD_LL_Init+0x94>)
 8007d2e:	f7fb fbc0 	bl	80034b2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007d32:	2240      	movs	r2, #64	; 0x40
 8007d34:	2100      	movs	r1, #0
 8007d36:	4806      	ldr	r0, [pc, #24]	; (8007d50 <USBD_LL_Init+0x94>)
 8007d38:	f7fb fb74 	bl	8003424 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007d3c:	2280      	movs	r2, #128	; 0x80
 8007d3e:	2101      	movs	r1, #1
 8007d40:	4803      	ldr	r0, [pc, #12]	; (8007d50 <USBD_LL_Init+0x94>)
 8007d42:	f7fb fb6f 	bl	8003424 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007d46:	2300      	movs	r3, #0
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3708      	adds	r7, #8
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}
 8007d50:	20000c68 	.word	0x20000c68

08007d54 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d60:	2300      	movs	r3, #0
 8007d62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7fa fa75 	bl	800225a <HAL_PCD_Start>
 8007d70:	4603      	mov	r3, r0
 8007d72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d74:	7bfb      	ldrb	r3, [r7, #15]
 8007d76:	4618      	mov	r0, r3
 8007d78:	f000 f930 	bl	8007fdc <USBD_Get_USB_Status>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d80:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3710      	adds	r7, #16
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b084      	sub	sp, #16
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
 8007d92:	4608      	mov	r0, r1
 8007d94:	4611      	mov	r1, r2
 8007d96:	461a      	mov	r2, r3
 8007d98:	4603      	mov	r3, r0
 8007d9a:	70fb      	strb	r3, [r7, #3]
 8007d9c:	460b      	mov	r3, r1
 8007d9e:	70bb      	strb	r3, [r7, #2]
 8007da0:	4613      	mov	r3, r2
 8007da2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007da4:	2300      	movs	r3, #0
 8007da6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007da8:	2300      	movs	r3, #0
 8007daa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007db2:	78bb      	ldrb	r3, [r7, #2]
 8007db4:	883a      	ldrh	r2, [r7, #0]
 8007db6:	78f9      	ldrb	r1, [r7, #3]
 8007db8:	f7fa ff46 	bl	8002c48 <HAL_PCD_EP_Open>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dc0:	7bfb      	ldrb	r3, [r7, #15]
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f000 f90a 	bl	8007fdc <USBD_Get_USB_Status>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007dcc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3710      	adds	r7, #16
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b084      	sub	sp, #16
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
 8007dde:	460b      	mov	r3, r1
 8007de0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007de2:	2300      	movs	r3, #0
 8007de4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007de6:	2300      	movs	r3, #0
 8007de8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007df0:	78fa      	ldrb	r2, [r7, #3]
 8007df2:	4611      	mov	r1, r2
 8007df4:	4618      	mov	r0, r3
 8007df6:	f7fa ff8f 	bl	8002d18 <HAL_PCD_EP_Close>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dfe:	7bfb      	ldrb	r3, [r7, #15]
 8007e00:	4618      	mov	r0, r3
 8007e02:	f000 f8eb 	bl	8007fdc <USBD_Get_USB_Status>
 8007e06:	4603      	mov	r3, r0
 8007e08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3710      	adds	r7, #16
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e20:	2300      	movs	r3, #0
 8007e22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e24:	2300      	movs	r3, #0
 8007e26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007e2e:	78fa      	ldrb	r2, [r7, #3]
 8007e30:	4611      	mov	r1, r2
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7fb f84f 	bl	8002ed6 <HAL_PCD_EP_SetStall>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e3c:	7bfb      	ldrb	r3, [r7, #15]
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f000 f8cc 	bl	8007fdc <USBD_Get_USB_Status>
 8007e44:	4603      	mov	r3, r0
 8007e46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e48:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3710      	adds	r7, #16
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}

08007e52 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e52:	b580      	push	{r7, lr}
 8007e54:	b084      	sub	sp, #16
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
 8007e5a:	460b      	mov	r3, r1
 8007e5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e62:	2300      	movs	r3, #0
 8007e64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007e6c:	78fa      	ldrb	r2, [r7, #3]
 8007e6e:	4611      	mov	r1, r2
 8007e70:	4618      	mov	r0, r3
 8007e72:	f7fb f894 	bl	8002f9e <HAL_PCD_EP_ClrStall>
 8007e76:	4603      	mov	r3, r0
 8007e78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e7a:	7bfb      	ldrb	r3, [r7, #15]
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f000 f8ad 	bl	8007fdc <USBD_Get_USB_Status>
 8007e82:	4603      	mov	r3, r0
 8007e84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e86:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3710      	adds	r7, #16
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b085      	sub	sp, #20
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	460b      	mov	r3, r1
 8007e9a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007ea2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007ea4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	da0b      	bge.n	8007ec4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007eac:	78fb      	ldrb	r3, [r7, #3]
 8007eae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007eb2:	68f9      	ldr	r1, [r7, #12]
 8007eb4:	4613      	mov	r3, r2
 8007eb6:	00db      	lsls	r3, r3, #3
 8007eb8:	4413      	add	r3, r2
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	440b      	add	r3, r1
 8007ebe:	333e      	adds	r3, #62	; 0x3e
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	e00b      	b.n	8007edc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007ec4:	78fb      	ldrb	r3, [r7, #3]
 8007ec6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007eca:	68f9      	ldr	r1, [r7, #12]
 8007ecc:	4613      	mov	r3, r2
 8007ece:	00db      	lsls	r3, r3, #3
 8007ed0:	4413      	add	r3, r2
 8007ed2:	009b      	lsls	r3, r3, #2
 8007ed4:	440b      	add	r3, r1
 8007ed6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007eda:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3714      	adds	r7, #20
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr

08007ee8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b084      	sub	sp, #16
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f02:	78fa      	ldrb	r2, [r7, #3]
 8007f04:	4611      	mov	r1, r2
 8007f06:	4618      	mov	r0, r3
 8007f08:	f7fa fe79 	bl	8002bfe <HAL_PCD_SetAddress>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f10:	7bfb      	ldrb	r3, [r7, #15]
 8007f12:	4618      	mov	r0, r3
 8007f14:	f000 f862 	bl	8007fdc <USBD_Get_USB_Status>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3710      	adds	r7, #16
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007f26:	b580      	push	{r7, lr}
 8007f28:	b086      	sub	sp, #24
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	60f8      	str	r0, [r7, #12]
 8007f2e:	607a      	str	r2, [r7, #4]
 8007f30:	603b      	str	r3, [r7, #0]
 8007f32:	460b      	mov	r3, r1
 8007f34:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f36:	2300      	movs	r3, #0
 8007f38:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007f44:	7af9      	ldrb	r1, [r7, #11]
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	f7fa ff7a 	bl	8002e42 <HAL_PCD_EP_Transmit>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f52:	7dfb      	ldrb	r3, [r7, #23]
 8007f54:	4618      	mov	r0, r3
 8007f56:	f000 f841 	bl	8007fdc <USBD_Get_USB_Status>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007f5e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3718      	adds	r7, #24
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b086      	sub	sp, #24
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	607a      	str	r2, [r7, #4]
 8007f72:	603b      	str	r3, [r7, #0]
 8007f74:	460b      	mov	r3, r1
 8007f76:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007f86:	7af9      	ldrb	r1, [r7, #11]
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	f7fa ff0e 	bl	8002dac <HAL_PCD_EP_Receive>
 8007f90:	4603      	mov	r3, r0
 8007f92:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f94:	7dfb      	ldrb	r3, [r7, #23]
 8007f96:	4618      	mov	r0, r3
 8007f98:	f000 f820 	bl	8007fdc <USBD_Get_USB_Status>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007fa0:	7dbb      	ldrb	r3, [r7, #22]
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3718      	adds	r7, #24
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
	...

08007fac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b083      	sub	sp, #12
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007fb4:	4b03      	ldr	r3, [pc, #12]	; (8007fc4 <USBD_static_malloc+0x18>)
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	370c      	adds	r7, #12
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr
 8007fc2:	bf00      	nop
 8007fc4:	20001174 	.word	0x20001174

08007fc8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b083      	sub	sp, #12
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]

}
 8007fd0:	bf00      	nop
 8007fd2:	370c      	adds	r7, #12
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr

08007fdc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b085      	sub	sp, #20
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007fea:	79fb      	ldrb	r3, [r7, #7]
 8007fec:	2b03      	cmp	r3, #3
 8007fee:	d817      	bhi.n	8008020 <USBD_Get_USB_Status+0x44>
 8007ff0:	a201      	add	r2, pc, #4	; (adr r2, 8007ff8 <USBD_Get_USB_Status+0x1c>)
 8007ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff6:	bf00      	nop
 8007ff8:	08008009 	.word	0x08008009
 8007ffc:	0800800f 	.word	0x0800800f
 8008000:	08008015 	.word	0x08008015
 8008004:	0800801b 	.word	0x0800801b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008008:	2300      	movs	r3, #0
 800800a:	73fb      	strb	r3, [r7, #15]
    break;
 800800c:	e00b      	b.n	8008026 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800800e:	2303      	movs	r3, #3
 8008010:	73fb      	strb	r3, [r7, #15]
    break;
 8008012:	e008      	b.n	8008026 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008014:	2301      	movs	r3, #1
 8008016:	73fb      	strb	r3, [r7, #15]
    break;
 8008018:	e005      	b.n	8008026 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800801a:	2303      	movs	r3, #3
 800801c:	73fb      	strb	r3, [r7, #15]
    break;
 800801e:	e002      	b.n	8008026 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008020:	2303      	movs	r3, #3
 8008022:	73fb      	strb	r3, [r7, #15]
    break;
 8008024:	bf00      	nop
  }
  return usb_status;
 8008026:	7bfb      	ldrb	r3, [r7, #15]
}
 8008028:	4618      	mov	r0, r3
 800802a:	3714      	adds	r7, #20
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr

08008034 <memset>:
 8008034:	4402      	add	r2, r0
 8008036:	4603      	mov	r3, r0
 8008038:	4293      	cmp	r3, r2
 800803a:	d100      	bne.n	800803e <memset+0xa>
 800803c:	4770      	bx	lr
 800803e:	f803 1b01 	strb.w	r1, [r3], #1
 8008042:	e7f9      	b.n	8008038 <memset+0x4>

08008044 <__libc_init_array>:
 8008044:	b570      	push	{r4, r5, r6, lr}
 8008046:	4d0d      	ldr	r5, [pc, #52]	; (800807c <__libc_init_array+0x38>)
 8008048:	4c0d      	ldr	r4, [pc, #52]	; (8008080 <__libc_init_array+0x3c>)
 800804a:	1b64      	subs	r4, r4, r5
 800804c:	10a4      	asrs	r4, r4, #2
 800804e:	2600      	movs	r6, #0
 8008050:	42a6      	cmp	r6, r4
 8008052:	d109      	bne.n	8008068 <__libc_init_array+0x24>
 8008054:	4d0b      	ldr	r5, [pc, #44]	; (8008084 <__libc_init_array+0x40>)
 8008056:	4c0c      	ldr	r4, [pc, #48]	; (8008088 <__libc_init_array+0x44>)
 8008058:	f000 f818 	bl	800808c <_init>
 800805c:	1b64      	subs	r4, r4, r5
 800805e:	10a4      	asrs	r4, r4, #2
 8008060:	2600      	movs	r6, #0
 8008062:	42a6      	cmp	r6, r4
 8008064:	d105      	bne.n	8008072 <__libc_init_array+0x2e>
 8008066:	bd70      	pop	{r4, r5, r6, pc}
 8008068:	f855 3b04 	ldr.w	r3, [r5], #4
 800806c:	4798      	blx	r3
 800806e:	3601      	adds	r6, #1
 8008070:	e7ee      	b.n	8008050 <__libc_init_array+0xc>
 8008072:	f855 3b04 	ldr.w	r3, [r5], #4
 8008076:	4798      	blx	r3
 8008078:	3601      	adds	r6, #1
 800807a:	e7f2      	b.n	8008062 <__libc_init_array+0x1e>
 800807c:	080080fc 	.word	0x080080fc
 8008080:	080080fc 	.word	0x080080fc
 8008084:	080080fc 	.word	0x080080fc
 8008088:	08008100 	.word	0x08008100

0800808c <_init>:
 800808c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800808e:	bf00      	nop
 8008090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008092:	bc08      	pop	{r3}
 8008094:	469e      	mov	lr, r3
 8008096:	4770      	bx	lr

08008098 <_fini>:
 8008098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800809a:	bf00      	nop
 800809c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800809e:	bc08      	pop	{r3}
 80080a0:	469e      	mov	lr, r3
 80080a2:	4770      	bx	lr
